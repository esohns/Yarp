// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "rpg_character_dictionary_parser_base.h"

// RPG_Character_MonsterMetaType_Type_pimpl
//

void RPG_Character_MonsterMetaType_Type_pimpl::
pre ()
{
}

RPG_Character_MonsterMetaType RPG_Character_MonsterMetaType_Type_pimpl::
post_RPG_Character_MonsterMetaType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterSubType_Type_pimpl
//

void RPG_Character_MonsterSubType_Type_pimpl::
pre ()
{
}

RPG_Character_MonsterSubType RPG_Character_MonsterSubType_Type_pimpl::
post_RPG_Character_MonsterSubType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterType_Type_pimpl
//

void RPG_Character_MonsterType_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterType_Type_pimpl::
metaType (const RPG_Character_MonsterMetaType& metaType)
{
  // TODO
  //
}

void RPG_Character_MonsterType_Type_pimpl::
subType (const RPG_Character_MonsterSubType& subType)
{
  // TODO
  //
}

RPG_Character_MonsterType RPG_Character_MonsterType_Type_pimpl::
post_RPG_Character_MonsterType_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterArmorClass_Type_pimpl
//

void RPG_Character_MonsterArmorClass_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterArmorClass_Type_pimpl::
normal (unsigned int normal)
{
  // TODO
  //
}

void RPG_Character_MonsterArmorClass_Type_pimpl::
touch (unsigned int touch)
{
  // TODO
  //
}

void RPG_Character_MonsterArmorClass_Type_pimpl::
flatFooted (unsigned int flatFooted)
{
  // TODO
  //
}

RPG_Character_MonsterArmorClass RPG_Character_MonsterArmorClass_Type_pimpl::
post_RPG_Character_MonsterArmorClass_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterWeapon_Type_pimpl
//

void RPG_Character_MonsterWeapon_Type_pimpl::
pre ()
{
}

RPG_Character_MonsterWeapon RPG_Character_MonsterWeapon_Type_pimpl::
post_RPG_Character_MonsterWeapon_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterAttackForm_Type_pimpl
//

void RPG_Character_MonsterAttackForm_Type_pimpl::
pre ()
{
}

RPG_Character_MonsterAttackForm RPG_Character_MonsterAttackForm_Type_pimpl::
post_RPG_Character_MonsterAttackForm_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Chance_DiceType_Type_pimpl
//

void RPG_Chance_DiceType_Type_pimpl::
pre ()
{
}

RPG_Chance_DiceType RPG_Chance_DiceType_Type_pimpl::
post_RPG_Chance_DiceType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Chance_Roll_Type_pimpl
//

void RPG_Chance_Roll_Type_pimpl::
pre ()
{
}

void RPG_Chance_Roll_Type_pimpl::
numDice (unsigned int numDice)
{
  // TODO
  //
}

void RPG_Chance_Roll_Type_pimpl::
typeDice (const RPG_Chance_DiceType& typeDice)
{
  // TODO
  //
}

void RPG_Chance_Roll_Type_pimpl::
modifier (long long modifier)
{
  // TODO
  //
}

RPG_Chance_Roll RPG_Chance_Roll_Type_pimpl::
post_RPG_Chance_Roll_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterAttackAction_Type_pimpl
//

void RPG_Character_MonsterAttackAction_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterAttackAction_Type_pimpl::
monsterWeapon (const RPG_Character_MonsterWeapon& monsterWeapon)
{
  // TODO
  //
}

void RPG_Character_MonsterAttackAction_Type_pimpl::
attackBonus (long long attackBonus)
{
  // TODO
  //
}

void RPG_Character_MonsterAttackAction_Type_pimpl::
attackForm (const RPG_Character_MonsterAttackForm& attackForm)
{
  // TODO
  //
}

void RPG_Character_MonsterAttackAction_Type_pimpl::
damage (const RPG_Chance_Roll& damage)
{
  // TODO
  //
}

void RPG_Character_MonsterAttackAction_Type_pimpl::
numAttacksPerRound (unsigned int numAttacksPerRound)
{
  // TODO
  //
}

RPG_Character_MonsterAttackAction RPG_Character_MonsterAttackAction_Type_pimpl::
post_RPG_Character_MonsterAttackAction_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterAttack_Type_pimpl
//

void RPG_Character_MonsterAttack_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterAttack_Type_pimpl::
baseAttackBonus (long long baseAttackBonus)
{
  // TODO
  //
}

void RPG_Character_MonsterAttack_Type_pimpl::
grappleBonus (long long grappleBonus)
{
  // TODO
  //
}

void RPG_Character_MonsterAttack_Type_pimpl::
attackAction (const RPG_Character_MonsterAttackAction& attackAction)
{
  // TODO
  //
}

RPG_Character_MonsterAttack RPG_Character_MonsterAttack_Type_pimpl::
post_RPG_Character_MonsterAttack_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_Size_Type_pimpl
//

void RPG_Character_Size_Type_pimpl::
pre ()
{
}

RPG_Character_Size RPG_Character_Size_Type_pimpl::
post_RPG_Character_Size_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_SavingThrowModifiers_Type_pimpl
//

void RPG_Character_SavingThrowModifiers_Type_pimpl::
pre ()
{
}

void RPG_Character_SavingThrowModifiers_Type_pimpl::
fortitude (long long fortitude)
{
  // TODO
  //
}

void RPG_Character_SavingThrowModifiers_Type_pimpl::
reflex (long long reflex)
{
  // TODO
  //
}

void RPG_Character_SavingThrowModifiers_Type_pimpl::
will (long long will)
{
  // TODO
  //
}

RPG_Character_SavingThrowModifiers RPG_Character_SavingThrowModifiers_Type_pimpl::
post_RPG_Character_SavingThrowModifiers_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_Attributes_Type_pimpl
//

void RPG_Character_Attributes_Type_pimpl::
pre ()
{
}

void RPG_Character_Attributes_Type_pimpl::
strength (unsigned int strength)
{
  // TODO
  //
}

void RPG_Character_Attributes_Type_pimpl::
dexterity (unsigned int dexterity)
{
  // TODO
  //
}

void RPG_Character_Attributes_Type_pimpl::
constitution (unsigned int constitution)
{
  // TODO
  //
}

void RPG_Character_Attributes_Type_pimpl::
intelligence (unsigned int intelligence)
{
  // TODO
  //
}

void RPG_Character_Attributes_Type_pimpl::
wisdom (unsigned int wisdom)
{
  // TODO
  //
}

void RPG_Character_Attributes_Type_pimpl::
charisma (unsigned int charisma)
{
  // TODO
  //
}

RPG_Character_Attributes RPG_Character_Attributes_Type_pimpl::
post_RPG_Character_Attributes_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_Skill_Type_pimpl
//

void RPG_Character_Skill_Type_pimpl::
pre ()
{
}

RPG_Character_Skill RPG_Character_Skill_Type_pimpl::
post_RPG_Character_Skill_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_SkillValue_Type_pimpl
//

void RPG_Character_SkillValue_Type_pimpl::
pre ()
{
}

void RPG_Character_SkillValue_Type_pimpl::
skill (const RPG_Character_Skill& skill)
{
  // TODO
  //
}

void RPG_Character_SkillValue_Type_pimpl::
rank (long long rank)
{
  // TODO
  //
}

RPG_Character_SkillsItem_t RPG_Character_SkillValue_Type_pimpl::
post_RPG_Character_SkillValue_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_Skills_Type_pimpl
//

void RPG_Character_Skills_Type_pimpl::
pre ()
{
}

void RPG_Character_Skills_Type_pimpl::
skill (const RPG_Character_SkillsItem_t& skill)
{
  // TODO
  //
}

RPG_Character_Skills_t RPG_Character_Skills_Type_pimpl::
post_RPG_Character_Skills_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_Feat_Type_pimpl
//

void RPG_Character_Feat_Type_pimpl::
pre ()
{
}

RPG_Character_Feat RPG_Character_Feat_Type_pimpl::
post_RPG_Character_Feat_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_Feats_Type_pimpl
//

void RPG_Character_Feats_Type_pimpl::
pre ()
{
}

void RPG_Character_Feats_Type_pimpl::
feat (const RPG_Character_Feat& feat)
{
  // TODO
  //
}

RPG_Character_Feats_t RPG_Character_Feats_Type_pimpl::
post_RPG_Character_Feats_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_Environment_Type_pimpl
//

void RPG_Character_Environment_Type_pimpl::
pre ()
{
}

RPG_Character_Environment RPG_Character_Environment_Type_pimpl::
post_RPG_Character_Environment_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_Organization_Type_pimpl
//

void RPG_Character_Organization_Type_pimpl::
pre ()
{
}

RPG_Character_Organization RPG_Character_Organization_Type_pimpl::
post_RPG_Character_Organization_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_AlignmentCivic_Type_pimpl
//

void RPG_Character_AlignmentCivic_Type_pimpl::
pre ()
{
}

RPG_Character_AlignmentCivic RPG_Character_AlignmentCivic_Type_pimpl::
post_RPG_Character_AlignmentCivic_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_AlignmentEthic_Type_pimpl
//

void RPG_Character_AlignmentEthic_Type_pimpl::
pre ()
{
}

RPG_Character_AlignmentEthic RPG_Character_AlignmentEthic_Type_pimpl::
post_RPG_Character_AlignmentEthic_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Character_Alignment_Type_pimpl
//

void RPG_Character_Alignment_Type_pimpl::
pre ()
{
}

void RPG_Character_Alignment_Type_pimpl::
civic (const RPG_Character_AlignmentCivic& civic)
{
  // TODO
  //
}

void RPG_Character_Alignment_Type_pimpl::
ethic (const RPG_Character_AlignmentEthic& ethic)
{
  // TODO
  //
}

RPG_Character_Alignment RPG_Character_Alignment_Type_pimpl::
post_RPG_Character_Alignment_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterAdvancementStep_Type_pimpl
//

void RPG_Character_MonsterAdvancementStep_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterAdvancementStep_Type_pimpl::
size (const RPG_Character_Size& size)
{
  // TODO
  //
}

void RPG_Character_MonsterAdvancementStep_Type_pimpl::
range (const RPG_Chance_Roll& range)
{
  // TODO
  //
}

RPG_Character_MonsterAdvancementStep_t RPG_Character_MonsterAdvancementStep_Type_pimpl::
post_RPG_Character_MonsterAdvancementStep_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterAdvancement_Type_pimpl
//

void RPG_Character_MonsterAdvancement_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterAdvancement_Type_pimpl::
step (const RPG_Character_MonsterAdvancementStep_t& step)
{
  // TODO
  //
}

RPG_Character_MonsterAdvancement_t RPG_Character_MonsterAdvancement_Type_pimpl::
post_RPG_Character_MonsterAdvancement_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterProperties_Type_pimpl
//

void RPG_Character_MonsterProperties_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterProperties_Type_pimpl::
name (const ::std::string& name)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
size (const RPG_Character_Size& size)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
type (const RPG_Character_MonsterType& type)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
hitDice (const RPG_Chance_Roll& hitDice)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
initiative (long long initiative)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
speed (unsigned int speed)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
armorClass (const RPG_Character_MonsterArmorClass& armorClass)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
attack (const RPG_Character_MonsterAttack& attack)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
space (unsigned int space)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
reach (unsigned int reach)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
saves (const RPG_Character_SavingThrowModifiers& saves)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
attributes (const RPG_Character_Attributes& attributes)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
skills (const RPG_Character_Skills_t& skills)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
feats (const RPG_Character_Feats_t& feats)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
environment (const RPG_Character_Environment& environment)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
organization (const RPG_Character_Organization& organization)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
challengeRating (unsigned int challengeRating)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
treasureModifier (unsigned int treasureModifier)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
alignment (const RPG_Character_Alignment& alignment)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
advancement (const RPG_Character_MonsterAdvancement_t& advancement)
{
  // TODO
  //
}

void RPG_Character_MonsterProperties_Type_pimpl::
levelAdjustment (unsigned int levelAdjustment)
{
  // TODO
  //
}

RPG_Character_MonsterProperties_XML RPG_Character_MonsterProperties_Type_pimpl::
post_RPG_Character_MonsterProperties_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Character_MonsterDictionary_Type_pimpl
//

void RPG_Character_MonsterDictionary_Type_pimpl::
pre ()
{
}

void RPG_Character_MonsterDictionary_Type_pimpl::
monster (const RPG_Character_MonsterProperties_XML& monster)
{
  // TODO
  //
}

void RPG_Character_MonsterDictionary_Type_pimpl::
post_RPG_Character_MonsterDictionary_Type ()
{
}

// RPG_Character_Dictionary_Type_pimpl
//

void RPG_Character_Dictionary_Type_pimpl::
pre ()
{
}

void RPG_Character_Dictionary_Type_pimpl::
RPG_Character_MonsterDictionary ()
{
}

void RPG_Character_Dictionary_Type_pimpl::
post_RPG_Character_Dictionary_Type ()
{
}

