// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX__CHARACTER_PLAYER_RPG_PLAYER_XML_TREE_H
#define CXX__CHARACTER_PLAYER_RPG_PLAYER_XML_TREE_H

// Begin prologue.
//
#include "rpg_player_exports.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Player_Abilities_XMLTree_Type;
class RPG_Player_Spells_XMLTree_Type;
class RPG_Player_Conditions_XMLTree_Type;
class RPG_Player_CharacterBaseXML_XMLTree_Type;
class RPG_Player_CharacterXML_XMLTree_Type;
class RPG_Player_PlayerXML_XMLTree_Type;
class RPG_Player_State_XMLTree_Type;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "rpg_common_XML_tree.h"

#include "rpg_magic_XML_tree.h"

#include "rpg_item_XML_tree.h"

#include "rpg_character_XML_tree.h"

class RPG_Player_Export RPG_Player_Abilities_XMLTree_Type: public ::xml_schema::type
{
  public:
  // ability
  // 
  typedef ::RPG_Character_Ability_XMLTree_Type ability_type;
  typedef ::xsd::cxx::tree::sequence< ability_type > ability_sequence;
  typedef ability_sequence::iterator ability_iterator;
  typedef ability_sequence::const_iterator ability_const_iterator;
  typedef ::xsd::cxx::tree::traits< ability_type, char > ability_traits;

  const ability_sequence&
  ability () const;

  ability_sequence&
  ability ();

  void
  ability (const ability_sequence& s);

  // Constructors.
  //
  RPG_Player_Abilities_XMLTree_Type ();

  RPG_Player_Abilities_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Player_Abilities_XMLTree_Type (const RPG_Player_Abilities_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Player_Abilities_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_Abilities_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ability_sequence ability_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_Abilities_XMLTree_Type&, const RPG_Player_Abilities_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_Abilities_XMLTree_Type&, const RPG_Player_Abilities_XMLTree_Type&);


class RPG_Player_Export RPG_Player_Spells_XMLTree_Type: public ::xml_schema::type
{
  public:
  // spell
  // 
  typedef ::RPG_Magic_SpellType_XMLTree_Type spell_type;
  typedef ::xsd::cxx::tree::sequence< spell_type > spell_sequence;
  typedef spell_sequence::iterator spell_iterator;
  typedef spell_sequence::const_iterator spell_const_iterator;
  typedef ::xsd::cxx::tree::traits< spell_type, char > spell_traits;

  const spell_sequence&
  spell () const;

  spell_sequence&
  spell ();

  void
  spell (const spell_sequence& s);

  // Constructors.
  //
  RPG_Player_Spells_XMLTree_Type ();

  RPG_Player_Spells_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Player_Spells_XMLTree_Type (const RPG_Player_Spells_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Player_Spells_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_Spells_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  spell_sequence spell_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_Spells_XMLTree_Type&, const RPG_Player_Spells_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_Spells_XMLTree_Type&, const RPG_Player_Spells_XMLTree_Type&);


class RPG_Player_Export RPG_Player_Conditions_XMLTree_Type: public ::xml_schema::type
{
  public:
  // condition
  // 
  typedef ::RPG_Common_Condition_XMLTree_Type condition_type;
  typedef ::xsd::cxx::tree::sequence< condition_type > condition_sequence;
  typedef condition_sequence::iterator condition_iterator;
  typedef condition_sequence::const_iterator condition_const_iterator;
  typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

  const condition_sequence&
  condition () const;

  condition_sequence&
  condition ();

  void
  condition (const condition_sequence& s);

  // Constructors.
  //
  RPG_Player_Conditions_XMLTree_Type ();

  RPG_Player_Conditions_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Player_Conditions_XMLTree_Type (const RPG_Player_Conditions_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Player_Conditions_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_Conditions_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  condition_sequence condition_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_Conditions_XMLTree_Type&, const RPG_Player_Conditions_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_Conditions_XMLTree_Type&, const RPG_Player_Conditions_XMLTree_Type&);


class RPG_Player_Export RPG_Player_CharacterBaseXML_XMLTree_Type: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // alignment
  // 
  typedef ::RPG_Character_Alignment_XMLTree_Type alignment_type;
  typedef ::xsd::cxx::tree::traits< alignment_type, char > alignment_traits;

  const alignment_type&
  alignment () const;

  alignment_type&
  alignment ();

  void
  alignment (const alignment_type& x);

  void
  alignment (::std::auto_ptr< alignment_type > p);

  // attributes
  // 
  typedef ::RPG_Character_Attributes_XMLTree_Type attributes_type;
  typedef ::xsd::cxx::tree::traits< attributes_type, char > attributes_traits;

  const attributes_type&
  attributes () const;

  attributes_type&
  attributes ();

  void
  attributes (const attributes_type& x);

  void
  attributes (::std::auto_ptr< attributes_type > p);

  // skills
  // 
  typedef ::RPG_Character_Skills_XMLTree_Type skills_type;
  typedef ::xsd::cxx::tree::optional< skills_type > skills_optional;
  typedef ::xsd::cxx::tree::traits< skills_type, char > skills_traits;

  const skills_optional&
  skills () const;

  skills_optional&
  skills ();

  void
  skills (const skills_type& x);

  void
  skills (const skills_optional& x);

  void
  skills (::std::auto_ptr< skills_type > p);

  // feats
  // 
  typedef ::RPG_Character_Feats_XMLTree_Type feats_type;
  typedef ::xsd::cxx::tree::optional< feats_type > feats_optional;
  typedef ::xsd::cxx::tree::traits< feats_type, char > feats_traits;

  const feats_optional&
  feats () const;

  feats_optional&
  feats ();

  void
  feats (const feats_type& x);

  void
  feats (const feats_optional& x);

  void
  feats (::std::auto_ptr< feats_type > p);

  // abilities
  // 
  typedef ::RPG_Player_Abilities_XMLTree_Type abilities_type;
  typedef ::xsd::cxx::tree::optional< abilities_type > abilities_optional;
  typedef ::xsd::cxx::tree::traits< abilities_type, char > abilities_traits;

  const abilities_optional&
  abilities () const;

  abilities_optional&
  abilities ();

  void
  abilities (const abilities_type& x);

  void
  abilities (const abilities_optional& x);

  void
  abilities (::std::auto_ptr< abilities_type > p);

  // defaultSize
  // 
  typedef ::RPG_Common_Size_XMLTree_Type defaultSize_type;
  typedef ::xsd::cxx::tree::traits< defaultSize_type, char > defaultSize_traits;

  const defaultSize_type&
  defaultSize () const;

  defaultSize_type&
  defaultSize ();

  void
  defaultSize (const defaultSize_type& x);

  void
  defaultSize (::std::auto_ptr< defaultSize_type > p);

  // maxHP
  // 
  typedef ::xml_schema::unsigned_short maxHP_type;
  typedef ::xsd::cxx::tree::traits< maxHP_type, char > maxHP_traits;

  const maxHP_type&
  maxHP () const;

  maxHP_type&
  maxHP ();

  void
  maxHP (const maxHP_type& x);

  // knownSpells
  // 
  typedef ::RPG_Player_Spells_XMLTree_Type knownSpells_type;
  typedef ::xsd::cxx::tree::optional< knownSpells_type > knownSpells_optional;
  typedef ::xsd::cxx::tree::traits< knownSpells_type, char > knownSpells_traits;

  const knownSpells_optional&
  knownSpells () const;

  knownSpells_optional&
  knownSpells ();

  void
  knownSpells (const knownSpells_type& x);

  void
  knownSpells (const knownSpells_optional& x);

  void
  knownSpells (::std::auto_ptr< knownSpells_type > p);

  // Constructors.
  //
  RPG_Player_CharacterBaseXML_XMLTree_Type (const name_type&,
                                            const alignment_type&,
                                            const attributes_type&,
                                            const defaultSize_type&,
                                            const maxHP_type&);

  RPG_Player_CharacterBaseXML_XMLTree_Type (const name_type&,
                                            ::std::auto_ptr< alignment_type >&,
                                            ::std::auto_ptr< attributes_type >&,
                                            const defaultSize_type&,
                                            const maxHP_type&);

  RPG_Player_CharacterBaseXML_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Player_CharacterBaseXML_XMLTree_Type (const RPG_Player_CharacterBaseXML_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Player_CharacterBaseXML_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_CharacterBaseXML_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< alignment_type > alignment_;
  ::xsd::cxx::tree::one< attributes_type > attributes_;
  skills_optional skills_;
  feats_optional feats_;
  abilities_optional abilities_;
  ::xsd::cxx::tree::one< defaultSize_type > defaultSize_;
  ::xsd::cxx::tree::one< maxHP_type > maxHP_;
  knownSpells_optional knownSpells_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_CharacterBaseXML_XMLTree_Type&, const RPG_Player_CharacterBaseXML_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_CharacterBaseXML_XMLTree_Type&, const RPG_Player_CharacterBaseXML_XMLTree_Type&);


class RPG_Player_Export RPG_Player_CharacterXML_XMLTree_Type: public ::RPG_Player_CharacterBaseXML_XMLTree_Type
{
  public:
  // gender
  // 
  typedef ::RPG_Character_Gender_XMLTree_Type gender_type;
  typedef ::xsd::cxx::tree::traits< gender_type, char > gender_traits;

  const gender_type&
  gender () const;

  gender_type&
  gender ();

  void
  gender (const gender_type& x);

  void
  gender (::std::auto_ptr< gender_type > p);

  // race
  // 
  typedef ::RPG_Character_Race_XMLTree_Type race_type;
  typedef ::xsd::cxx::tree::sequence< race_type > race_sequence;
  typedef race_sequence::iterator race_iterator;
  typedef race_sequence::const_iterator race_const_iterator;
  typedef ::xsd::cxx::tree::traits< race_type, char > race_traits;

  const race_sequence&
  race () const;

  race_sequence&
  race ();

  void
  race (const race_sequence& s);

  // classXML
  // 
  typedef ::RPG_Character_ClassXML_XMLTree_Type classXML_type;
  typedef ::xsd::cxx::tree::traits< classXML_type, char > classXML_traits;

  const classXML_type&
  classXML () const;

  classXML_type&
  classXML ();

  void
  classXML (const classXML_type& x);

  void
  classXML (::std::auto_ptr< classXML_type > p);

  // offhand
  // 
  typedef ::RPG_Character_OffHand_XMLTree_Type offhand_type;
  typedef ::xsd::cxx::tree::traits< offhand_type, char > offhand_traits;

  const offhand_type&
  offhand () const;

  offhand_type&
  offhand ();

  void
  offhand (const offhand_type& x);

  void
  offhand (::std::auto_ptr< offhand_type > p);

  // Constructors.
  //
  RPG_Player_CharacterXML_XMLTree_Type (const name_type&,
                                        const alignment_type&,
                                        const attributes_type&,
                                        const defaultSize_type&,
                                        const maxHP_type&,
                                        const gender_type&,
                                        const classXML_type&,
                                        const offhand_type&);

  RPG_Player_CharacterXML_XMLTree_Type (const name_type&,
                                        ::std::auto_ptr< alignment_type >&,
                                        ::std::auto_ptr< attributes_type >&,
                                        const defaultSize_type&,
                                        const maxHP_type&,
                                        const gender_type&,
                                        ::std::auto_ptr< classXML_type >&,
                                        const offhand_type&);

  RPG_Player_CharacterXML_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Player_CharacterXML_XMLTree_Type (const RPG_Player_CharacterXML_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Player_CharacterXML_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_CharacterXML_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< gender_type > gender_;
  race_sequence race_;
  ::xsd::cxx::tree::one< classXML_type > classXML_;
  ::xsd::cxx::tree::one< offhand_type > offhand_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_CharacterXML_XMLTree_Type&, const RPG_Player_CharacterXML_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_CharacterXML_XMLTree_Type&, const RPG_Player_CharacterXML_XMLTree_Type&);


class RPG_Player_Export RPG_Player_PlayerXML_XMLTree_Type: public ::RPG_Player_CharacterXML_XMLTree_Type
{
  public:
  // XP
  // 
  typedef ::xml_schema::unsigned_int XP_type;
  typedef ::xsd::cxx::tree::traits< XP_type, char > XP_traits;

  const XP_type&
  XP () const;

  XP_type&
  XP ();

  void
  XP (const XP_type& x);

  // conditions
  // 
  typedef ::RPG_Player_Conditions_XMLTree_Type conditions_type;
  typedef ::xsd::cxx::tree::traits< conditions_type, char > conditions_traits;

  const conditions_type&
  conditions () const;

  conditions_type&
  conditions ();

  void
  conditions (const conditions_type& x);

  void
  conditions (::std::auto_ptr< conditions_type > p);

  // HP
  // 
  typedef ::xml_schema::short_ HP_type;
  typedef ::xsd::cxx::tree::traits< HP_type, char > HP_traits;

  const HP_type&
  HP () const;

  HP_type&
  HP ();

  void
  HP (const HP_type& x);

  // spells
  // 
  typedef ::RPG_Player_Spells_XMLTree_Type spells_type;
  typedef ::xsd::cxx::tree::optional< spells_type > spells_optional;
  typedef ::xsd::cxx::tree::traits< spells_type, char > spells_traits;

  const spells_optional&
  spells () const;

  spells_optional&
  spells ();

  void
  spells (const spells_type& x);

  void
  spells (const spells_optional& x);

  void
  spells (::std::auto_ptr< spells_type > p);

  // inventory
  // 
  typedef ::RPG_Item_InventoryXML_XMLTree_Type inventory_type;
  typedef ::xsd::cxx::tree::traits< inventory_type, char > inventory_traits;

  const inventory_type&
  inventory () const;

  inventory_type&
  inventory ();

  void
  inventory (const inventory_type& x);

  void
  inventory (::std::auto_ptr< inventory_type > p);

  // gold
  // 
  typedef ::xml_schema::unsigned_int gold_type;
  typedef ::xsd::cxx::tree::traits< gold_type, char > gold_traits;

  const gold_type&
  gold () const;

  gold_type&
  gold ();

  void
  gold (const gold_type& x);

  // Constructors.
  //
  RPG_Player_PlayerXML_XMLTree_Type (const name_type&,
                                     const alignment_type&,
                                     const attributes_type&,
                                     const defaultSize_type&,
                                     const maxHP_type&,
                                     const gender_type&,
                                     const classXML_type&,
                                     const offhand_type&,
                                     const XP_type&,
                                     const conditions_type&,
                                     const HP_type&,
                                     const inventory_type&,
                                     const gold_type&);

  RPG_Player_PlayerXML_XMLTree_Type (const name_type&,
                                     ::std::auto_ptr< alignment_type >&,
                                     ::std::auto_ptr< attributes_type >&,
                                     const defaultSize_type&,
                                     const maxHP_type&,
                                     const gender_type&,
                                     ::std::auto_ptr< classXML_type >&,
                                     const offhand_type&,
                                     const XP_type&,
                                     ::std::auto_ptr< conditions_type >&,
                                     const HP_type&,
                                     ::std::auto_ptr< inventory_type >&,
                                     const gold_type&);

  RPG_Player_PlayerXML_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Player_PlayerXML_XMLTree_Type (const RPG_Player_PlayerXML_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Player_PlayerXML_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_PlayerXML_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< XP_type > XP_;
  ::xsd::cxx::tree::one< conditions_type > conditions_;
  ::xsd::cxx::tree::one< HP_type > HP_;
  spells_optional spells_;
  ::xsd::cxx::tree::one< inventory_type > inventory_;
  ::xsd::cxx::tree::one< gold_type > gold_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_PlayerXML_XMLTree_Type&, const RPG_Player_PlayerXML_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_PlayerXML_XMLTree_Type&, const RPG_Player_PlayerXML_XMLTree_Type&);


class RPG_Player_Export RPG_Player_State_XMLTree_Type: public ::xml_schema::type
{
  public:
  // file
  // 
  typedef ::xml_schema::string file_type;
  typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

  const file_type&
  file () const;

  file_type&
  file ();

  void
  file (const file_type& x);

  void
  file (::std::auto_ptr< file_type > p);

  // Constructors.
  //
  RPG_Player_State_XMLTree_Type (const file_type&);

  RPG_Player_State_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Player_State_XMLTree_Type (const RPG_Player_State_XMLTree_Type& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual RPG_Player_State_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Player_State_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< file_type > file_;
};

RPG_Player_Export
bool
operator== (const RPG_Player_State_XMLTree_Type&, const RPG_Player_State_XMLTree_Type&);

RPG_Player_Export
bool
operator!= (const RPG_Player_State_XMLTree_Type&, const RPG_Player_State_XMLTree_Type&);


#include <iosfwd>

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_Abilities_XMLTree_Type&);

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_Spells_XMLTree_Type&);

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_Conditions_XMLTree_Type&);

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_CharacterBaseXML_XMLTree_Type&);

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_CharacterXML_XMLTree_Type&);

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_PlayerXML_XMLTree_Type&);

RPG_Player_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Player_State_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Player_Export
::std::auto_ptr< ::RPG_Player_PlayerXML_XMLTree_Type >
player_t (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_Abilities_XMLTree_Type&);

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_Spells_XMLTree_Type&);

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_Conditions_XMLTree_Type&);

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_CharacterBaseXML_XMLTree_Type&);

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_CharacterXML_XMLTree_Type&);

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_PlayerXML_XMLTree_Type&);

RPG_Player_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Player_State_XMLTree_Type&);

// Serialize to std::ostream.
//

RPG_Player_Export
void
player_t (::std::ostream& os,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

RPG_Player_Export
void
player_t (::std::ostream& os,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

RPG_Player_Export
void
player_t (::std::ostream& os,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

RPG_Player_Export
void
player_t (::xercesc::XMLFormatTarget& ft,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

RPG_Player_Export
void
player_t (::xercesc::XMLFormatTarget& ft,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

RPG_Player_Export
void
player_t (::xercesc::XMLFormatTarget& ft,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

RPG_Player_Export
void
player_t (::xercesc::DOMDocument& d,
          const ::RPG_Player_PlayerXML_XMLTree_Type& x,
          ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

RPG_Player_Export
::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
player_t (const ::RPG_Player_PlayerXML_XMLTree_Type& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX__CHARACTER_PLAYER_RPG_PLAYER_XML_TREE_H
