// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_character_player_XML_tree.h"

// RPG_Character_BaseXML_XMLTree_Type
// 

const RPG_Character_BaseXML_XMLTree_Type::gender_type& RPG_Character_BaseXML_XMLTree_Type::
gender () const
{
  return this->gender_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::gender_type& RPG_Character_BaseXML_XMLTree_Type::
gender ()
{
  return this->gender_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
gender (const gender_type& x)
{
  this->gender_.set (x);
}

void RPG_Character_BaseXML_XMLTree_Type::
gender (::std::auto_ptr< gender_type > x)
{
  this->gender_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::alignment_type& RPG_Character_BaseXML_XMLTree_Type::
alignment () const
{
  return this->alignment_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::alignment_type& RPG_Character_BaseXML_XMLTree_Type::
alignment ()
{
  return this->alignment_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
alignment (const alignment_type& x)
{
  this->alignment_.set (x);
}

void RPG_Character_BaseXML_XMLTree_Type::
alignment (::std::auto_ptr< alignment_type > x)
{
  this->alignment_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::attributes_type& RPG_Character_BaseXML_XMLTree_Type::
attributes () const
{
  return this->attributes_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::attributes_type& RPG_Character_BaseXML_XMLTree_Type::
attributes ()
{
  return this->attributes_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
attributes (const attributes_type& x)
{
  this->attributes_.set (x);
}

void RPG_Character_BaseXML_XMLTree_Type::
attributes (::std::auto_ptr< attributes_type > x)
{
  this->attributes_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::skills_type& RPG_Character_BaseXML_XMLTree_Type::
skills () const
{
  return this->skills_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::skills_type& RPG_Character_BaseXML_XMLTree_Type::
skills ()
{
  return this->skills_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
skills (const skills_type& x)
{
  this->skills_.set (x);
}

void RPG_Character_BaseXML_XMLTree_Type::
skills (::std::auto_ptr< skills_type > x)
{
  this->skills_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::feats_type& RPG_Character_BaseXML_XMLTree_Type::
feats () const
{
  return this->feats_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::feats_type& RPG_Character_BaseXML_XMLTree_Type::
feats ()
{
  return this->feats_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
feats (const feats_type& x)
{
  this->feats_.set (x);
}

void RPG_Character_BaseXML_XMLTree_Type::
feats (::std::auto_ptr< feats_type > x)
{
  this->feats_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::abilities_type& RPG_Character_BaseXML_XMLTree_Type::
abilities () const
{
  return this->abilities_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::abilities_type& RPG_Character_BaseXML_XMLTree_Type::
abilities ()
{
  return this->abilities_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
abilities (const abilities_type& x)
{
  this->abilities_.set (x);
}

void RPG_Character_BaseXML_XMLTree_Type::
abilities (::std::auto_ptr< abilities_type > x)
{
  this->abilities_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::XP_type& RPG_Character_BaseXML_XMLTree_Type::
XP () const
{
  return this->XP_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::XP_type& RPG_Character_BaseXML_XMLTree_Type::
XP ()
{
  return this->XP_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
XP (const XP_type& x)
{
  this->XP_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::HP_type& RPG_Character_BaseXML_XMLTree_Type::
HP () const
{
  return this->HP_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::HP_type& RPG_Character_BaseXML_XMLTree_Type::
HP ()
{
  return this->HP_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
HP (const HP_type& x)
{
  this->HP_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::maxHP_type& RPG_Character_BaseXML_XMLTree_Type::
maxHP () const
{
  return this->maxHP_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::maxHP_type& RPG_Character_BaseXML_XMLTree_Type::
maxHP ()
{
  return this->maxHP_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
maxHP (const maxHP_type& x)
{
  this->maxHP_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::gold_type& RPG_Character_BaseXML_XMLTree_Type::
gold () const
{
  return this->gold_.get ();
}

RPG_Character_BaseXML_XMLTree_Type::gold_type& RPG_Character_BaseXML_XMLTree_Type::
gold ()
{
  return this->gold_.get ();
}

void RPG_Character_BaseXML_XMLTree_Type::
gold (const gold_type& x)
{
  this->gold_.set (x);
}

const RPG_Character_BaseXML_XMLTree_Type::condition_sequence& RPG_Character_BaseXML_XMLTree_Type::
condition () const
{
  return this->condition_;
}

RPG_Character_BaseXML_XMLTree_Type::condition_sequence& RPG_Character_BaseXML_XMLTree_Type::
condition ()
{
  return this->condition_;
}

void RPG_Character_BaseXML_XMLTree_Type::
condition (const condition_sequence& s)
{
  this->condition_ = s;
}


// RPG_Character_PlayerXML_XMLTree_Type
// 

const RPG_Character_PlayerXML_XMLTree_Type::name_type& RPG_Character_PlayerXML_XMLTree_Type::
name () const
{
  return this->name_.get ();
}

RPG_Character_PlayerXML_XMLTree_Type::name_type& RPG_Character_PlayerXML_XMLTree_Type::
name ()
{
  return this->name_.get ();
}

void RPG_Character_PlayerXML_XMLTree_Type::
name (const name_type& x)
{
  this->name_.set (x);
}

void RPG_Character_PlayerXML_XMLTree_Type::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const RPG_Character_PlayerXML_XMLTree_Type::race_sequence& RPG_Character_PlayerXML_XMLTree_Type::
race () const
{
  return this->race_;
}

RPG_Character_PlayerXML_XMLTree_Type::race_sequence& RPG_Character_PlayerXML_XMLTree_Type::
race ()
{
  return this->race_;
}

void RPG_Character_PlayerXML_XMLTree_Type::
race (const race_sequence& s)
{
  this->race_ = s;
}

const RPG_Character_PlayerXML_XMLTree_Type::classXML_type& RPG_Character_PlayerXML_XMLTree_Type::
classXML () const
{
  return this->classXML_.get ();
}

RPG_Character_PlayerXML_XMLTree_Type::classXML_type& RPG_Character_PlayerXML_XMLTree_Type::
classXML ()
{
  return this->classXML_.get ();
}

void RPG_Character_PlayerXML_XMLTree_Type::
classXML (const classXML_type& x)
{
  this->classXML_.set (x);
}

void RPG_Character_PlayerXML_XMLTree_Type::
classXML (::std::auto_ptr< classXML_type > x)
{
  this->classXML_.set (x);
}

const RPG_Character_PlayerXML_XMLTree_Type::offhand_type& RPG_Character_PlayerXML_XMLTree_Type::
offhand () const
{
  return this->offhand_.get ();
}

RPG_Character_PlayerXML_XMLTree_Type::offhand_type& RPG_Character_PlayerXML_XMLTree_Type::
offhand ()
{
  return this->offhand_.get ();
}

void RPG_Character_PlayerXML_XMLTree_Type::
offhand (const offhand_type& x)
{
  this->offhand_.set (x);
}

void RPG_Character_PlayerXML_XMLTree_Type::
offhand (::std::auto_ptr< offhand_type > x)
{
  this->offhand_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Character_BaseXML_XMLTree_Type
//

RPG_Character_BaseXML_XMLTree_Type::
RPG_Character_BaseXML_XMLTree_Type (const gender_type& gender,
                                    const alignment_type& alignment,
                                    const attributes_type& attributes,
                                    const skills_type& skills,
                                    const feats_type& feats,
                                    const abilities_type& abilities,
                                    const XP_type& XP,
                                    const HP_type& HP,
                                    const maxHP_type& maxHP,
                                    const gold_type& gold)
: ::xml_schema::type (),
  gender_ (gender, ::xml_schema::flags (), this),
  alignment_ (alignment, ::xml_schema::flags (), this),
  attributes_ (attributes, ::xml_schema::flags (), this),
  skills_ (skills, ::xml_schema::flags (), this),
  feats_ (feats, ::xml_schema::flags (), this),
  abilities_ (abilities, ::xml_schema::flags (), this),
  XP_ (XP, ::xml_schema::flags (), this),
  HP_ (HP, ::xml_schema::flags (), this),
  maxHP_ (maxHP, ::xml_schema::flags (), this),
  gold_ (gold, ::xml_schema::flags (), this),
  condition_ (::xml_schema::flags (), this)
{
}

RPG_Character_BaseXML_XMLTree_Type::
RPG_Character_BaseXML_XMLTree_Type (const gender_type& gender,
                                    ::std::auto_ptr< alignment_type >& alignment,
                                    ::std::auto_ptr< attributes_type >& attributes,
                                    ::std::auto_ptr< skills_type >& skills,
                                    ::std::auto_ptr< feats_type >& feats,
                                    ::std::auto_ptr< abilities_type >& abilities,
                                    const XP_type& XP,
                                    const HP_type& HP,
                                    const maxHP_type& maxHP,
                                    const gold_type& gold)
: ::xml_schema::type (),
  gender_ (gender, ::xml_schema::flags (), this),
  alignment_ (alignment, ::xml_schema::flags (), this),
  attributes_ (attributes, ::xml_schema::flags (), this),
  skills_ (skills, ::xml_schema::flags (), this),
  feats_ (feats, ::xml_schema::flags (), this),
  abilities_ (abilities, ::xml_schema::flags (), this),
  XP_ (XP, ::xml_schema::flags (), this),
  HP_ (HP, ::xml_schema::flags (), this),
  maxHP_ (maxHP, ::xml_schema::flags (), this),
  gold_ (gold, ::xml_schema::flags (), this),
  condition_ (::xml_schema::flags (), this)
{
}

RPG_Character_BaseXML_XMLTree_Type::
RPG_Character_BaseXML_XMLTree_Type (const RPG_Character_BaseXML_XMLTree_Type& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  gender_ (x.gender_, f, this),
  alignment_ (x.alignment_, f, this),
  attributes_ (x.attributes_, f, this),
  skills_ (x.skills_, f, this),
  feats_ (x.feats_, f, this),
  abilities_ (x.abilities_, f, this),
  XP_ (x.XP_, f, this),
  HP_ (x.HP_, f, this),
  maxHP_ (x.maxHP_, f, this),
  gold_ (x.gold_, f, this),
  condition_ (x.condition_, f, this)
{
}

RPG_Character_BaseXML_XMLTree_Type::
RPG_Character_BaseXML_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  gender_ (f, this),
  alignment_ (f, this),
  attributes_ (f, this),
  skills_ (f, this),
  feats_ (f, this),
  abilities_ (f, this),
  XP_ (f, this),
  HP_ (f, this),
  maxHP_ (f, this),
  gold_ (f, this),
  condition_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Character_BaseXML_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // gender
    //
    if (n.name () == "gender" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< gender_type > r (
        gender_traits::create (i, f, this));

      if (!gender_.present ())
      {
        this->gender_.set (r);
        continue;
      }
    }

    // alignment
    //
    if (n.name () == "alignment" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< alignment_type > r (
        alignment_traits::create (i, f, this));

      if (!alignment_.present ())
      {
        this->alignment_.set (r);
        continue;
      }
    }

    // attributes
    //
    if (n.name () == "attributes" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< attributes_type > r (
        attributes_traits::create (i, f, this));

      if (!attributes_.present ())
      {
        this->attributes_.set (r);
        continue;
      }
    }

    // skills
    //
    if (n.name () == "skills" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< skills_type > r (
        skills_traits::create (i, f, this));

      if (!skills_.present ())
      {
        this->skills_.set (r);
        continue;
      }
    }

    // feats
    //
    if (n.name () == "feats" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< feats_type > r (
        feats_traits::create (i, f, this));

      if (!feats_.present ())
      {
        this->feats_.set (r);
        continue;
      }
    }

    // abilities
    //
    if (n.name () == "abilities" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< abilities_type > r (
        abilities_traits::create (i, f, this));

      if (!abilities_.present ())
      {
        this->abilities_.set (r);
        continue;
      }
    }

    // XP
    //
    if (n.name () == "XP" && n.namespace_ () == "urn:rpg")
    {
      if (!XP_.present ())
      {
        this->XP_.set (XP_traits::create (i, f, this));
        continue;
      }
    }

    // HP
    //
    if (n.name () == "HP" && n.namespace_ () == "urn:rpg")
    {
      if (!HP_.present ())
      {
        this->HP_.set (HP_traits::create (i, f, this));
        continue;
      }
    }

    // maxHP
    //
    if (n.name () == "maxHP" && n.namespace_ () == "urn:rpg")
    {
      if (!maxHP_.present ())
      {
        this->maxHP_.set (maxHP_traits::create (i, f, this));
        continue;
      }
    }

    // gold
    //
    if (n.name () == "gold" && n.namespace_ () == "urn:rpg")
    {
      if (!gold_.present ())
      {
        this->gold_.set (gold_traits::create (i, f, this));
        continue;
      }
    }

    // condition
    //
    if (n.name () == "condition" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< condition_type > r (
        condition_traits::create (i, f, this));

      this->condition_.push_back (r);
      continue;
    }

    break;
  }

  if (!gender_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gender",
      "urn:rpg");
  }

  if (!alignment_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "alignment",
      "urn:rpg");
  }

  if (!attributes_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "attributes",
      "urn:rpg");
  }

  if (!skills_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "skills",
      "urn:rpg");
  }

  if (!feats_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "feats",
      "urn:rpg");
  }

  if (!abilities_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "abilities",
      "urn:rpg");
  }

  if (!XP_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "XP",
      "urn:rpg");
  }

  if (!HP_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "HP",
      "urn:rpg");
  }

  if (!maxHP_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxHP",
      "urn:rpg");
  }

  if (!gold_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gold",
      "urn:rpg");
  }
}

RPG_Character_BaseXML_XMLTree_Type* RPG_Character_BaseXML_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Character_BaseXML_XMLTree_Type (*this, f, c);
}

RPG_Character_BaseXML_XMLTree_Type::
~RPG_Character_BaseXML_XMLTree_Type ()
{
}

bool
operator== (const RPG_Character_BaseXML_XMLTree_Type& x, const RPG_Character_BaseXML_XMLTree_Type& y)
{
  if (!(x.gender () == y.gender ()))
    return false;

  if (!(x.alignment () == y.alignment ()))
    return false;

  if (!(x.attributes () == y.attributes ()))
    return false;

  if (!(x.skills () == y.skills ()))
    return false;

  if (!(x.feats () == y.feats ()))
    return false;

  if (!(x.abilities () == y.abilities ()))
    return false;

  if (!(x.XP () == y.XP ()))
    return false;

  if (!(x.HP () == y.HP ()))
    return false;

  if (!(x.maxHP () == y.maxHP ()))
    return false;

  if (!(x.gold () == y.gold ()))
    return false;

  if (!(x.condition () == y.condition ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Character_BaseXML_XMLTree_Type& x, const RPG_Character_BaseXML_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Character_PlayerXML_XMLTree_Type
//

RPG_Character_PlayerXML_XMLTree_Type::
RPG_Character_PlayerXML_XMLTree_Type (const gender_type& gender,
                                      const alignment_type& alignment,
                                      const attributes_type& attributes,
                                      const skills_type& skills,
                                      const feats_type& feats,
                                      const abilities_type& abilities,
                                      const XP_type& XP,
                                      const HP_type& HP,
                                      const maxHP_type& maxHP,
                                      const gold_type& gold,
                                      const name_type& name,
                                      const classXML_type& classXML,
                                      const offhand_type& offhand)
: ::RPG_Character_BaseXML_XMLTree_Type (gender,
                                        alignment,
                                        attributes,
                                        skills,
                                        feats,
                                        abilities,
                                        XP,
                                        HP,
                                        maxHP,
                                        gold),
  name_ (name, ::xml_schema::flags (), this),
  race_ (::xml_schema::flags (), this),
  classXML_ (classXML, ::xml_schema::flags (), this),
  offhand_ (offhand, ::xml_schema::flags (), this)
{
}

RPG_Character_PlayerXML_XMLTree_Type::
RPG_Character_PlayerXML_XMLTree_Type (const gender_type& gender,
                                      ::std::auto_ptr< alignment_type >& alignment,
                                      ::std::auto_ptr< attributes_type >& attributes,
                                      ::std::auto_ptr< skills_type >& skills,
                                      ::std::auto_ptr< feats_type >& feats,
                                      ::std::auto_ptr< abilities_type >& abilities,
                                      const XP_type& XP,
                                      const HP_type& HP,
                                      const maxHP_type& maxHP,
                                      const gold_type& gold,
                                      const name_type& name,
                                      ::std::auto_ptr< classXML_type >& classXML,
                                      const offhand_type& offhand)
: ::RPG_Character_BaseXML_XMLTree_Type (gender,
                                        alignment,
                                        attributes,
                                        skills,
                                        feats,
                                        abilities,
                                        XP,
                                        HP,
                                        maxHP,
                                        gold),
  name_ (name, ::xml_schema::flags (), this),
  race_ (::xml_schema::flags (), this),
  classXML_ (classXML, ::xml_schema::flags (), this),
  offhand_ (offhand, ::xml_schema::flags (), this)
{
}

RPG_Character_PlayerXML_XMLTree_Type::
RPG_Character_PlayerXML_XMLTree_Type (const RPG_Character_PlayerXML_XMLTree_Type& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::RPG_Character_BaseXML_XMLTree_Type (x, f, c),
  name_ (x.name_, f, this),
  race_ (x.race_, f, this),
  classXML_ (x.classXML_, f, this),
  offhand_ (x.offhand_, f, this)
{
}

RPG_Character_PlayerXML_XMLTree_Type::
RPG_Character_PlayerXML_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::RPG_Character_BaseXML_XMLTree_Type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  race_ (f, this),
  classXML_ (f, this),
  offhand_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Character_PlayerXML_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::RPG_Character_BaseXML_XMLTree_Type::parse (p, f);

  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    // race
    //
    if (n.name () == "race" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< race_type > r (
        race_traits::create (i, f, this));

      this->race_.push_back (r);
      continue;
    }

    // classXML
    //
    if (n.name () == "classXML" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< classXML_type > r (
        classXML_traits::create (i, f, this));

      if (!classXML_.present ())
      {
        this->classXML_.set (r);
        continue;
      }
    }

    // offhand
    //
    if (n.name () == "offhand" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< offhand_type > r (
        offhand_traits::create (i, f, this));

      if (!offhand_.present ())
      {
        this->offhand_.set (r);
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "urn:rpg");
  }

  if (!classXML_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "classXML",
      "urn:rpg");
  }

  if (!offhand_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "offhand",
      "urn:rpg");
  }
}

RPG_Character_PlayerXML_XMLTree_Type* RPG_Character_PlayerXML_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Character_PlayerXML_XMLTree_Type (*this, f, c);
}

RPG_Character_PlayerXML_XMLTree_Type::
~RPG_Character_PlayerXML_XMLTree_Type ()
{
}

bool
operator== (const RPG_Character_PlayerXML_XMLTree_Type& x, const RPG_Character_PlayerXML_XMLTree_Type& y)
{
  if (!(static_cast< const ::RPG_Character_BaseXML_XMLTree_Type& > (x) ==
        static_cast< const ::RPG_Character_BaseXML_XMLTree_Type& > (y)))
    return false;

  if (!(x.name () == y.name ()))
    return false;

  if (!(x.race () == y.race ()))
    return false;

  if (!(x.classXML () == y.classXML ()))
    return false;

  if (!(x.offhand () == y.offhand ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Character_PlayerXML_XMLTree_Type& x, const RPG_Character_PlayerXML_XMLTree_Type& y)
{
  return !(x == y);
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, const RPG_Character_BaseXML_XMLTree_Type& i)
{
  o << ::std::endl << "gender: " << i.gender ();
  o << ::std::endl << "alignment: " << i.alignment ();
  o << ::std::endl << "attributes: " << i.attributes ();
  o << ::std::endl << "skills: " << i.skills ();
  o << ::std::endl << "feats: " << i.feats ();
  o << ::std::endl << "abilities: " << i.abilities ();
  o << ::std::endl << "XP: " << i.XP ();
  o << ::std::endl << "HP: " << i.HP ();
  o << ::std::endl << "maxHP: " << i.maxHP ();
  o << ::std::endl << "gold: " << i.gold ();
  for (RPG_Character_BaseXML_XMLTree_Type::condition_const_iterator
       b (i.condition ().begin ()), e (i.condition ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "condition: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Character_PlayerXML_XMLTree_Type& i)
{
  o << static_cast< const ::RPG_Character_BaseXML_XMLTree_Type& > (i);

  o << ::std::endl << "name: " << i.name ();
  for (RPG_Character_PlayerXML_XMLTree_Type::race_const_iterator
       b (i.race ().begin ()), e (i.race ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "race: " << *b;
  }

  o << ::std::endl << "classXML: " << i.classXML ();
  o << ::std::endl << "offhand: " << i.offhand ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
    ::player (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
    ::player (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
    ::player (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::player (isrc, f, p);
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::player (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::player (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::player (isrc, f, p);
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::player (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::player (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
    ::player (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
    ::player (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
    ::player (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
      ::player (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "player" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Character_PlayerXML_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "player",
    "urn:rpg");
}

::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type >
player (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "player" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Character_PlayerXML_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Character_PlayerXML_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "player",
    "urn:rpg");
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Character_BaseXML_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // gender
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gender",
        "urn:rpg",
        e));

    s << i.gender ();
  }

  // alignment
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "alignment",
        "urn:rpg",
        e));

    s << i.alignment ();
  }

  // attributes
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "attributes",
        "urn:rpg",
        e));

    s << i.attributes ();
  }

  // skills
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "skills",
        "urn:rpg",
        e));

    s << i.skills ();
  }

  // feats
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "feats",
        "urn:rpg",
        e));

    s << i.feats ();
  }

  // abilities
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "abilities",
        "urn:rpg",
        e));

    s << i.abilities ();
  }

  // XP
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "XP",
        "urn:rpg",
        e));

    s << i.XP ();
  }

  // HP
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "HP",
        "urn:rpg",
        e));

    s << i.HP ();
  }

  // maxHP
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxHP",
        "urn:rpg",
        e));

    s << i.maxHP ();
  }

  // gold
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gold",
        "urn:rpg",
        e));

    s << i.gold ();
  }

  // condition
  //
  for (RPG_Character_BaseXML_XMLTree_Type::condition_const_iterator
       b (i.condition ().begin ()), n (i.condition ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "condition",
        "urn:rpg",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Character_PlayerXML_XMLTree_Type& i)
{
  e << static_cast< const ::RPG_Character_BaseXML_XMLTree_Type& > (i);

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        "urn:rpg",
        e));

    s << i.name ();
  }

  // race
  //
  for (RPG_Character_PlayerXML_XMLTree_Type::race_const_iterator
       b (i.race ().begin ()), n (i.race ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "race",
        "urn:rpg",
        e));

    s << *b;
  }

  // classXML
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "classXML",
        "urn:rpg",
        e));

    s << i.classXML ();
  }

  // offhand
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "offhand",
        "urn:rpg",
        e));

    s << i.offhand ();
  }
}

void
player (::std::ostream& o,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::player (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
player (::std::ostream& o,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::player (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
player (::std::ostream& o,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::player (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
player (::xercesc::XMLFormatTarget& t,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::player (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
player (::xercesc::XMLFormatTarget& t,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::player (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
player (::xercesc::XMLFormatTarget& t,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::player (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
player (::xercesc::DOMDocument& d,
        const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "player" &&
      n.namespace_ () == "urn:rpg")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "player",
      "urn:rpg");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
player (const ::RPG_Character_PlayerXML_XMLTree_Type& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "player",
      "urn:rpg",
      m, f));

  ::player (*d, s, f);
  return d;
}

RPG_Character_BaseXML_XMLTree_Type::
RPG_Character_BaseXML_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  gender_ (f, this),
  alignment_ (f, this),
  attributes_ (f, this),
  skills_ (f, this),
  feats_ (f, this),
  abilities_ (f, this),
  XP_ (f, this),
  HP_ (f, this),
  maxHP_ (f, this),
  gold_ (f, this),
  condition_ (f, this)
{
  this->parse (s, f);
}

void RPG_Character_BaseXML_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< gender_type > r (new gender_type (s, f, this));
    this->gender_.set (r);
  }

  {
    ::std::auto_ptr< alignment_type > r (new alignment_type (s, f, this));
    this->alignment_.set (r);
  }

  {
    ::std::auto_ptr< attributes_type > r (new attributes_type (s, f, this));
    this->attributes_.set (r);
  }

  {
    ::std::auto_ptr< skills_type > r (new skills_type (s, f, this));
    this->skills_.set (r);
  }

  {
    ::std::auto_ptr< feats_type > r (new feats_type (s, f, this));
    this->feats_.set (r);
  }

  {
    ::std::auto_ptr< abilities_type > r (new abilities_type (s, f, this));
    this->abilities_.set (r);
  }

  {
    XP_type r;
    s >> r;
    this->XP_.set (r);
  }

  {
    HP_type r;
    s >> r;
    this->HP_.set (r);
  }

  {
    maxHP_type r;
    s >> r;
    this->maxHP_.set (r);
  }

  {
    gold_type r;
    s >> r;
    this->gold_.set (r);
  }

  {
    ::std::size_t n;
    ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
    s >> as;
    if (n > 0)
    {
      condition_sequence& c (this->condition_);
      c.reserve (n);
      while (n--)
      {
        ::std::auto_ptr< condition_type > r (new condition_type (s, f, this));
        c.push_back (r);
      }
    }
  }
}

RPG_Character_PlayerXML_XMLTree_Type::
RPG_Character_PlayerXML_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::RPG_Character_BaseXML_XMLTree_Type (s, f, c),
  name_ (f, this),
  race_ (f, this),
  classXML_ (f, this),
  offhand_ (f, this)
{
  this->parse (s, f);
}

void RPG_Character_PlayerXML_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< name_type > r (new name_type (s, f, this));
    this->name_.set (r);
  }

  {
    ::std::size_t n;
    ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
    s >> as;
    if (n > 0)
    {
      race_sequence& c (this->race_);
      c.reserve (n);
      while (n--)
      {
        ::std::auto_ptr< race_type > r (new race_type (s, f, this));
        c.push_back (r);
      }
    }
  }

  {
    ::std::auto_ptr< classXML_type > r (new classXML_type (s, f, this));
    this->classXML_.set (r);
  }

  {
    ::std::auto_ptr< offhand_type > r (new offhand_type (s, f, this));
    this->offhand_.set (r);
  }
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Character_BaseXML_XMLTree_Type& x)
{
  s << x.gender ();
  s << x.alignment ();
  s << x.attributes ();
  s << x.skills ();
  s << x.feats ();
  s << x.abilities ();
  s << x.XP ();
  s << x.HP ();
  s << x.maxHP ();
  s << x.gold ();
  {
    const RPG_Character_BaseXML_XMLTree_Type::condition_sequence& c (x.condition ());
    s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
    for (RPG_Character_BaseXML_XMLTree_Type::condition_const_iterator
         i (c.begin ()), e (c.end ());
         i != e; ++i)
    {
      s << *i;
    }
  }

  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Character_PlayerXML_XMLTree_Type& x)
{
  s << static_cast< const ::RPG_Character_BaseXML_XMLTree_Type& > (x);
  s << x.name ();
  {
    const RPG_Character_PlayerXML_XMLTree_Type::race_sequence& c (x.race ());
    s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
    for (RPG_Character_PlayerXML_XMLTree_Type::race_const_iterator
         i (c.begin ()), e (c.end ());
         i != e; ++i)
    {
      s << *i;
    }
  }

  s << x.classXML ();
  s << x.offhand ();
  return s;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

