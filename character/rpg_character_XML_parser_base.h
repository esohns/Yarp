// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef CXX___RPG_CHARACTER_XML_PARSER_BASE_H
#define CXX___RPG_CHARACTER_XML_PARSER_BASE_H

#include "rpg_character_XML_types.h"

#include "rpg_chance_dice_XML_parser_base.h"

#include "rpg_item_XML_parser_base.h"

class RPG_Character_Gender_Type_pimpl: public virtual RPG_Character_Gender_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_Gender_Type ();
};

class RPG_Character_Race_Type_pimpl: public virtual RPG_Character_Race_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_Race_Type ();
};

class RPG_Character_MetaClass_Type_pimpl: public virtual RPG_Character_MetaClass_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_MetaClass_Type ();
};

class RPG_Character_SubClass_Type_pimpl: public virtual RPG_Character_SubClass_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_SubClass_Type ();
};

class RPG_Character_Class_Type_pimpl: public virtual RPG_Character_Class_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  metaClass ();

  virtual void
  subClass ();

  virtual void
  post_RPG_Character_Class_Type ();
};

class RPG_Character_Attribute_Type_pimpl: public virtual RPG_Character_Attribute_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_Attribute_Type ();
};

class RPG_Character_Condition_Type_pimpl: public virtual RPG_Character_Condition_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_Condition_Type ();
};

class RPG_Character_Ability_Type_pimpl: public virtual RPG_Character_Ability_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_RPG_Character_Ability_Type ();
};

class RPG_Character_MonsterMetaType_Type_pimpl: public virtual RPG_Character_MonsterMetaType_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_MonsterMetaType
  post_RPG_Character_MonsterMetaType_Type ();
};

class RPG_Character_MonsterSubType_Type_pimpl: public virtual RPG_Character_MonsterSubType_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_MonsterSubType
  post_RPG_Character_MonsterSubType_Type ();
};

class RPG_Character_MonsterType_Type_pimpl: public virtual RPG_Character_MonsterType_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  metaType (const RPG_Character_MonsterMetaType&);

  virtual void
  subType (const RPG_Character_MonsterSubType&);

  virtual RPG_Character_MonsterType
  post_RPG_Character_MonsterType_Type ();
};

class RPG_Character_MonsterArmorClass_Type_pimpl: public virtual RPG_Character_MonsterArmorClass_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  normal (unsigned char);

  virtual void
  touch (unsigned char);

  virtual void
  flatFooted (unsigned char);

  virtual RPG_Character_MonsterArmorClass
  post_RPG_Character_MonsterArmorClass_Type ();
};

class RPG_Character_MonsterWeapon_Type_pimpl: public virtual RPG_Character_MonsterWeapon_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_MonsterWeapon
  post_RPG_Character_MonsterWeapon_Type ();
};

class RPG_Character_AttackForm_Type_pimpl: public virtual RPG_Character_AttackForm_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_AttackForm
  post_RPG_Character_AttackForm_Type ();
};

class RPG_Character_MonsterAttackAction_Type_pimpl: public virtual RPG_Character_MonsterAttackAction_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  monsterWeapon (const RPG_Character_MonsterWeapon&);

  virtual void
  attackBonus (signed char);

  virtual void
  attackForm (const RPG_Character_AttackForm&);

  virtual void
  damage (const RPG_Chance_DiceRoll&);

  virtual void
  numAttacksPerRound (unsigned char);

  virtual RPG_Character_MonsterAttackAction
  post_RPG_Character_MonsterAttackAction_Type ();
};

class RPG_Character_MonsterAttack_Type_pimpl: public virtual RPG_Character_MonsterAttack_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  baseAttackBonus (signed char);

  virtual void
  grappleBonus (signed char);

  virtual void
  attackAction (const RPG_Character_MonsterAttackAction&);

  virtual RPG_Character_MonsterAttack
  post_RPG_Character_MonsterAttack_Type ();
};

class RPG_Character_Size_Type_pimpl: public virtual RPG_Character_Size_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_Size
  post_RPG_Character_Size_Type ();
};

class RPG_Character_SavingThrowModifiers_Type_pimpl: public virtual RPG_Character_SavingThrowModifiers_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  fortitude (signed char);

  virtual void
  reflex (signed char);

  virtual void
  will (signed char);

  virtual RPG_Character_SavingThrowModifiers
  post_RPG_Character_SavingThrowModifiers_Type ();
};

class RPG_Character_Attributes_Type_pimpl: public virtual RPG_Character_Attributes_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  strength (unsigned char);

  virtual void
  dexterity (unsigned char);

  virtual void
  constitution (unsigned char);

  virtual void
  intelligence (unsigned char);

  virtual void
  wisdom (unsigned char);

  virtual void
  charisma (unsigned char);

  virtual RPG_Character_Attributes
  post_RPG_Character_Attributes_Type ();
};

class RPG_Character_Skill_Type_pimpl: public virtual RPG_Character_Skill_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_Skill
  post_RPG_Character_Skill_Type ();
};

class RPG_Character_SkillValue_Type_pimpl: public virtual RPG_Character_SkillValue_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  skill (const RPG_Character_Skill&);

  virtual void
  rank (signed char);

  virtual RPG_Character_SkillValue
  post_RPG_Character_SkillValue_Type ();
};

class RPG_Character_Skills_Type_pimpl: public virtual RPG_Character_Skills_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  skill (const RPG_Character_SkillValue&);

  virtual RPG_Character_Skills
  post_RPG_Character_Skills_Type ();
};

class RPG_Character_Feat_Type_pimpl: public virtual RPG_Character_Feat_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_Feat
  post_RPG_Character_Feat_Type ();
};

class RPG_Character_Feats_Type_pimpl: public virtual RPG_Character_Feats_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  feat (const RPG_Character_Feat&);

  virtual RPG_Character_Feats
  post_RPG_Character_Feats_Type ();
};

class RPG_Character_Environment_Type_pimpl: public virtual RPG_Character_Environment_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_Environment
  post_RPG_Character_Environment_Type ();
};

class RPG_Character_Organization_Type_pimpl: public virtual RPG_Character_Organization_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_Organization
  post_RPG_Character_Organization_Type ();
};

class RPG_Character_AlignmentCivic_Type_pimpl: public virtual RPG_Character_AlignmentCivic_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_AlignmentCivic
  post_RPG_Character_AlignmentCivic_Type ();
};

class RPG_Character_AlignmentEthic_Type_pimpl: public virtual RPG_Character_AlignmentEthic_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Character_AlignmentEthic
  post_RPG_Character_AlignmentEthic_Type ();
};

class RPG_Character_Alignment_Type_pimpl: public virtual RPG_Character_Alignment_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  civic (const RPG_Character_AlignmentCivic&);

  virtual void
  ethic (const RPG_Character_AlignmentEthic&);

  virtual RPG_Character_Alignment
  post_RPG_Character_Alignment_Type ();
};

class RPG_Character_MonsterAdvancementStep_Type_pimpl: public virtual RPG_Character_MonsterAdvancementStep_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  size (const RPG_Character_Size&);

  virtual void
  range (const RPG_Chance_ValueRange&);

  virtual RPG_Character_MonsterAdvancementStep
  post_RPG_Character_MonsterAdvancementStep_Type ();
};

class RPG_Character_MonsterAdvancement_Type_pimpl: public virtual RPG_Character_MonsterAdvancement_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  step (const RPG_Character_MonsterAdvancementStep&);

  virtual RPG_Character_MonsterAdvancement
  post_RPG_Character_MonsterAdvancement_Type ();
};

class RPG_Character_MonsterPropertiesXML_Type_pimpl: public virtual RPG_Character_MonsterPropertiesXML_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  size (const RPG_Character_Size&);

  virtual void
  type (const RPG_Character_MonsterType&);

  virtual void
  hitDice (const RPG_Chance_DiceRoll&);

  virtual void
  initiative (signed char);

  virtual void
  speed (unsigned char);

  virtual void
  armorClass (const RPG_Character_MonsterArmorClass&);

  virtual void
  attack (const RPG_Character_MonsterAttack&);

  virtual void
  space (unsigned char);

  virtual void
  reach (unsigned char);

  virtual void
  saves (const RPG_Character_SavingThrowModifiers&);

  virtual void
  attributes (const RPG_Character_Attributes&);

  virtual void
  skills (const RPG_Character_Skills&);

  virtual void
  feats (const RPG_Character_Feats&);

  virtual void
  environment (const RPG_Character_Environment&);

  virtual void
  organization (const RPG_Character_Organization&);

  virtual void
  challengeRating (unsigned char);

  virtual void
  treasureModifier (unsigned char);

  virtual void
  alignment (const RPG_Character_Alignment&);

  virtual void
  advancement (const RPG_Character_MonsterAdvancement&);

  virtual void
  levelAdjustment (unsigned char);

  virtual RPG_Character_MonsterPropertiesXML
  post_RPG_Character_MonsterPropertiesXML_Type ();
};

class RPG_Character_MonsterDictionary_Type_pimpl: public virtual RPG_Character_MonsterDictionary_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  monster (const RPG_Character_MonsterPropertiesXML&);

  virtual void
  post_RPG_Character_MonsterDictionary_Type ();
};

class RPG_Character_Dictionary_Type_pimpl: public virtual RPG_Character_Dictionary_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  monsterDictionary ();

  virtual void
  post_RPG_Character_Dictionary_Type ();
};

#endif // CXX___RPG_CHARACTER_XML_PARSER_BASE_H
