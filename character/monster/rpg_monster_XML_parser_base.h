// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef CXX___MONSTER_RPG_MONSTER_XML_PARSER_BASE_H
#define CXX___MONSTER_RPG_MONSTER_XML_PARSER_BASE_H

#include "rpg_monster_XML_types.h"

#include "rpg_dice_XML_parser_base.h"

#include "rpg_item_XML_parser_base.h"

#include "rpg_character_XML_parser_base.h"

#include "rpg_combat_XML_parser_base.h"

class RPG_Monster_MetaType_Type_pimpl: public virtual RPG_Monster_MetaType_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Monster_MetaType
  post_RPG_Monster_MetaType_Type ();
};

class RPG_Monster_SubType_Type_pimpl: public virtual RPG_Monster_SubType_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Monster_SubType
  post_RPG_Monster_SubType_Type ();
};

class RPG_Monster_Type_Type_pimpl: public virtual RPG_Monster_Type_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  metaType (const RPG_Monster_MetaType&);

  virtual void
  subType (const RPG_Monster_SubType&);

  virtual RPG_Monster_Type
  post_RPG_Monster_Type_Type ();
};

class RPG_Monster_NaturalArmorClass_Type_pimpl: public virtual RPG_Monster_NaturalArmorClass_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  normal (signed char);

  virtual void
  touch (signed char);

  virtual void
  flatFooted (signed char);

  virtual RPG_Monster_NaturalArmorClass
  post_RPG_Monster_NaturalArmorClass_Type ();
};

class RPG_Monster_NaturalWeapon_Type_pimpl: public virtual RPG_Monster_NaturalWeapon_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Monster_NaturalWeapon
  post_RPG_Monster_NaturalWeapon_Type ();
};

class RPG_Monster_WeaponTypeUnion_Type_pimpl: public virtual RPG_Monster_WeaponTypeUnion_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  _characters (const ::xml_schema::ro_string&);

  virtual void
  post_RPG_Monster_WeaponTypeUnion_Type ();
};

class RPG_Monster_AttackAction_Type_pimpl: public virtual RPG_Monster_AttackAction_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  weapon ();

  virtual void
  attackBonus (signed char);

  virtual void
  attackForm (const RPG_Combat_AttackForm&);

  virtual void
  damage ();

  virtual void
  numAttacksPerRound (unsigned char);

  virtual RPG_Monster_AttackAction
  post_RPG_Monster_AttackAction_Type ();
};

class RPG_Monster_Attack_Type_pimpl: public virtual RPG_Monster_Attack_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  baseAttackBonus (signed char);

  virtual void
  grappleBonus (signed char);

  virtual void
  standardAttackAction (const RPG_Monster_AttackAction&);

  virtual void
  fullAttackAction (const RPG_Monster_AttackAction&);

  virtual RPG_Monster_Attack
  post_RPG_Monster_Attack_Type ();
};

class RPG_Monster_SavingThrowModifiers_Type_pimpl: public virtual RPG_Monster_SavingThrowModifiers_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  fortitude (signed char);

  virtual void
  reflex (signed char);

  virtual void
  will (signed char);

  virtual RPG_Monster_SavingThrowModifiers
  post_RPG_Monster_SavingThrowModifiers_Type ();
};

class RPG_Monster_Organization_Type_pimpl: public virtual RPG_Monster_Organization_Type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual RPG_Monster_Organization
  post_RPG_Monster_Organization_Type ();
};

class RPG_Monster_OrganizationSlaverStep_Type_pimpl: public virtual RPG_Monster_OrganizationSlaverStep_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  range (const RPG_Dice_ValueRange&);

  virtual RPG_Monster_OrganizationSlaverStep
  post_RPG_Monster_OrganizationSlaverStep_Type ();
};

class RPG_Monster_OrganizationStep_Type_pimpl: public virtual RPG_Monster_OrganizationStep_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  type (const RPG_Monster_Organization&);

  virtual void
  range (const RPG_Dice_ValueRange&);

  virtual void
  slaves (const RPG_Monster_OrganizationSlaverStep&);

  virtual RPG_Monster_OrganizationStep
  post_RPG_Monster_OrganizationStep_Type ();
};

class RPG_Monster_Organizations_Type_pimpl: public virtual RPG_Monster_Organizations_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  step (const RPG_Monster_OrganizationStep&);

  virtual RPG_Monster_Organizations
  post_RPG_Monster_Organizations_Type ();
};

class RPG_Monster_AdvancementStep_Type_pimpl: public virtual RPG_Monster_AdvancementStep_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  size (const RPG_Character_Size&);

  virtual void
  range (const RPG_Dice_ValueRange&);

  virtual RPG_Monster_AdvancementStep
  post_RPG_Monster_AdvancementStep_Type ();
};

class RPG_Monster_Advancement_Type_pimpl: public virtual RPG_Monster_Advancement_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  step (const RPG_Monster_AdvancementStep&);

  virtual RPG_Monster_Advancement
  post_RPG_Monster_Advancement_Type ();
};

class RPG_Monster_PropertiesXML_Type_pimpl: public virtual RPG_Monster_PropertiesXML_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  size (const RPG_Character_Size&);

  virtual void
  type (const RPG_Monster_Type&);

  virtual void
  hitDice (const RPG_Dice_Roll&);

  virtual void
  initiative (signed char);

  virtual void
  speed (unsigned char);

  virtual void
  armorClass (const RPG_Monster_NaturalArmorClass&);

  virtual void
  attack (const RPG_Monster_Attack&);

  virtual void
  space (unsigned char);

  virtual void
  reach (unsigned char);

  virtual void
  saves (const RPG_Monster_SavingThrowModifiers&);

  virtual void
  attributes (const RPG_Character_Attributes&);

  virtual void
  skills (const RPG_Character_Skills&);

  virtual void
  feats (const RPG_Character_Feats&);

  virtual void
  environment (const RPG_Character_Environment&);

  virtual void
  organizations (const RPG_Monster_Organizations&);

  virtual void
  challengeRating (unsigned char);

  virtual void
  treasureModifier (unsigned char);

  virtual void
  alignment (const RPG_Character_Alignment&);

  virtual void
  advancements (const RPG_Monster_Advancement&);

  virtual void
  levelAdjustment (unsigned char);

  virtual RPG_Monster_PropertiesXML
  post_RPG_Monster_PropertiesXML_Type ();
};

class RPG_Monster_Dictionary_Type_pimpl: public virtual RPG_Monster_Dictionary_Type_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  monster (const RPG_Monster_PropertiesXML&);

  virtual void
  post_RPG_Monster_Dictionary_Type ();
};

#endif // CXX___MONSTER_RPG_MONSTER_XML_PARSER_BASE_H
