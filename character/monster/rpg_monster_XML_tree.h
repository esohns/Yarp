// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___RPG_MONSTER_XML_TREE_H
#define CXX___RPG_MONSTER_XML_TREE_H

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4009910L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Monster_Size_XMLTree_Type;
class RPG_Monster_NaturalArmorClass_XMLTree_Type;
class RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type;
class RPG_Monster_SpecialBaseProperties_XMLTree_Type;
class RPG_Monster_NaturalWeapon_XMLTree_Type;
class RPG_Monster_WeaponTypeUnion_XMLTree_Type;
class RPG_Monster_SpecialDefensePreCondition_XMLTree_Type;
class RPG_Monster_DefenseAction_XMLTree_Type;
class RPG_Monster_SpecialDefenseProperties_XMLTree_Type;
class RPG_Monster_AttackAction_XMLTree_Type;
class RPG_Monster_Attack_XMLTree_Type;
class RPG_Monster_ActionTrigger_XMLTree_Type;
class RPG_Monster_SpecialAttackPreCondition_XMLTree_Type;
class RPG_Monster_SpecialAttackProperties_XMLTree_Type;
class RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type;
class RPG_Monster_SummonMonster_XMLTree_Type;
class RPG_Monster_SpecialAbilityProperties_XMLTree_Type;
class RPG_Monster_SavingThrowModifiers_XMLTree_Type;
class RPG_Monster_Organization_XMLTree_Type;
class RPG_Monster_OrganizationSlaverStep_XMLTree_Type;
class RPG_Monster_OrganizationStep_XMLTree_Type;
class RPG_Monster_Organizations_XMLTree_Type;
class RPG_Monster_AdvancementStep_XMLTree_Type;
class RPG_Monster_Advancement_XMLTree_Type;
class RPG_Monster_PropertiesXML_XMLTree_Type;
class RPG_Monster_StateBase_XMLTree_Type;
class RPG_Monster_State_XMLTree_Type;
class RPG_Monster_Spawn_XMLTree_Type;
class RPG_Monster_Dictionary_XMLTree_Type;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

#include "../../chance/dice/rpg_dice_XML_tree.h"

#include "../../common/rpg_common_XML_tree.h"

#include "../../common/rpg_common_environment_XML_tree.h"

#include "../../magic/rpg_magic_XML_tree.h"

#include "../../item/rpg_item_XML_tree.h"

#include "../../combat/rpg_combat_XML_tree.h"

#include "../player/rpg_player_XML_tree.h"

class RPG_Monster_Size_XMLTree_Type: public ::xml_schema::type
{
  public:
  // size
  //
  typedef ::RPG_Common_Size_XMLTree_Type size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  // isTall
  //
  typedef ::xml_schema::boolean isTall_type;
  typedef ::xsd::cxx::tree::traits< isTall_type, char > isTall_traits;

  const isTall_type&
  isTall () const;

  isTall_type&
  isTall ();

  void
  isTall (const isTall_type& x);

  static isTall_type
  isTall_default_value ();

  // Constructors.
  //
  RPG_Monster_Size_XMLTree_Type (const size_type&);

  RPG_Monster_Size_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Monster_Size_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Monster_Size_XMLTree_Type (const RPG_Monster_Size_XMLTree_Type& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual RPG_Monster_Size_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Size_XMLTree_Type&
  operator= (const RPG_Monster_Size_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_Size_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< isTall_type > isTall_;
};

bool
operator== (const RPG_Monster_Size_XMLTree_Type&, const RPG_Monster_Size_XMLTree_Type&);

bool
operator!= (const RPG_Monster_Size_XMLTree_Type&, const RPG_Monster_Size_XMLTree_Type&);


class RPG_Monster_NaturalArmorClass_XMLTree_Type: public ::xml_schema::type
{
  public:
  // normal
  //
  typedef ::xml_schema::byte normal_type;
  typedef ::xsd::cxx::tree::traits< normal_type, char > normal_traits;

  const normal_type&
  normal () const;

  normal_type&
  normal ();

  void
  normal (const normal_type& x);

  // touch
  //
  typedef ::xml_schema::byte touch_type;
  typedef ::xsd::cxx::tree::traits< touch_type, char > touch_traits;

  const touch_type&
  touch () const;

  touch_type&
  touch ();

  void
  touch (const touch_type& x);

  // flatFooted
  //
  typedef ::xml_schema::byte flatFooted_type;
  typedef ::xsd::cxx::tree::traits< flatFooted_type, char > flatFooted_traits;

  const flatFooted_type&
  flatFooted () const;

  flatFooted_type&
  flatFooted ();

  void
  flatFooted (const flatFooted_type& x);

  // Constructors.
  //
  RPG_Monster_NaturalArmorClass_XMLTree_Type (const normal_type&,
                                              const touch_type&,
                                              const flatFooted_type&);

  RPG_Monster_NaturalArmorClass_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Monster_NaturalArmorClass_XMLTree_Type (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Monster_NaturalArmorClass_XMLTree_Type (const RPG_Monster_NaturalArmorClass_XMLTree_Type& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  virtual RPG_Monster_NaturalArmorClass_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_NaturalArmorClass_XMLTree_Type&
  operator= (const RPG_Monster_NaturalArmorClass_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_NaturalArmorClass_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< normal_type > normal_;
  ::xsd::cxx::tree::one< touch_type > touch_;
  ::xsd::cxx::tree::one< flatFooted_type > flatFooted_;
};

bool
operator== (const RPG_Monster_NaturalArmorClass_XMLTree_Type&, const RPG_Monster_NaturalArmorClass_XMLTree_Type&);

bool
operator!= (const RPG_Monster_NaturalArmorClass_XMLTree_Type&, const RPG_Monster_NaturalArmorClass_XMLTree_Type&);


class RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ABILITY_ACID_ATTACK,
    ABILITY_CORROSIVE_SLIME,
    ABILITY_DEATH_THROES,
    ABILITY_ENTANGLE,
    ABILITY_FLAMING_BODY,
    ABILITY_LEAP_ATTACK,
    ABILITY_REND_ARMOR,
    ABILITY_SCORE_LOSS,
    ABILITY_SNEAK_ATTACK,
    ABILITY_SPORES,
    ABILITY_STENCH,
    ABILITY_THROW_WEB,
    ABILITY_ALTERNATE_FORM,
    ABILITY_ANTIMAGIC,
    ABILITY_BLINDSIGHT,
    ABILITY_BLINDSENSE,
    ABILITY_BREATH_WEAPON,
    ABILITY_CHANGE_SHAPE,
    ABILITY_CHARM,
    ABILITY_COMPULSION,
    ABILITY_IMMUNITY_COLD,
    ABILITY_CONSTRICT,
    ABILITY_RESISTANCE_TO_DAMAGE,
    ABILITY_DARKVISION,
    ABILITY_DEATH_ATTACK,
    ABILITY_DISEASE,
    ABILITY_ENERGY_DRAIN,
    ABILITY_ETHEREALNESS,
    ABILITY_EVASION,
    ABILITY_IMPROVED_EVASION,
    ABILITY_FAST_HEALING,
    ABILITY_FEAR,
    ABILITY_IMMUNITY_FIRE,
    ABILITY_GASEOUS_FORM,
    ABILITY_GAZE_ATTACK,
    ABILITY_IMPROVED_GRAB,
    ABILITY_INCORPOREALITY,
    ABILITY_INVISIBILITY,
    ABILITY_LEVEL_LOSS,
    ABILITY_LOWLIGHT_VISION,
    ABILITY_MANUFACTURED_WEAPONS,
    ABILITY_MOVEMENT_MODES,
    ABILITY_NATURAL_WEAPONS,
    ABILITY_NONABILITIES,
    ABILITY_PARALYZE_ATTACK,
    ABILITY_POISON_ATTACK,
    ABILITY_IMMUNITY_POISON,
    ABILITY_POLYMORPH,
    ABILITY_POUNCE,
    ABILITY_POWERFUL_CHARGE,
    ABILITY_PSIONICS,
    ABILITY_RAKE,
    ABILITY_RAY_ATTACK,
    ABILITY_REGENERATION,
    ABILITY_RESISTANCE_TO_ENERGY,
    ABILITY_SCENT,
    ABILITY_SONIC_ATTACK,
    ABILITY_IMMUNITY_SPELL,
    ABILITY_RESISTANCE_TO_SPELL,
    ABILITY_SPELLS,
    ABILITY_SUMMON,
    ABILITY_SWALLOW_WHOLE,
    ABILITY_TELEPATHY,
    ABILITY_TRAMPLE,
    ABILITY_TREMOR_SENSE,
    ABILITY_RESISTANCE_TO_TURNING,
    ABILITY_VULNERABILITY_TO_ENERGY,
    ABILITY_IMMUNITY_DISEASE,
    ABILITY_ANIMAL_COMPANION,
    ABILITY_WOODLAND_STRIDE,
    ABILITY_SENSE_TRAPS,
    ABILITY_UNCANNY_DODGE,
    ABILITY_IMPROVED_UNCANNY_DODGE,
    ABILITY_CRIPPLING_STRIKE,
    ABILITY_DEFENSIVE_ROLL,
    ABILITY_OPPORTUNIST,
    ABILITY_SKILL_MASTERY,
    ABILITY_SLIPPERY_MIND,
    ABILITY_BONUS_FEAT,
    ABILITYTYPE_SMITE,
    ABILITYTYPE_SMOKE_CLAWS,
    ABILITYTYPE_WHIRLWIND_BLAST
  };

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (value v);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const char* v);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const ::std::string& s,
                                                     const ::xercesc::DOMElement* e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type (const RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type_literals_[82];
  static const value _xsd_RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type_indexes_[82];
};

class RPG_Monster_SpecialBaseProperties_XMLTree_Type: public ::xml_schema::type
{
  public:
  // abilityClass
  //
  typedef ::RPG_Magic_AbilityClass_XMLTree_Type abilityClass_type;
  typedef ::xsd::cxx::tree::traits< abilityClass_type, char > abilityClass_traits;

  const abilityClass_type&
  abilityClass () const;

  abilityClass_type&
  abilityClass ();

  void
  abilityClass (const abilityClass_type& x);

  void
  abilityClass (::std::auto_ptr< abilityClass_type > p);

  // type
  //
  typedef ::RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // actionType
  //
  typedef ::RPG_Common_ActionType_XMLTree_Type actionType_type;
  typedef ::xsd::cxx::tree::traits< actionType_type, char > actionType_traits;

  const actionType_type&
  actionType () const;

  actionType_type&
  actionType ();

  void
  actionType (const actionType_type& x);

  void
  actionType (::std::auto_ptr< actionType_type > p);

  // usage
  //
  typedef ::RPG_Common_Usage_XMLTree_Type usage_type;
  typedef ::xsd::cxx::tree::optional< usage_type > usage_optional;
  typedef ::xsd::cxx::tree::traits< usage_type, char > usage_traits;

  const usage_optional&
  usage () const;

  usage_optional&
  usage ();

  void
  usage (const usage_type& x);

  void
  usage (const usage_optional& x);

  void
  usage (::std::auto_ptr< usage_type > p);

  // Constructors.
  //
  RPG_Monster_SpecialBaseProperties_XMLTree_Type (const abilityClass_type&,
                                                  const type_type&,
                                                  const actionType_type&);

  RPG_Monster_SpecialBaseProperties_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Monster_SpecialBaseProperties_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Monster_SpecialBaseProperties_XMLTree_Type (const RPG_Monster_SpecialBaseProperties_XMLTree_Type& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialBaseProperties_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialBaseProperties_XMLTree_Type&
  operator= (const RPG_Monster_SpecialBaseProperties_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialBaseProperties_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< abilityClass_type > abilityClass_;
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< actionType_type > actionType_;
  usage_optional usage_;
};

bool
operator== (const RPG_Monster_SpecialBaseProperties_XMLTree_Type&, const RPG_Monster_SpecialBaseProperties_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialBaseProperties_XMLTree_Type&, const RPG_Monster_SpecialBaseProperties_XMLTree_Type&);


class RPG_Monster_NaturalWeapon_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    NATURALWEAPON_ANY,
    NATURALWEAPON_BITE,
    NATURALWEAPON_BLAST,
    NATURALWEAPON_CLAW_TALON,
    NATURALWEAPON_CONSTRICT,
    NATURALWEAPON_GORE,
    NATURALWEAPON_HOOF,
    NATURALWEAPON_PINCER,
    NATURALWEAPON_ROCK_STONE,
    NATURALWEAPON_SLAP_SLAM,
    NATURALWEAPON_SPIT,
    NATURALWEAPON_STING,
    NATURALWEAPON_TAIL,
    NATURALWEAPON_TENTACLE,
    NATURALWEAPON_WEB
  };

  RPG_Monster_NaturalWeapon_XMLTree_Type (value v);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const char* v);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const ::std::string& v);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Monster_NaturalWeapon_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_NaturalWeapon_XMLTree_Type (const RPG_Monster_NaturalWeapon_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Monster_NaturalWeapon_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_NaturalWeapon_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Monster_NaturalWeapon_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Monster_NaturalWeapon_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Monster_NaturalWeapon_XMLTree_Type_literals_[15];
  static const value _xsd_RPG_Monster_NaturalWeapon_XMLTree_Type_indexes_[15];
};

class RPG_Monster_WeaponTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    NATURALWEAPON_ANY,
    NATURALWEAPON_BITE,
    NATURALWEAPON_BLAST,
    NATURALWEAPON_CLAW_TALON,
    NATURALWEAPON_CONSTRICT,
    NATURALWEAPON_GORE,
    NATURALWEAPON_HOOF,
    NATURALWEAPON_PINCER,
    NATURALWEAPON_ROCK_STONE,
    NATURALWEAPON_SLAP_SLAM,
    NATURALWEAPON_SPIT,
    NATURALWEAPON_STING,
    NATURALWEAPON_TAIL,
    NATURALWEAPON_TENTACLE,
    NATURALWEAPON_WEB,
    ABILITY_ACID_ATTACK,
    ABILITY_CORROSIVE_SLIME,
    ABILITY_DEATH_THROES,
    ABILITY_ENTANGLE,
    ABILITY_FLAMING_BODY,
    ABILITY_LEAP_ATTACK,
    ABILITY_REND_ARMOR,
    ABILITY_SCORE_LOSS,
    ABILITY_SNEAK_ATTACK,
    ABILITY_SPORES,
    ABILITY_STENCH,
    ABILITY_THROW_WEB,
    ABILITY_ALTERNATE_FORM,
    ABILITY_ANTIMAGIC,
    ABILITY_BLINDSIGHT,
    ABILITY_BLINDSENSE,
    ABILITY_BREATH_WEAPON,
    ABILITY_CHANGE_SHAPE,
    ABILITY_CHARM,
    ABILITY_COMPULSION,
    ABILITY_IMMUNITY_COLD,
    ABILITY_CONSTRICT,
    ABILITY_RESISTANCE_TO_DAMAGE,
    ABILITY_DARKVISION,
    ABILITY_DEATH_ATTACK,
    ABILITY_DISEASE,
    ABILITY_ENERGY_DRAIN,
    ABILITY_ETHEREALNESS,
    ABILITY_EVASION,
    ABILITY_IMPROVED_EVASION,
    ABILITY_FAST_HEALING,
    ABILITY_FEAR,
    ABILITY_IMMUNITY_FIRE,
    ABILITY_GASEOUS_FORM,
    ABILITY_GAZE_ATTACK,
    ABILITY_IMPROVED_GRAB,
    ABILITY_INCORPOREALITY,
    ABILITY_INVISIBILITY,
    ABILITY_LEVEL_LOSS,
    ABILITY_LOWLIGHT_VISION,
    ABILITY_MANUFACTURED_WEAPONS,
    ABILITY_MOVEMENT_MODES,
    ABILITY_NATURAL_WEAPONS,
    ABILITY_NONABILITIES,
    ABILITY_PARALYZE_ATTACK,
    ABILITY_POISON_ATTACK,
    ABILITY_IMMUNITY_POISON,
    ABILITY_POLYMORPH,
    ABILITY_POUNCE,
    ABILITY_POWERFUL_CHARGE,
    ABILITY_PSIONICS,
    ABILITY_RAKE,
    ABILITY_RAY_ATTACK,
    ABILITY_REGENERATION,
    ABILITY_RESISTANCE_TO_ENERGY,
    ABILITY_SCENT,
    ABILITY_SONIC_ATTACK,
    ABILITY_IMMUNITY_SPELL,
    ABILITY_RESISTANCE_TO_SPELL,
    ABILITY_SPELLS,
    ABILITY_SUMMON,
    ABILITY_SWALLOW_WHOLE,
    ABILITY_TELEPATHY,
    ABILITY_TRAMPLE,
    ABILITY_TREMOR_SENSE,
    ABILITY_RESISTANCE_TO_TURNING,
    ABILITY_VULNERABILITY_TO_ENERGY,
    ABILITY_IMMUNITY_DISEASE,
    ABILITY_ANIMAL_COMPANION,
    ABILITY_WOODLAND_STRIDE,
    ABILITY_SENSE_TRAPS,
    ABILITY_UNCANNY_DODGE,
    ABILITY_IMPROVED_UNCANNY_DODGE,
    ABILITY_CRIPPLING_STRIKE,
    ABILITY_DEFENSIVE_ROLL,
    ABILITY_OPPORTUNIST,
    ABILITY_SKILL_MASTERY,
    ABILITY_SLIPPERY_MIND,
    ABILITY_BONUS_FEAT,
    UNARMED_WEAPON_GAUNTLET,
    UNARMED_WEAPON_STRIKE,
    LIGHT_MELEE_WEAPON_DAGGER,
    LIGHT_MELEE_WEAPON_DAGGER_PUNCHING,
    LIGHT_MELEE_WEAPON_GAUNTLET_SPIKED,
    LIGHT_MELEE_WEAPON_MACE_LIGHT,
    LIGHT_MELEE_WEAPON_SICKLE,
    ONE_HANDED_MELEE_WEAPON_CLUB,
    ONE_HANDED_MELEE_WEAPON_MACE_HEAVY,
    ONE_HANDED_MELEE_WEAPON_MORNINGSTAR,
    ONE_HANDED_MELEE_WEAPON_SHORTSPEAR,
    TWO_HANDED_MELEE_WEAPON_LONGSPEAR,
    TWO_HANDED_MELEE_WEAPON_QUARTERSTAFF,
    TWO_HANDED_MELEE_WEAPON_SPEAR,
    RANGED_WEAPON_CROSSBOW_LIGHT,
    RANGED_WEAPON_CROSSBOW_HEAVY,
    RANGED_WEAPON_DART,
    RANGED_WEAPON_JAVELIN,
    RANGED_WEAPON_SLING,
    LIGHT_MELEE_WEAPON_AXE_THROWING,
    LIGHT_MELEE_WEAPON_HAMMER_LIGHT,
    LIGHT_MELEE_WEAPON_AXE_HAND,
    LIGHT_MELEE_WEAPON_KUKRI,
    LIGHT_MELEE_WEAPON_PICK_LIGHT,
    LIGHT_MELEE_WEAPON_SAP,
    LIGHT_MELEE_WEAPON_SHIELD_LIGHT,
    LIGHT_MELEE_WEAPON_ARMOR_SPIKED,
    LIGHT_MELEE_WEAPON_SHIELD_LIGHT_SPIKED,
    LIGHT_MELEE_WEAPON_SWORD_SHORT,
    ONE_HANDED_MELEE_WEAPON_AXE_BATTLE,
    ONE_HANDED_MELEE_WEAPON_FLAIL_LIGHT,
    ONE_HANDED_MELEE_WEAPON_SWORD_LONG,
    ONE_HANDED_MELEE_WEAPON_PICK_HEAVY,
    ONE_HANDED_MELEE_WEAPON_RAPIER,
    ONE_HANDED_MELEE_WEAPON_SCIMITAR,
    ONE_HANDED_MELEE_WEAPON_SHIELD_HEAVY,
    ONE_HANDED_MELEE_WEAPON_SHIELD_HEAVY_SPIKED,
    ONE_HANDED_MELEE_WEAPON_TRIDENT,
    ONE_HANDED_MELEE_WEAPON_HAMMER_WAR,
    TWO_HANDED_MELEE_WEAPON_FALCHION,
    TWO_HANDED_MELEE_WEAPON_GLAIVE,
    TWO_HANDED_MELEE_WEAPON_AXE_GREAT,
    TWO_HANDED_MELEE_WEAPON_CLUB_GREAT,
    TWO_HANDED_MELEE_WEAPON_FLAIL_HEAVY,
    TWO_HANDED_MELEE_WEAPON_SWORD_GREAT,
    TWO_HANDED_MELEE_WEAPON_GUISARME,
    TWO_HANDED_MELEE_WEAPON_HALBERD,
    TWO_HANDED_MELEE_WEAPON_LANCE,
    TWO_HANDED_MELEE_WEAPON_RANSEUR,
    TWO_HANDED_MELEE_WEAPON_SCYTHE,
    RANGED_WEAPON_BOW_SHORT,
    RANGED_WEAPON_BOW_SHORT_COMPOSITE,
    RANGED_WEAPON_BOW_LONG,
    RANGED_WEAPON_BOW_LONG_COMPOSITE,
    LIGHT_MELEE_WEAPON_KAMA,
    LIGHT_MELEE_WEAPON_NUNCHAKU,
    LIGHT_MELEE_WEAPON_SAI,
    LIGHT_MELEE_WEAPON_SIANGHAM,
    ONE_HANDED_MELEE_WEAPON_SWORD_BASTARD,
    ONE_HANDED_MELEE_WEAPON_AXE_WAR_DWARVEN,
    ONE_HANDED_MELEE_WEAPON_WHIP,
    TWO_HANDED_MELEE_WEAPON_AXE_ORC_DOUBLE,
    TWO_HANDED_MELEE_WEAPON_CHAIN_SPIKED,
    TWO_HANDED_MELEE_WEAPON_FLAIL_DIRE,
    TWO_HANDED_MELEE_WEAPON_HAMMER_GNOME_HOOKED,
    TWO_HANDED_MELEE_WEAPON_SWORD_TWO_BLADED,
    TWO_HANDED_MELEE_WEAPON_URGROSH_DWARVEN,
    RANGED_WEAPON_BOLAS,
    RANGED_WEAPON_CROSSBOW_HAND,
    RANGED_WEAPON_CROSSBOW_REPEATING_LIGHT,
    RANGED_WEAPON_CROSSBOW_REPEATING_HEAVY,
    RANGED_WEAPON_NET,
    RANGED_WEAPON_SHURIKEN,
    SPECIALATTACK_INCORPOREAL_TOUCH,
    SPECIALATTACK_SMITE
  };

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (value v);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const char* v);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Monster_WeaponTypeUnion_XMLTree_Type (const RPG_Monster_WeaponTypeUnion_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Monster_WeaponTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_WeaponTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Monster_WeaponTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Monster_WeaponTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Monster_WeaponTypeUnion_XMLTree_Type_literals_[169];
  static const value _xsd_RPG_Monster_WeaponTypeUnion_XMLTree_Type_indexes_[169];
};

class RPG_Monster_SpecialDefensePreCondition_XMLTree_Type: public ::xml_schema::type
{
  public:
  // weaponType
  //
  typedef ::RPG_Monster_WeaponTypeUnion_XMLTree_Type weaponType_type;
  typedef ::xsd::cxx::tree::sequence< weaponType_type > weaponType_sequence;
  typedef weaponType_sequence::iterator weaponType_iterator;
  typedef weaponType_sequence::const_iterator weaponType_const_iterator;
  typedef ::xsd::cxx::tree::traits< weaponType_type, char > weaponType_traits;

  const weaponType_sequence&
  weaponType () const;

  weaponType_sequence&
  weaponType ();

  void
  weaponType (const weaponType_sequence& s);

  // ownCondition
  //
  typedef ::RPG_Common_Condition_XMLTree_Type ownCondition_type;
  typedef ::xsd::cxx::tree::sequence< ownCondition_type > ownCondition_sequence;
  typedef ownCondition_sequence::iterator ownCondition_iterator;
  typedef ownCondition_sequence::const_iterator ownCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< ownCondition_type, char > ownCondition_traits;

  const ownCondition_sequence&
  ownCondition () const;

  ownCondition_sequence&
  ownCondition ();

  void
  ownCondition (const ownCondition_sequence& s);

  // targetCondition
  //
  typedef ::RPG_Common_Condition_XMLTree_Type targetCondition_type;
  typedef ::xsd::cxx::tree::sequence< targetCondition_type > targetCondition_sequence;
  typedef targetCondition_sequence::iterator targetCondition_iterator;
  typedef targetCondition_sequence::const_iterator targetCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< targetCondition_type, char > targetCondition_traits;

  const targetCondition_sequence&
  targetCondition () const;

  targetCondition_sequence&
  targetCondition ();

  void
  targetCondition (const targetCondition_sequence& s);

  // isMagicalWeapon
  //
  typedef ::xml_schema::boolean isMagicalWeapon_type;
  typedef ::xsd::cxx::tree::traits< isMagicalWeapon_type, char > isMagicalWeapon_traits;

  const isMagicalWeapon_type&
  isMagicalWeapon () const;

  isMagicalWeapon_type&
  isMagicalWeapon ();

  void
  isMagicalWeapon (const isMagicalWeapon_type& x);

  static isMagicalWeapon_type
  isMagicalWeapon_default_value ();

  // Constructors.
  //
  RPG_Monster_SpecialDefensePreCondition_XMLTree_Type ();

  RPG_Monster_SpecialDefensePreCondition_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

  RPG_Monster_SpecialDefensePreCondition_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

  RPG_Monster_SpecialDefensePreCondition_XMLTree_Type (const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialDefensePreCondition_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&
  operator= (const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialDefensePreCondition_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  weaponType_sequence weaponType_;
  ownCondition_sequence ownCondition_;
  targetCondition_sequence targetCondition_;
  ::xsd::cxx::tree::one< isMagicalWeapon_type > isMagicalWeapon_;
};

bool
operator== (const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&, const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&, const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&);


class RPG_Monster_DefenseAction_XMLTree_Type: public ::xml_schema::type
{
  public:
  // preCondition
  //
  typedef ::RPG_Monster_SpecialDefensePreCondition_XMLTree_Type preCondition_type;
  typedef ::xsd::cxx::tree::sequence< preCondition_type > preCondition_sequence;
  typedef preCondition_sequence::iterator preCondition_iterator;
  typedef preCondition_sequence::const_iterator preCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< preCondition_type, char > preCondition_traits;

  const preCondition_sequence&
  preCondition () const;

  preCondition_sequence&
  preCondition ();

  void
  preCondition (const preCondition_sequence& s);

  // damage
  //
  typedef ::RPG_Combat_Damage_XMLTree_Type damage_type;
  typedef ::xsd::cxx::tree::optional< damage_type > damage_optional;
  typedef ::xsd::cxx::tree::traits< damage_type, char > damage_traits;

  const damage_optional&
  damage () const;

  damage_optional&
  damage ();

  void
  damage (const damage_type& x);

  void
  damage (const damage_optional& x);

  void
  damage (::std::auto_ptr< damage_type > p);

  // ranged
  //
  typedef ::RPG_Combat_RangedAttackProperties_XMLTree_Type ranged_type;
  typedef ::xsd::cxx::tree::optional< ranged_type > ranged_optional;
  typedef ::xsd::cxx::tree::traits< ranged_type, char > ranged_traits;

  const ranged_optional&
  ranged () const;

  ranged_optional&
  ranged ();

  void
  ranged (const ranged_type& x);

  void
  ranged (const ranged_optional& x);

  void
  ranged (::std::auto_ptr< ranged_type > p);

  // Constructors.
  //
  RPG_Monster_DefenseAction_XMLTree_Type ();

  RPG_Monster_DefenseAction_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_DefenseAction_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_DefenseAction_XMLTree_Type (const RPG_Monster_DefenseAction_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Monster_DefenseAction_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_DefenseAction_XMLTree_Type&
  operator= (const RPG_Monster_DefenseAction_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_DefenseAction_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  preCondition_sequence preCondition_;
  damage_optional damage_;
  ranged_optional ranged_;
};

bool
operator== (const RPG_Monster_DefenseAction_XMLTree_Type&, const RPG_Monster_DefenseAction_XMLTree_Type&);

bool
operator!= (const RPG_Monster_DefenseAction_XMLTree_Type&, const RPG_Monster_DefenseAction_XMLTree_Type&);


class RPG_Monster_SpecialDefenseProperties_XMLTree_Type: public ::RPG_Monster_SpecialBaseProperties_XMLTree_Type
{
  public:
  // action
  //
  typedef ::RPG_Monster_DefenseAction_XMLTree_Type action_type;
  typedef ::xsd::cxx::tree::sequence< action_type > action_sequence;
  typedef action_sequence::iterator action_iterator;
  typedef action_sequence::const_iterator action_const_iterator;
  typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

  const action_sequence&
  action () const;

  action_sequence&
  action ();

  void
  action (const action_sequence& s);

  // Constructors.
  //
  RPG_Monster_SpecialDefenseProperties_XMLTree_Type (const abilityClass_type&,
                                                     const type_type&,
                                                     const actionType_type&);

  RPG_Monster_SpecialDefenseProperties_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialDefenseProperties_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialDefenseProperties_XMLTree_Type (const RPG_Monster_SpecialDefenseProperties_XMLTree_Type& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialDefenseProperties_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialDefenseProperties_XMLTree_Type&
  operator= (const RPG_Monster_SpecialDefenseProperties_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialDefenseProperties_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  action_sequence action_;
};

bool
operator== (const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&, const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&, const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&);


class RPG_Monster_AttackAction_XMLTree_Type: public ::xml_schema::type
{
  public:
  // weapon
  //
  typedef ::RPG_Monster_WeaponTypeUnion_XMLTree_Type weapon_type;
  typedef ::xsd::cxx::tree::traits< weapon_type, char > weapon_traits;

  const weapon_type&
  weapon () const;

  weapon_type&
  weapon ();

  void
  weapon (const weapon_type& x);

  void
  weapon (::std::auto_ptr< weapon_type > p);

  // attackBonus
  //
  typedef ::xml_schema::byte attackBonus_type;
  typedef ::xsd::cxx::tree::sequence< attackBonus_type > attackBonus_sequence;
  typedef attackBonus_sequence::iterator attackBonus_iterator;
  typedef attackBonus_sequence::const_iterator attackBonus_const_iterator;
  typedef ::xsd::cxx::tree::traits< attackBonus_type, char > attackBonus_traits;

  const attackBonus_sequence&
  attackBonus () const;

  attackBonus_sequence&
  attackBonus ();

  void
  attackBonus (const attackBonus_sequence& s);

  // attackForm
  //
  typedef ::RPG_Combat_AttackForm_XMLTree_Type attackForm_type;
  typedef ::xsd::cxx::tree::sequence< attackForm_type > attackForm_sequence;
  typedef attackForm_sequence::iterator attackForm_iterator;
  typedef attackForm_sequence::const_iterator attackForm_const_iterator;
  typedef ::xsd::cxx::tree::traits< attackForm_type, char > attackForm_traits;

  const attackForm_sequence&
  attackForm () const;

  attackForm_sequence&
  attackForm ();

  void
  attackForm (const attackForm_sequence& s);

  // damage
  //
  typedef ::RPG_Combat_Damage_XMLTree_Type damage_type;
  typedef ::xsd::cxx::tree::optional< damage_type > damage_optional;
  typedef ::xsd::cxx::tree::traits< damage_type, char > damage_traits;

  const damage_optional&
  damage () const;

  damage_optional&
  damage ();

  void
  damage (const damage_type& x);

  void
  damage (const damage_optional& x);

  void
  damage (::std::auto_ptr< damage_type > p);

  // effect
  //
  typedef ::RPG_Magic_SpellLikeProperties_XMLTree_Type effect_type;
  typedef ::xsd::cxx::tree::optional< effect_type > effect_optional;
  typedef ::xsd::cxx::tree::traits< effect_type, char > effect_traits;

  const effect_optional&
  effect () const;

  effect_optional&
  effect ();

  void
  effect (const effect_type& x);

  void
  effect (const effect_optional& x);

  void
  effect (::std::auto_ptr< effect_type > p);

  // numAttacksPerRound
  //
  typedef ::xml_schema::unsigned_byte numAttacksPerRound_type;
  typedef ::xsd::cxx::tree::optional< numAttacksPerRound_type > numAttacksPerRound_optional;
  typedef ::xsd::cxx::tree::traits< numAttacksPerRound_type, char > numAttacksPerRound_traits;

  const numAttacksPerRound_optional&
  numAttacksPerRound () const;

  numAttacksPerRound_optional&
  numAttacksPerRound ();

  void
  numAttacksPerRound (const numAttacksPerRound_type& x);

  void
  numAttacksPerRound (const numAttacksPerRound_optional& x);

  // ranged
  //
  typedef ::RPG_Combat_RangedAttackProperties_XMLTree_Type ranged_type;
  typedef ::xsd::cxx::tree::optional< ranged_type > ranged_optional;
  typedef ::xsd::cxx::tree::traits< ranged_type, char > ranged_traits;

  const ranged_optional&
  ranged () const;

  ranged_optional&
  ranged ();

  void
  ranged (const ranged_type& x);

  void
  ranged (const ranged_optional& x);

  void
  ranged (::std::auto_ptr< ranged_type > p);

  // trigger
  //
  typedef ::RPG_Character_Ability_XMLTree_Type trigger_type;
  typedef ::xsd::cxx::tree::sequence< trigger_type > trigger_sequence;
  typedef trigger_sequence::iterator trigger_iterator;
  typedef trigger_sequence::const_iterator trigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< trigger_type, char > trigger_traits;

  const trigger_sequence&
  trigger () const;

  trigger_sequence&
  trigger ();

  void
  trigger (const trigger_sequence& s);

  // allAdjacent
  //
  typedef ::xml_schema::boolean allAdjacent_type;
  typedef ::xsd::cxx::tree::traits< allAdjacent_type, char > allAdjacent_traits;

  const allAdjacent_type&
  allAdjacent () const;

  allAdjacent_type&
  allAdjacent ();

  void
  allAdjacent (const allAdjacent_type& x);

  static allAdjacent_type
  allAdjacent_default_value ();

  // fullAttackIncludesNextAction
  //
  typedef ::xml_schema::boolean fullAttackIncludesNextAction_type;
  typedef ::xsd::cxx::tree::traits< fullAttackIncludesNextAction_type, char > fullAttackIncludesNextAction_traits;

  const fullAttackIncludesNextAction_type&
  fullAttackIncludesNextAction () const;

  fullAttackIncludesNextAction_type&
  fullAttackIncludesNextAction ();

  void
  fullAttackIncludesNextAction (const fullAttackIncludesNextAction_type& x);

  static fullAttackIncludesNextAction_type
  fullAttackIncludesNextAction_default_value ();

  // Constructors.
  //
  RPG_Monster_AttackAction_XMLTree_Type (const weapon_type&);

  RPG_Monster_AttackAction_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Monster_AttackAction_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Monster_AttackAction_XMLTree_Type (const RPG_Monster_AttackAction_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Monster_AttackAction_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_AttackAction_XMLTree_Type&
  operator= (const RPG_Monster_AttackAction_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_AttackAction_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< weapon_type > weapon_;
  attackBonus_sequence attackBonus_;
  attackForm_sequence attackForm_;
  damage_optional damage_;
  effect_optional effect_;
  numAttacksPerRound_optional numAttacksPerRound_;
  ranged_optional ranged_;
  trigger_sequence trigger_;
  ::xsd::cxx::tree::one< allAdjacent_type > allAdjacent_;
  ::xsd::cxx::tree::one< fullAttackIncludesNextAction_type > fullAttackIncludesNextAction_;
};

bool
operator== (const RPG_Monster_AttackAction_XMLTree_Type&, const RPG_Monster_AttackAction_XMLTree_Type&);

bool
operator!= (const RPG_Monster_AttackAction_XMLTree_Type&, const RPG_Monster_AttackAction_XMLTree_Type&);


class RPG_Monster_Attack_XMLTree_Type: public ::xml_schema::type
{
  public:
  // baseAttackBonus
  //
  typedef ::xml_schema::byte baseAttackBonus_type;
  typedef ::xsd::cxx::tree::traits< baseAttackBonus_type, char > baseAttackBonus_traits;

  const baseAttackBonus_type&
  baseAttackBonus () const;

  baseAttackBonus_type&
  baseAttackBonus ();

  void
  baseAttackBonus (const baseAttackBonus_type& x);

  // grappleBonus
  //
  typedef ::xml_schema::byte grappleBonus_type;
  typedef ::xsd::cxx::tree::traits< grappleBonus_type, char > grappleBonus_traits;

  const grappleBonus_type&
  grappleBonus () const;

  grappleBonus_type&
  grappleBonus ();

  void
  grappleBonus (const grappleBonus_type& x);

  // standardAttackAction
  //
  typedef ::RPG_Monster_AttackAction_XMLTree_Type standardAttackAction_type;
  typedef ::xsd::cxx::tree::sequence< standardAttackAction_type > standardAttackAction_sequence;
  typedef standardAttackAction_sequence::iterator standardAttackAction_iterator;
  typedef standardAttackAction_sequence::const_iterator standardAttackAction_const_iterator;
  typedef ::xsd::cxx::tree::traits< standardAttackAction_type, char > standardAttackAction_traits;

  const standardAttackAction_sequence&
  standardAttackAction () const;

  standardAttackAction_sequence&
  standardAttackAction ();

  void
  standardAttackAction (const standardAttackAction_sequence& s);

  // fullAttackAction
  //
  typedef ::RPG_Monster_AttackAction_XMLTree_Type fullAttackAction_type;
  typedef ::xsd::cxx::tree::sequence< fullAttackAction_type > fullAttackAction_sequence;
  typedef fullAttackAction_sequence::iterator fullAttackAction_iterator;
  typedef fullAttackAction_sequence::const_iterator fullAttackAction_const_iterator;
  typedef ::xsd::cxx::tree::traits< fullAttackAction_type, char > fullAttackAction_traits;

  const fullAttackAction_sequence&
  fullAttackAction () const;

  fullAttackAction_sequence&
  fullAttackAction ();

  void
  fullAttackAction (const fullAttackAction_sequence& s);

  // actionsAreInclusive
  //
  typedef ::xml_schema::boolean actionsAreInclusive_type;
  typedef ::xsd::cxx::tree::traits< actionsAreInclusive_type, char > actionsAreInclusive_traits;

  const actionsAreInclusive_type&
  actionsAreInclusive () const;

  actionsAreInclusive_type&
  actionsAreInclusive ();

  void
  actionsAreInclusive (const actionsAreInclusive_type& x);

  static actionsAreInclusive_type
  actionsAreInclusive_default_value ();

  // Constructors.
  //
  RPG_Monster_Attack_XMLTree_Type (const baseAttackBonus_type&,
                                   const grappleBonus_type&);

  RPG_Monster_Attack_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  RPG_Monster_Attack_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  RPG_Monster_Attack_XMLTree_Type (const RPG_Monster_Attack_XMLTree_Type& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  virtual RPG_Monster_Attack_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Attack_XMLTree_Type&
  operator= (const RPG_Monster_Attack_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_Attack_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< baseAttackBonus_type > baseAttackBonus_;
  ::xsd::cxx::tree::one< grappleBonus_type > grappleBonus_;
  standardAttackAction_sequence standardAttackAction_;
  fullAttackAction_sequence fullAttackAction_;
  ::xsd::cxx::tree::one< actionsAreInclusive_type > actionsAreInclusive_;
};

bool
operator== (const RPG_Monster_Attack_XMLTree_Type&, const RPG_Monster_Attack_XMLTree_Type&);

bool
operator!= (const RPG_Monster_Attack_XMLTree_Type&, const RPG_Monster_Attack_XMLTree_Type&);


class RPG_Monster_ActionTrigger_XMLTree_Type: public ::xml_schema::type
{
  public:
  // weapon
  //
  typedef ::RPG_Monster_WeaponTypeUnion_XMLTree_Type weapon_type;
  typedef ::xsd::cxx::tree::traits< weapon_type, char > weapon_traits;

  const weapon_type&
  weapon () const;

  weapon_type&
  weapon ();

  void
  weapon (const weapon_type& x);

  void
  weapon (::std::auto_ptr< weapon_type > p);

  // numHits
  //
  typedef ::xml_schema::unsigned_byte numHits_type;
  typedef ::xsd::cxx::tree::traits< numHits_type, char > numHits_traits;

  const numHits_type&
  numHits () const;

  numHits_type&
  numHits ();

  void
  numHits (const numHits_type& x);

  // Constructors.
  //
  RPG_Monster_ActionTrigger_XMLTree_Type (const weapon_type&,
                                          const numHits_type&);

  RPG_Monster_ActionTrigger_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_ActionTrigger_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_ActionTrigger_XMLTree_Type (const RPG_Monster_ActionTrigger_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Monster_ActionTrigger_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_ActionTrigger_XMLTree_Type&
  operator= (const RPG_Monster_ActionTrigger_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_ActionTrigger_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< weapon_type > weapon_;
  ::xsd::cxx::tree::one< numHits_type > numHits_;
};

bool
operator== (const RPG_Monster_ActionTrigger_XMLTree_Type&, const RPG_Monster_ActionTrigger_XMLTree_Type&);

bool
operator!= (const RPG_Monster_ActionTrigger_XMLTree_Type&, const RPG_Monster_ActionTrigger_XMLTree_Type&);


class RPG_Monster_SpecialAttackPreCondition_XMLTree_Type: public ::xml_schema::type
{
  public:
  // action
  //
  typedef ::RPG_Monster_ActionTrigger_XMLTree_Type action_type;
  typedef ::xsd::cxx::tree::optional< action_type > action_optional;
  typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

  const action_optional&
  action () const;

  action_optional&
  action ();

  void
  action (const action_type& x);

  void
  action (const action_optional& x);

  void
  action (::std::auto_ptr< action_type > p);

  // targetAlignment
  //
  typedef ::RPG_Character_Alignment_XMLTree_Type targetAlignment_type;
  typedef ::xsd::cxx::tree::optional< targetAlignment_type > targetAlignment_optional;
  typedef ::xsd::cxx::tree::traits< targetAlignment_type, char > targetAlignment_traits;

  const targetAlignment_optional&
  targetAlignment () const;

  targetAlignment_optional&
  targetAlignment ();

  void
  targetAlignment (const targetAlignment_type& x);

  void
  targetAlignment (const targetAlignment_optional& x);

  void
  targetAlignment (::std::auto_ptr< targetAlignment_type > p);

  // ownCondition
  //
  typedef ::RPG_Common_Condition_XMLTree_Type ownCondition_type;
  typedef ::xsd::cxx::tree::sequence< ownCondition_type > ownCondition_sequence;
  typedef ownCondition_sequence::iterator ownCondition_iterator;
  typedef ownCondition_sequence::const_iterator ownCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< ownCondition_type, char > ownCondition_traits;

  const ownCondition_sequence&
  ownCondition () const;

  ownCondition_sequence&
  ownCondition ();

  void
  ownCondition (const ownCondition_sequence& s);

  // targetCondition
  //
  typedef ::RPG_Common_Condition_XMLTree_Type targetCondition_type;
  typedef ::xsd::cxx::tree::sequence< targetCondition_type > targetCondition_sequence;
  typedef targetCondition_sequence::iterator targetCondition_iterator;
  typedef targetCondition_sequence::const_iterator targetCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< targetCondition_type, char > targetCondition_traits;

  const targetCondition_sequence&
  targetCondition () const;

  targetCondition_sequence&
  targetCondition ();

  void
  targetCondition (const targetCondition_sequence& s);

  // minTargetSize
  //
  typedef ::RPG_Common_Size_XMLTree_Type minTargetSize_type;
  typedef ::xsd::cxx::tree::optional< minTargetSize_type > minTargetSize_optional;
  typedef ::xsd::cxx::tree::traits< minTargetSize_type, char > minTargetSize_traits;

  const minTargetSize_optional&
  minTargetSize () const;

  minTargetSize_optional&
  minTargetSize ();

  void
  minTargetSize (const minTargetSize_type& x);

  void
  minTargetSize (const minTargetSize_optional& x);

  void
  minTargetSize (::std::auto_ptr< minTargetSize_type > p);

  // maxTargetSize
  //
  typedef ::RPG_Common_Size_XMLTree_Type maxTargetSize_type;
  typedef ::xsd::cxx::tree::optional< maxTargetSize_type > maxTargetSize_optional;
  typedef ::xsd::cxx::tree::traits< maxTargetSize_type, char > maxTargetSize_traits;

  const maxTargetSize_optional&
  maxTargetSize () const;

  maxTargetSize_optional&
  maxTargetSize ();

  void
  maxTargetSize (const maxTargetSize_type& x);

  void
  maxTargetSize (const maxTargetSize_optional& x);

  void
  maxTargetSize (::std::auto_ptr< maxTargetSize_type > p);

  // check
  //
  typedef ::RPG_Combat_Check_XMLTree_Type check_type;
  typedef ::xsd::cxx::tree::optional< check_type > check_optional;
  typedef ::xsd::cxx::tree::traits< check_type, char > check_traits;

  const check_optional&
  check () const;

  check_optional&
  check ();

  void
  check (const check_type& x);

  void
  check (const check_optional& x);

  void
  check (::std::auto_ptr< check_type > p);

  // Constructors.
  //
  RPG_Monster_SpecialAttackPreCondition_XMLTree_Type ();

  RPG_Monster_SpecialAttackPreCondition_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAttackPreCondition_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAttackPreCondition_XMLTree_Type (const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialAttackPreCondition_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&
  operator= (const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialAttackPreCondition_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  action_optional action_;
  targetAlignment_optional targetAlignment_;
  ownCondition_sequence ownCondition_;
  targetCondition_sequence targetCondition_;
  minTargetSize_optional minTargetSize_;
  maxTargetSize_optional maxTargetSize_;
  check_optional check_;
};

bool
operator== (const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&, const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&, const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&);


class RPG_Monster_SpecialAttackProperties_XMLTree_Type: public ::RPG_Monster_SpecialBaseProperties_XMLTree_Type
{
  public:
  // preCondition
  //
  typedef ::RPG_Monster_SpecialAttackPreCondition_XMLTree_Type preCondition_type;
  typedef ::xsd::cxx::tree::sequence< preCondition_type > preCondition_sequence;
  typedef preCondition_sequence::iterator preCondition_iterator;
  typedef preCondition_sequence::const_iterator preCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< preCondition_type, char > preCondition_traits;

  const preCondition_sequence&
  preCondition () const;

  preCondition_sequence&
  preCondition ();

  void
  preCondition (const preCondition_sequence& s);

  // action
  //
  typedef ::RPG_Monster_AttackAction_XMLTree_Type action_type;
  typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

  const action_type&
  action () const;

  action_type&
  action ();

  void
  action (const action_type& x);

  void
  action (::std::auto_ptr< action_type > p);

  // Constructors.
  //
  RPG_Monster_SpecialAttackProperties_XMLTree_Type (const abilityClass_type&,
                                                    const type_type&,
                                                    const actionType_type&,
                                                    const action_type&);

  RPG_Monster_SpecialAttackProperties_XMLTree_Type (const abilityClass_type&,
                                                    const type_type&,
                                                    const actionType_type&,
                                                    ::std::auto_ptr< action_type >);

  RPG_Monster_SpecialAttackProperties_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAttackProperties_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAttackProperties_XMLTree_Type (const RPG_Monster_SpecialAttackProperties_XMLTree_Type& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialAttackProperties_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialAttackProperties_XMLTree_Type&
  operator= (const RPG_Monster_SpecialAttackProperties_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialAttackProperties_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  preCondition_sequence preCondition_;
  ::xsd::cxx::tree::one< action_type > action_;
};

bool
operator== (const RPG_Monster_SpecialAttackProperties_XMLTree_Type&, const RPG_Monster_SpecialAttackProperties_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialAttackProperties_XMLTree_Type&, const RPG_Monster_SpecialAttackProperties_XMLTree_Type&);


class RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type: public ::xml_schema::type
{
  public:
  // targetCondition
  //
  typedef ::RPG_Common_Condition_XMLTree_Type targetCondition_type;
  typedef ::xsd::cxx::tree::sequence< targetCondition_type > targetCondition_sequence;
  typedef targetCondition_sequence::iterator targetCondition_iterator;
  typedef targetCondition_sequence::const_iterator targetCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< targetCondition_type, char > targetCondition_traits;

  const targetCondition_sequence&
  targetCondition () const;

  targetCondition_sequence&
  targetCondition ();

  void
  targetCondition (const targetCondition_sequence& s);

  // maxTargetSize
  //
  typedef ::RPG_Common_Size_XMLTree_Type maxTargetSize_type;
  typedef ::xsd::cxx::tree::optional< maxTargetSize_type > maxTargetSize_optional;
  typedef ::xsd::cxx::tree::traits< maxTargetSize_type, char > maxTargetSize_traits;

  const maxTargetSize_optional&
  maxTargetSize () const;

  maxTargetSize_optional&
  maxTargetSize ();

  void
  maxTargetSize (const maxTargetSize_type& x);

  void
  maxTargetSize (const maxTargetSize_optional& x);

  void
  maxTargetSize (::std::auto_ptr< maxTargetSize_type > p);

  // check
  //
  typedef ::RPG_Combat_Check_XMLTree_Type check_type;
  typedef ::xsd::cxx::tree::optional< check_type > check_optional;
  typedef ::xsd::cxx::tree::traits< check_type, char > check_traits;

  const check_optional&
  check () const;

  check_optional&
  check ();

  void
  check (const check_type& x);

  void
  check (const check_optional& x);

  void
  check (::std::auto_ptr< check_type > p);

  // Constructors.
  //
  RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type ();

  RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type (const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&
  operator= (const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  targetCondition_sequence targetCondition_;
  maxTargetSize_optional maxTargetSize_;
  check_optional check_;
};

bool
operator== (const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&, const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&, const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&);


class RPG_Monster_SummonMonster_XMLTree_Type: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // amount
  //
  typedef ::RPG_Dice_Roll_XMLTree_Type amount_type;
  typedef ::xsd::cxx::tree::traits< amount_type, char > amount_traits;

  const amount_type&
  amount () const;

  amount_type&
  amount ();

  void
  amount (const amount_type& x);

  void
  amount (::std::auto_ptr< amount_type > p);

  // successRate
  //
  typedef ::xml_schema::float_ successRate_type;
  typedef ::xsd::cxx::tree::traits< successRate_type, char > successRate_traits;

  const successRate_type&
  successRate () const;

  successRate_type&
  successRate ();

  void
  successRate (const successRate_type& x);

  static successRate_type
  successRate_default_value ();

  // actionsAreInclusive
  //
  typedef ::xml_schema::boolean actionsAreInclusive_type;
  typedef ::xsd::cxx::tree::traits< actionsAreInclusive_type, char > actionsAreInclusive_traits;

  const actionsAreInclusive_type&
  actionsAreInclusive () const;

  actionsAreInclusive_type&
  actionsAreInclusive ();

  void
  actionsAreInclusive (const actionsAreInclusive_type& x);

  static actionsAreInclusive_type
  actionsAreInclusive_default_value ();

  // Constructors.
  //
  RPG_Monster_SummonMonster_XMLTree_Type (const name_type&,
                                          const amount_type&);

  RPG_Monster_SummonMonster_XMLTree_Type (const name_type&,
                                          ::std::auto_ptr< amount_type >);

  RPG_Monster_SummonMonster_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_SummonMonster_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_SummonMonster_XMLTree_Type (const RPG_Monster_SummonMonster_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Monster_SummonMonster_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SummonMonster_XMLTree_Type&
  operator= (const RPG_Monster_SummonMonster_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SummonMonster_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< amount_type > amount_;
  ::xsd::cxx::tree::one< successRate_type > successRate_;
  ::xsd::cxx::tree::one< actionsAreInclusive_type > actionsAreInclusive_;
};

bool
operator== (const RPG_Monster_SummonMonster_XMLTree_Type&, const RPG_Monster_SummonMonster_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SummonMonster_XMLTree_Type&, const RPG_Monster_SummonMonster_XMLTree_Type&);


class RPG_Monster_SpecialAbilityProperties_XMLTree_Type: public ::RPG_Monster_SpecialBaseProperties_XMLTree_Type
{
  public:
  // preCondition
  //
  typedef ::RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type preCondition_type;
  typedef ::xsd::cxx::tree::sequence< preCondition_type > preCondition_sequence;
  typedef preCondition_sequence::iterator preCondition_iterator;
  typedef preCondition_sequence::const_iterator preCondition_const_iterator;
  typedef ::xsd::cxx::tree::traits< preCondition_type, char > preCondition_traits;

  const preCondition_sequence&
  preCondition () const;

  preCondition_sequence&
  preCondition ();

  void
  preCondition (const preCondition_sequence& s);

  // summon
  //
  typedef ::RPG_Monster_SummonMonster_XMLTree_Type summon_type;
  typedef ::xsd::cxx::tree::sequence< summon_type > summon_sequence;
  typedef summon_sequence::iterator summon_iterator;
  typedef summon_sequence::const_iterator summon_const_iterator;
  typedef ::xsd::cxx::tree::traits< summon_type, char > summon_traits;

  const summon_sequence&
  summon () const;

  summon_sequence&
  summon ();

  void
  summon (const summon_sequence& s);

  // spell
  //
  typedef ::RPG_Magic_SpellLikeProperties_XMLTree_Type spell_type;
  typedef ::xsd::cxx::tree::sequence< spell_type > spell_sequence;
  typedef spell_sequence::iterator spell_iterator;
  typedef spell_sequence::const_iterator spell_const_iterator;
  typedef ::xsd::cxx::tree::traits< spell_type, char > spell_traits;

  const spell_sequence&
  spell () const;

  spell_sequence&
  spell ();

  void
  spell (const spell_sequence& s);

  // ranged
  //
  typedef ::RPG_Combat_RangedAttackProperties_XMLTree_Type ranged_type;
  typedef ::xsd::cxx::tree::optional< ranged_type > ranged_optional;
  typedef ::xsd::cxx::tree::traits< ranged_type, char > ranged_traits;

  const ranged_optional&
  ranged () const;

  ranged_optional&
  ranged ();

  void
  ranged (const ranged_type& x);

  void
  ranged (const ranged_optional& x);

  void
  ranged (::std::auto_ptr< ranged_type > p);

  // Constructors.
  //
  RPG_Monster_SpecialAbilityProperties_XMLTree_Type (const abilityClass_type&,
                                                     const type_type&,
                                                     const actionType_type&);

  RPG_Monster_SpecialAbilityProperties_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAbilityProperties_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  RPG_Monster_SpecialAbilityProperties_XMLTree_Type (const RPG_Monster_SpecialAbilityProperties_XMLTree_Type& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

  virtual RPG_Monster_SpecialAbilityProperties_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SpecialAbilityProperties_XMLTree_Type&
  operator= (const RPG_Monster_SpecialAbilityProperties_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SpecialAbilityProperties_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  preCondition_sequence preCondition_;
  summon_sequence summon_;
  spell_sequence spell_;
  ranged_optional ranged_;
};

bool
operator== (const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&, const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&, const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&);


class RPG_Monster_SavingThrowModifiers_XMLTree_Type: public ::xml_schema::type
{
  public:
  // fortitude
  //
  typedef ::xml_schema::byte fortitude_type;
  typedef ::xsd::cxx::tree::traits< fortitude_type, char > fortitude_traits;

  const fortitude_type&
  fortitude () const;

  fortitude_type&
  fortitude ();

  void
  fortitude (const fortitude_type& x);

  // reflex
  //
  typedef ::xml_schema::byte reflex_type;
  typedef ::xsd::cxx::tree::traits< reflex_type, char > reflex_traits;

  const reflex_type&
  reflex () const;

  reflex_type&
  reflex ();

  void
  reflex (const reflex_type& x);

  // will
  //
  typedef ::xml_schema::byte will_type;
  typedef ::xsd::cxx::tree::traits< will_type, char > will_traits;

  const will_type&
  will () const;

  will_type&
  will ();

  void
  will (const will_type& x);

  // Constructors.
  //
  RPG_Monster_SavingThrowModifiers_XMLTree_Type (const fortitude_type&,
                                                 const reflex_type&,
                                                 const will_type&);

  RPG_Monster_SavingThrowModifiers_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

  RPG_Monster_SavingThrowModifiers_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

  RPG_Monster_SavingThrowModifiers_XMLTree_Type (const RPG_Monster_SavingThrowModifiers_XMLTree_Type& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

  virtual RPG_Monster_SavingThrowModifiers_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_SavingThrowModifiers_XMLTree_Type&
  operator= (const RPG_Monster_SavingThrowModifiers_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_SavingThrowModifiers_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< fortitude_type > fortitude_;
  ::xsd::cxx::tree::one< reflex_type > reflex_;
  ::xsd::cxx::tree::one< will_type > will_;
};

bool
operator== (const RPG_Monster_SavingThrowModifiers_XMLTree_Type&, const RPG_Monster_SavingThrowModifiers_XMLTree_Type&);

bool
operator!= (const RPG_Monster_SavingThrowModifiers_XMLTree_Type&, const RPG_Monster_SavingThrowModifiers_XMLTree_Type&);


class RPG_Monster_Organization_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ORGANIZATION_ANY,
    ORGANIZATION_BAND,
    ORGANIZATION_BROOD,
    ORGANIZATION_COLONY,
    ORGANIZATION_CLAN,
    ORGANIZATION_CLUSTER,
    ORGANIZATION_CLUTCH,
    ORGANIZATION_COMPANY,
    ORGANIZATION_CROWD,
    ORGANIZATION_FLIGHT,
    ORGANIZATION_FLOCK,
    ORGANIZATION_GANG,
    ORGANIZATION_GROUP,
    ORGANIZATION_MOB,
    ORGANIZATION_PACK,
    ORGANIZATION_PAIR,
    ORGANIZATION_PATCH,
    ORGANIZATION_PRIDE,
    ORGANIZATION_SOLITARY,
    ORGANIZATION_SQUAD,
    ORGANIZATION_SWARM,
    ORGANIZATION_TEAM,
    ORGANIZATION_TRIBE,
    ORGANIZATION_TROOP,
    ORGANIZATION_TROUPE
  };

  RPG_Monster_Organization_XMLTree_Type (value v);

  RPG_Monster_Organization_XMLTree_Type (const char* v);

  RPG_Monster_Organization_XMLTree_Type (const ::std::string& v);

  RPG_Monster_Organization_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Monster_Organization_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Monster_Organization_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Monster_Organization_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Monster_Organization_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Monster_Organization_XMLTree_Type (const RPG_Monster_Organization_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Monster_Organization_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Organization_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Monster_Organization_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Monster_Organization_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Monster_Organization_XMLTree_Type_literals_[25];
  static const value _xsd_RPG_Monster_Organization_XMLTree_Type_indexes_[25];
};

class RPG_Monster_OrganizationSlaverStep_XMLTree_Type: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // range
  //
  typedef ::RPG_Dice_ValueRange_XMLTree_Type range_type;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_type&
  range () const;

  range_type&
  range ();

  void
  range (const range_type& x);

  void
  range (::std::auto_ptr< range_type > p);

  // Constructors.
  //
  RPG_Monster_OrganizationSlaverStep_XMLTree_Type (const name_type&,
                                                   const range_type&);

  RPG_Monster_OrganizationSlaverStep_XMLTree_Type (const name_type&,
                                                   ::std::auto_ptr< range_type >);

  RPG_Monster_OrganizationSlaverStep_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

  RPG_Monster_OrganizationSlaverStep_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

  RPG_Monster_OrganizationSlaverStep_XMLTree_Type (const RPG_Monster_OrganizationSlaverStep_XMLTree_Type& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

  virtual RPG_Monster_OrganizationSlaverStep_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_OrganizationSlaverStep_XMLTree_Type&
  operator= (const RPG_Monster_OrganizationSlaverStep_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_OrganizationSlaverStep_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< range_type > range_;
};

bool
operator== (const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&, const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&);

bool
operator!= (const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&, const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&);


class RPG_Monster_OrganizationStep_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  //
  typedef ::RPG_Monster_Organization_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // range
  //
  typedef ::RPG_Dice_ValueRange_XMLTree_Type range_type;
  typedef ::xsd::cxx::tree::optional< range_type > range_optional;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_optional&
  range () const;

  range_optional&
  range ();

  void
  range (const range_type& x);

  void
  range (const range_optional& x);

  void
  range (::std::auto_ptr< range_type > p);

  // slaves
  //
  typedef ::RPG_Monster_OrganizationSlaverStep_XMLTree_Type slaves_type;
  typedef ::xsd::cxx::tree::sequence< slaves_type > slaves_sequence;
  typedef slaves_sequence::iterator slaves_iterator;
  typedef slaves_sequence::const_iterator slaves_const_iterator;
  typedef ::xsd::cxx::tree::traits< slaves_type, char > slaves_traits;

  const slaves_sequence&
  slaves () const;

  slaves_sequence&
  slaves ();

  void
  slaves (const slaves_sequence& s);

  // Constructors.
  //
  RPG_Monster_OrganizationStep_XMLTree_Type (const type_type&);

  RPG_Monster_OrganizationStep_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Monster_OrganizationStep_XMLTree_Type (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Monster_OrganizationStep_XMLTree_Type (const RPG_Monster_OrganizationStep_XMLTree_Type& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  virtual RPG_Monster_OrganizationStep_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_OrganizationStep_XMLTree_Type&
  operator= (const RPG_Monster_OrganizationStep_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_OrganizationStep_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  range_optional range_;
  slaves_sequence slaves_;
};

bool
operator== (const RPG_Monster_OrganizationStep_XMLTree_Type&, const RPG_Monster_OrganizationStep_XMLTree_Type&);

bool
operator!= (const RPG_Monster_OrganizationStep_XMLTree_Type&, const RPG_Monster_OrganizationStep_XMLTree_Type&);


class RPG_Monster_Organizations_XMLTree_Type: public ::xml_schema::type
{
  public:
  // step
  //
  typedef ::RPG_Monster_OrganizationStep_XMLTree_Type step_type;
  typedef ::xsd::cxx::tree::sequence< step_type > step_sequence;
  typedef step_sequence::iterator step_iterator;
  typedef step_sequence::const_iterator step_const_iterator;
  typedef ::xsd::cxx::tree::traits< step_type, char > step_traits;

  const step_sequence&
  step () const;

  step_sequence&
  step ();

  void
  step (const step_sequence& s);

  // Constructors.
  //
  RPG_Monster_Organizations_XMLTree_Type ();

  RPG_Monster_Organizations_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_Organizations_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_Organizations_XMLTree_Type (const RPG_Monster_Organizations_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Monster_Organizations_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Organizations_XMLTree_Type&
  operator= (const RPG_Monster_Organizations_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_Organizations_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  step_sequence step_;
};

bool
operator== (const RPG_Monster_Organizations_XMLTree_Type&, const RPG_Monster_Organizations_XMLTree_Type&);

bool
operator!= (const RPG_Monster_Organizations_XMLTree_Type&, const RPG_Monster_Organizations_XMLTree_Type&);


class RPG_Monster_AdvancementStep_XMLTree_Type: public ::xml_schema::type
{
  public:
  // size
  //
  typedef ::RPG_Common_Size_XMLTree_Type size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  // range
  //
  typedef ::RPG_Dice_ValueRange_XMLTree_Type range_type;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_type&
  range () const;

  range_type&
  range ();

  void
  range (const range_type& x);

  void
  range (::std::auto_ptr< range_type > p);

  // Constructors.
  //
  RPG_Monster_AdvancementStep_XMLTree_Type (const size_type&,
                                            const range_type&);

  RPG_Monster_AdvancementStep_XMLTree_Type (const size_type&,
                                            ::std::auto_ptr< range_type >);

  RPG_Monster_AdvancementStep_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Monster_AdvancementStep_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Monster_AdvancementStep_XMLTree_Type (const RPG_Monster_AdvancementStep_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Monster_AdvancementStep_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_AdvancementStep_XMLTree_Type&
  operator= (const RPG_Monster_AdvancementStep_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_AdvancementStep_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< range_type > range_;
};

bool
operator== (const RPG_Monster_AdvancementStep_XMLTree_Type&, const RPG_Monster_AdvancementStep_XMLTree_Type&);

bool
operator!= (const RPG_Monster_AdvancementStep_XMLTree_Type&, const RPG_Monster_AdvancementStep_XMLTree_Type&);


class RPG_Monster_Advancement_XMLTree_Type: public ::xml_schema::type
{
  public:
  // step
  //
  typedef ::RPG_Monster_AdvancementStep_XMLTree_Type step_type;
  typedef ::xsd::cxx::tree::sequence< step_type > step_sequence;
  typedef step_sequence::iterator step_iterator;
  typedef step_sequence::const_iterator step_const_iterator;
  typedef ::xsd::cxx::tree::traits< step_type, char > step_traits;

  const step_sequence&
  step () const;

  step_sequence&
  step ();

  void
  step (const step_sequence& s);

  // Constructors.
  //
  RPG_Monster_Advancement_XMLTree_Type ();

  RPG_Monster_Advancement_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Monster_Advancement_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Monster_Advancement_XMLTree_Type (const RPG_Monster_Advancement_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Monster_Advancement_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Advancement_XMLTree_Type&
  operator= (const RPG_Monster_Advancement_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_Advancement_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  step_sequence step_;
};

bool
operator== (const RPG_Monster_Advancement_XMLTree_Type&, const RPG_Monster_Advancement_XMLTree_Type&);

bool
operator!= (const RPG_Monster_Advancement_XMLTree_Type&, const RPG_Monster_Advancement_XMLTree_Type&);


class RPG_Monster_PropertiesXML_XMLTree_Type: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // size
  //
  typedef ::RPG_Monster_Size_XMLTree_Type size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  // type
  //
  typedef ::RPG_Common_CreatureType_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // hitDice
  //
  typedef ::RPG_Dice_Roll_XMLTree_Type hitDice_type;
  typedef ::xsd::cxx::tree::traits< hitDice_type, char > hitDice_traits;

  const hitDice_type&
  hitDice () const;

  hitDice_type&
  hitDice ();

  void
  hitDice (const hitDice_type& x);

  void
  hitDice (::std::auto_ptr< hitDice_type > p);

  // initiative
  //
  typedef ::xml_schema::byte initiative_type;
  typedef ::xsd::cxx::tree::traits< initiative_type, char > initiative_traits;

  const initiative_type&
  initiative () const;

  initiative_type&
  initiative ();

  void
  initiative (const initiative_type& x);

  // speed
  //
  typedef ::xml_schema::unsigned_byte speed_type;
  typedef ::xsd::cxx::tree::traits< speed_type, char > speed_traits;

  const speed_type&
  speed () const;

  speed_type&
  speed ();

  void
  speed (const speed_type& x);

  // armorClass
  //
  typedef ::RPG_Monster_NaturalArmorClass_XMLTree_Type armorClass_type;
  typedef ::xsd::cxx::tree::traits< armorClass_type, char > armorClass_traits;

  const armorClass_type&
  armorClass () const;

  armorClass_type&
  armorClass ();

  void
  armorClass (const armorClass_type& x);

  void
  armorClass (::std::auto_ptr< armorClass_type > p);

  // specialDefense
  //
  typedef ::RPG_Monster_SpecialDefenseProperties_XMLTree_Type specialDefense_type;
  typedef ::xsd::cxx::tree::sequence< specialDefense_type > specialDefense_sequence;
  typedef specialDefense_sequence::iterator specialDefense_iterator;
  typedef specialDefense_sequence::const_iterator specialDefense_const_iterator;
  typedef ::xsd::cxx::tree::traits< specialDefense_type, char > specialDefense_traits;

  const specialDefense_sequence&
  specialDefense () const;

  specialDefense_sequence&
  specialDefense ();

  void
  specialDefense (const specialDefense_sequence& s);

  // attack
  //
  typedef ::RPG_Monster_Attack_XMLTree_Type attack_type;
  typedef ::xsd::cxx::tree::traits< attack_type, char > attack_traits;

  const attack_type&
  attack () const;

  attack_type&
  attack ();

  void
  attack (const attack_type& x);

  void
  attack (::std::auto_ptr< attack_type > p);

  // specialAttack
  //
  typedef ::RPG_Monster_SpecialAttackProperties_XMLTree_Type specialAttack_type;
  typedef ::xsd::cxx::tree::sequence< specialAttack_type > specialAttack_sequence;
  typedef specialAttack_sequence::iterator specialAttack_iterator;
  typedef specialAttack_sequence::const_iterator specialAttack_const_iterator;
  typedef ::xsd::cxx::tree::traits< specialAttack_type, char > specialAttack_traits;

  const specialAttack_sequence&
  specialAttack () const;

  specialAttack_sequence&
  specialAttack ();

  void
  specialAttack (const specialAttack_sequence& s);

  // specialAbility
  //
  typedef ::RPG_Monster_SpecialAbilityProperties_XMLTree_Type specialAbility_type;
  typedef ::xsd::cxx::tree::sequence< specialAbility_type > specialAbility_sequence;
  typedef specialAbility_sequence::iterator specialAbility_iterator;
  typedef specialAbility_sequence::const_iterator specialAbility_const_iterator;
  typedef ::xsd::cxx::tree::traits< specialAbility_type, char > specialAbility_traits;

  const specialAbility_sequence&
  specialAbility () const;

  specialAbility_sequence&
  specialAbility ();

  void
  specialAbility (const specialAbility_sequence& s);

  // space
  //
  typedef ::xml_schema::unsigned_byte space_type;
  typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

  const space_type&
  space () const;

  space_type&
  space ();

  void
  space (const space_type& x);

  // reach
  //
  typedef ::xml_schema::unsigned_short reach_type;
  typedef ::xsd::cxx::tree::traits< reach_type, char > reach_traits;

  const reach_type&
  reach () const;

  reach_type&
  reach ();

  void
  reach (const reach_type& x);

  // saves
  //
  typedef ::RPG_Monster_SavingThrowModifiers_XMLTree_Type saves_type;
  typedef ::xsd::cxx::tree::traits< saves_type, char > saves_traits;

  const saves_type&
  saves () const;

  saves_type&
  saves ();

  void
  saves (const saves_type& x);

  void
  saves (::std::auto_ptr< saves_type > p);

  // attributes
  //
  typedef ::RPG_Character_Attributes_XMLTree_Type attributes_type;
  typedef ::xsd::cxx::tree::traits< attributes_type, char > attributes_traits;

  const attributes_type&
  attributes () const;

  attributes_type&
  attributes ();

  void
  attributes (const attributes_type& x);

  void
  attributes (::std::auto_ptr< attributes_type > p);

  // skills
  //
  typedef ::RPG_Character_Skills_XMLTree_Type skills_type;
  typedef ::xsd::cxx::tree::optional< skills_type > skills_optional;
  typedef ::xsd::cxx::tree::traits< skills_type, char > skills_traits;

  const skills_optional&
  skills () const;

  skills_optional&
  skills ();

  void
  skills (const skills_type& x);

  void
  skills (const skills_optional& x);

  void
  skills (::std::auto_ptr< skills_type > p);

  // feats
  //
  typedef ::RPG_Character_Feats_XMLTree_Type feats_type;
  typedef ::xsd::cxx::tree::optional< feats_type > feats_optional;
  typedef ::xsd::cxx::tree::traits< feats_type, char > feats_traits;

  const feats_optional&
  feats () const;

  feats_optional&
  feats ();

  void
  feats (const feats_type& x);

  void
  feats (const feats_optional& x);

  void
  feats (::std::auto_ptr< feats_type > p);

  // environment
  //
  typedef ::RPG_Common_Environment_XMLTree_Type environment_type;
  typedef ::xsd::cxx::tree::traits< environment_type, char > environment_traits;

  const environment_type&
  environment () const;

  environment_type&
  environment ();

  void
  environment (const environment_type& x);

  void
  environment (::std::auto_ptr< environment_type > p);

  // organizations
  //
  typedef ::RPG_Monster_Organizations_XMLTree_Type organizations_type;
  typedef ::xsd::cxx::tree::traits< organizations_type, char > organizations_traits;

  const organizations_type&
  organizations () const;

  organizations_type&
  organizations ();

  void
  organizations (const organizations_type& x);

  void
  organizations (::std::auto_ptr< organizations_type > p);

  // challengeRating
  //
  typedef ::xml_schema::unsigned_byte challengeRating_type;
  typedef ::xsd::cxx::tree::traits< challengeRating_type, char > challengeRating_traits;

  const challengeRating_type&
  challengeRating () const;

  challengeRating_type&
  challengeRating ();

  void
  challengeRating (const challengeRating_type& x);

  // treasureModifier
  //
  typedef ::xml_schema::unsigned_byte treasureModifier_type;
  typedef ::xsd::cxx::tree::traits< treasureModifier_type, char > treasureModifier_traits;

  const treasureModifier_type&
  treasureModifier () const;

  treasureModifier_type&
  treasureModifier ();

  void
  treasureModifier (const treasureModifier_type& x);

  // alignment
  //
  typedef ::RPG_Character_Alignment_XMLTree_Type alignment_type;
  typedef ::xsd::cxx::tree::traits< alignment_type, char > alignment_traits;

  const alignment_type&
  alignment () const;

  alignment_type&
  alignment ();

  void
  alignment (const alignment_type& x);

  void
  alignment (::std::auto_ptr< alignment_type > p);

  // advancements
  //
  typedef ::RPG_Monster_Advancement_XMLTree_Type advancements_type;
  typedef ::xsd::cxx::tree::optional< advancements_type > advancements_optional;
  typedef ::xsd::cxx::tree::traits< advancements_type, char > advancements_traits;

  const advancements_optional&
  advancements () const;

  advancements_optional&
  advancements ();

  void
  advancements (const advancements_type& x);

  void
  advancements (const advancements_optional& x);

  void
  advancements (::std::auto_ptr< advancements_type > p);

  // levelAdjustment
  //
  typedef ::xml_schema::unsigned_byte levelAdjustment_type;
  typedef ::xsd::cxx::tree::traits< levelAdjustment_type, char > levelAdjustment_traits;

  const levelAdjustment_type&
  levelAdjustment () const;

  levelAdjustment_type&
  levelAdjustment ();

  void
  levelAdjustment (const levelAdjustment_type& x);

  // Constructors.
  //
  RPG_Monster_PropertiesXML_XMLTree_Type (const name_type&,
                                          const size_type&,
                                          const type_type&,
                                          const hitDice_type&,
                                          const initiative_type&,
                                          const speed_type&,
                                          const armorClass_type&,
                                          const attack_type&,
                                          const space_type&,
                                          const reach_type&,
                                          const saves_type&,
                                          const attributes_type&,
                                          const environment_type&,
                                          const organizations_type&,
                                          const challengeRating_type&,
                                          const treasureModifier_type&,
                                          const alignment_type&,
                                          const levelAdjustment_type&);

  RPG_Monster_PropertiesXML_XMLTree_Type (const name_type&,
                                          ::std::auto_ptr< size_type >,
                                          ::std::auto_ptr< type_type >,
                                          ::std::auto_ptr< hitDice_type >,
                                          const initiative_type&,
                                          const speed_type&,
                                          ::std::auto_ptr< armorClass_type >,
                                          ::std::auto_ptr< attack_type >,
                                          const space_type&,
                                          const reach_type&,
                                          ::std::auto_ptr< saves_type >,
                                          ::std::auto_ptr< attributes_type >,
                                          ::std::auto_ptr< environment_type >,
                                          ::std::auto_ptr< organizations_type >,
                                          const challengeRating_type&,
                                          const treasureModifier_type&,
                                          ::std::auto_ptr< alignment_type >,
                                          const levelAdjustment_type&);

  RPG_Monster_PropertiesXML_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_PropertiesXML_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Monster_PropertiesXML_XMLTree_Type (const RPG_Monster_PropertiesXML_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Monster_PropertiesXML_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_PropertiesXML_XMLTree_Type&
  operator= (const RPG_Monster_PropertiesXML_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_PropertiesXML_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< hitDice_type > hitDice_;
  ::xsd::cxx::tree::one< initiative_type > initiative_;
  ::xsd::cxx::tree::one< speed_type > speed_;
  ::xsd::cxx::tree::one< armorClass_type > armorClass_;
  specialDefense_sequence specialDefense_;
  ::xsd::cxx::tree::one< attack_type > attack_;
  specialAttack_sequence specialAttack_;
  specialAbility_sequence specialAbility_;
  ::xsd::cxx::tree::one< space_type > space_;
  ::xsd::cxx::tree::one< reach_type > reach_;
  ::xsd::cxx::tree::one< saves_type > saves_;
  ::xsd::cxx::tree::one< attributes_type > attributes_;
  skills_optional skills_;
  feats_optional feats_;
  ::xsd::cxx::tree::one< environment_type > environment_;
  ::xsd::cxx::tree::one< organizations_type > organizations_;
  ::xsd::cxx::tree::one< challengeRating_type > challengeRating_;
  ::xsd::cxx::tree::one< treasureModifier_type > treasureModifier_;
  ::xsd::cxx::tree::one< alignment_type > alignment_;
  advancements_optional advancements_;
  ::xsd::cxx::tree::one< levelAdjustment_type > levelAdjustment_;
};

bool
operator== (const RPG_Monster_PropertiesXML_XMLTree_Type&, const RPG_Monster_PropertiesXML_XMLTree_Type&);

bool
operator!= (const RPG_Monster_PropertiesXML_XMLTree_Type&, const RPG_Monster_PropertiesXML_XMLTree_Type&);


class RPG_Monster_StateBase_XMLTree_Type: public ::RPG_Player_StateBase_XMLTree_Type
{
  public:
  // gold
  //
  typedef ::xml_schema::unsigned_int gold_type;
  typedef ::xsd::cxx::tree::traits< gold_type, char > gold_traits;

  const gold_type&
  gold () const;

  gold_type&
  gold ();

  void
  gold (const gold_type& x);

  // inventory
  //
  typedef ::RPG_Item_InventoryXML_XMLTree_Type inventory_type;
  typedef ::xsd::cxx::tree::optional< inventory_type > inventory_optional;
  typedef ::xsd::cxx::tree::traits< inventory_type, char > inventory_traits;

  const inventory_optional&
  inventory () const;

  inventory_optional&
  inventory ();

  void
  inventory (const inventory_type& x);

  void
  inventory (const inventory_optional& x);

  void
  inventory (::std::auto_ptr< inventory_type > p);

  // maxHP
  //
  typedef ::xml_schema::unsigned_short maxHP_type;
  typedef ::xsd::cxx::tree::traits< maxHP_type, char > maxHP_traits;

  const maxHP_type&
  maxHP () const;

  maxHP_type&
  maxHP ();

  void
  maxHP (const maxHP_type& x);

  // Constructors.
  //
  RPG_Monster_StateBase_XMLTree_Type (const conditions_type&,
                                      const HP_type&,
                                      const gold_type&,
                                      const maxHP_type&);

  RPG_Monster_StateBase_XMLTree_Type (::std::auto_ptr< conditions_type >,
                                      const HP_type&,
                                      const gold_type&,
                                      const maxHP_type&);

  RPG_Monster_StateBase_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Monster_StateBase_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Monster_StateBase_XMLTree_Type (const RPG_Monster_StateBase_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Monster_StateBase_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_StateBase_XMLTree_Type&
  operator= (const RPG_Monster_StateBase_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_StateBase_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< gold_type > gold_;
  inventory_optional inventory_;
  ::xsd::cxx::tree::one< maxHP_type > maxHP_;
};

bool
operator== (const RPG_Monster_StateBase_XMLTree_Type&, const RPG_Monster_StateBase_XMLTree_Type&);

bool
operator!= (const RPG_Monster_StateBase_XMLTree_Type&, const RPG_Monster_StateBase_XMLTree_Type&);


class RPG_Monster_State_XMLTree_Type: public ::RPG_Monster_StateBase_XMLTree_Type
{
  public:
  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  RPG_Monster_State_XMLTree_Type (const conditions_type&,
                                  const HP_type&,
                                  const gold_type&,
                                  const maxHP_type&,
                                  const type_type&);

  RPG_Monster_State_XMLTree_Type (::std::auto_ptr< conditions_type >,
                                  const HP_type&,
                                  const gold_type&,
                                  const maxHP_type&,
                                  const type_type&);

  RPG_Monster_State_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Monster_State_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Monster_State_XMLTree_Type (const RPG_Monster_State_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Monster_State_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_State_XMLTree_Type&
  operator= (const RPG_Monster_State_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_State_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
};

bool
operator== (const RPG_Monster_State_XMLTree_Type&, const RPG_Monster_State_XMLTree_Type&);

bool
operator!= (const RPG_Monster_State_XMLTree_Type&, const RPG_Monster_State_XMLTree_Type&);


class RPG_Monster_Spawn_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // interval
  //
  typedef ::RPG_Common_FixedPeriod_XMLTree_Type interval_type;
  typedef ::xsd::cxx::tree::traits< interval_type, char > interval_traits;

  const interval_type&
  interval () const;

  interval_type&
  interval ();

  void
  interval (const interval_type& x);

  void
  interval (::std::auto_ptr< interval_type > p);

  // probability
  //
  typedef ::xml_schema::float_ probability_type;
  typedef ::xsd::cxx::tree::traits< probability_type, char > probability_traits;

  const probability_type&
  probability () const;

  probability_type&
  probability ();

  void
  probability (const probability_type& x);

  // max_num_spawned
  //
  typedef ::xml_schema::unsigned_int max_num_spawned_type;
  typedef ::xsd::cxx::tree::traits< max_num_spawned_type, char > max_num_spawned_traits;

  const max_num_spawned_type&
  max_num_spawned () const;

  max_num_spawned_type&
  max_num_spawned ();

  void
  max_num_spawned (const max_num_spawned_type& x);

  // amble_probability
  //
  typedef ::xml_schema::float_ amble_probability_type;
  typedef ::xsd::cxx::tree::traits< amble_probability_type, char > amble_probability_traits;

  const amble_probability_type&
  amble_probability () const;

  amble_probability_type&
  amble_probability ();

  void
  amble_probability (const amble_probability_type& x);

  // Constructors.
  //
  RPG_Monster_Spawn_XMLTree_Type (const type_type&,
                                  const interval_type&,
                                  const probability_type&,
                                  const max_num_spawned_type&,
                                  const amble_probability_type&);

  RPG_Monster_Spawn_XMLTree_Type (const type_type&,
                                  ::std::auto_ptr< interval_type >,
                                  const probability_type&,
                                  const max_num_spawned_type&,
                                  const amble_probability_type&);

  RPG_Monster_Spawn_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Monster_Spawn_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Monster_Spawn_XMLTree_Type (const RPG_Monster_Spawn_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Monster_Spawn_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Spawn_XMLTree_Type&
  operator= (const RPG_Monster_Spawn_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_Spawn_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< interval_type > interval_;
  ::xsd::cxx::tree::one< probability_type > probability_;
  ::xsd::cxx::tree::one< max_num_spawned_type > max_num_spawned_;
  ::xsd::cxx::tree::one< amble_probability_type > amble_probability_;
};

bool
operator== (const RPG_Monster_Spawn_XMLTree_Type&, const RPG_Monster_Spawn_XMLTree_Type&);

bool
operator!= (const RPG_Monster_Spawn_XMLTree_Type&, const RPG_Monster_Spawn_XMLTree_Type&);


class RPG_Monster_Dictionary_XMLTree_Type: public ::xml_schema::type
{
  public:
  // monster
  //
  typedef ::RPG_Monster_PropertiesXML_XMLTree_Type monster_type;
  typedef ::xsd::cxx::tree::sequence< monster_type > monster_sequence;
  typedef monster_sequence::iterator monster_iterator;
  typedef monster_sequence::const_iterator monster_const_iterator;
  typedef ::xsd::cxx::tree::traits< monster_type, char > monster_traits;

  const monster_sequence&
  monster () const;

  monster_sequence&
  monster ();

  void
  monster (const monster_sequence& s);

  // Constructors.
  //
  RPG_Monster_Dictionary_XMLTree_Type ();

  RPG_Monster_Dictionary_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Monster_Dictionary_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Monster_Dictionary_XMLTree_Type (const RPG_Monster_Dictionary_XMLTree_Type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual RPG_Monster_Dictionary_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Monster_Dictionary_XMLTree_Type&
  operator= (const RPG_Monster_Dictionary_XMLTree_Type& x);

  virtual 
  ~RPG_Monster_Dictionary_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  monster_sequence monster_;
};

bool
operator== (const RPG_Monster_Dictionary_XMLTree_Type&, const RPG_Monster_Dictionary_XMLTree_Type&);

bool
operator!= (const RPG_Monster_Dictionary_XMLTree_Type&, const RPG_Monster_Dictionary_XMLTree_Type&);


#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Size_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_NaturalArmorClass_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialBaseProperties_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Monster_NaturalWeapon_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_NaturalWeapon_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Monster_WeaponTypeUnion_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_WeaponTypeUnion_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_DefenseAction_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_AttackAction_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Attack_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_ActionTrigger_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialAttackProperties_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SummonMonster_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_SavingThrowModifiers_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Monster_Organization_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Organization_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_OrganizationStep_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Organizations_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_AdvancementStep_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Advancement_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_PropertiesXML_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_StateBase_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_State_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Spawn_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Monster_Dictionary_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::RPG_Monster_Dictionary_XMLTree_Type >
monsterDictionary (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Size_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_NaturalArmorClass_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialBaseProperties_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_NaturalWeapon_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Monster_NaturalWeapon_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Monster_NaturalWeapon_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_WeaponTypeUnion_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Monster_WeaponTypeUnion_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Monster_WeaponTypeUnion_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_DefenseAction_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_AttackAction_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Attack_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_ActionTrigger_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialAttackProperties_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SummonMonster_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_SavingThrowModifiers_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Organization_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Monster_Organization_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Monster_Organization_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_OrganizationStep_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Organizations_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_AdvancementStep_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Advancement_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_PropertiesXML_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_StateBase_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_State_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Spawn_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Monster_Dictionary_XMLTree_Type&);

// Serialize to std::ostream.
//

void
monsterDictionary (::std::ostream& os,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
monsterDictionary (::std::ostream& os,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
monsterDictionary (::std::ostream& os,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
monsterDictionary (::xercesc::XMLFormatTarget& ft,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
monsterDictionary (::xercesc::XMLFormatTarget& ft,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
monsterDictionary (::xercesc::XMLFormatTarget& ft,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
monsterDictionary (::xercesc::DOMDocument& d,
                   const ::RPG_Monster_Dictionary_XMLTree_Type& x,
                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
monsterDictionary (const ::RPG_Monster_Dictionary_XMLTree_Type& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Size_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_NaturalArmorClass_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialPropertyTypeUnion_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialBaseProperties_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_NaturalWeapon_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_WeaponTypeUnion_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialDefensePreCondition_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_DefenseAction_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialDefenseProperties_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_AttackAction_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Attack_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_ActionTrigger_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialAttackPreCondition_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialAttackProperties_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialAbilityPreCondition_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SummonMonster_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SpecialAbilityProperties_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_SavingThrowModifiers_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Organization_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_OrganizationSlaverStep_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_OrganizationStep_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Organizations_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_AdvancementStep_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Advancement_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_PropertiesXML_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_StateBase_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_State_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Spawn_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Monster_Dictionary_XMLTree_Type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___RPG_MONSTER_XML_TREE_H
