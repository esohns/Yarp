// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include <rpg_combat_XML_parser_base.h>

// RPG_Combat_AttackForm_Type_pimpl
//

void RPG_Combat_AttackForm_Type_pimpl::
pre ()
{
}

RPG_Combat_AttackForm RPG_Combat_AttackForm_Type_pimpl::
post_RPG_Combat_AttackForm_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_AreaOfEffect_Type_pimpl
//

void RPG_Combat_AreaOfEffect_Type_pimpl::
pre ()
{
}

RPG_Combat_AreaOfEffect RPG_Combat_AreaOfEffect_Type_pimpl::
post_RPG_Combat_AreaOfEffect_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_RangedEffectUnion_Type_pimpl
//

void RPG_Combat_RangedEffectUnion_Type_pimpl::
pre ()
{
}

void RPG_Combat_RangedEffectUnion_Type_pimpl::
_characters (const ::xml_schema::ro_string& s)
{
  // TODO
  //
}

RPG_Combat_RangedEffectUnion RPG_Combat_RangedEffectUnion_Type_pimpl::
post_RPG_Combat_RangedEffectUnion_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_RangedAttackProperties_Type_pimpl
//

void RPG_Combat_RangedAttackProperties_Type_pimpl::
pre ()
{
}

void RPG_Combat_RangedAttackProperties_Type_pimpl::
maxRange (unsigned char maxRange)
{
  // TODO
  //
}

void RPG_Combat_RangedAttackProperties_Type_pimpl::
increment (unsigned char increment)
{
  // TODO
  //
}

void RPG_Combat_RangedAttackProperties_Type_pimpl::
effect (const RPG_Combat_RangedEffectUnion& effect)
{
  // TODO
  //
}

RPG_Combat_RangedAttackProperties RPG_Combat_RangedAttackProperties_Type_pimpl::
post_RPG_Combat_RangedAttackProperties_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_AttackSituation_Type_pimpl
//

void RPG_Combat_AttackSituation_Type_pimpl::
pre ()
{
}

RPG_Combat_AttackSituation RPG_Combat_AttackSituation_Type_pimpl::
post_RPG_Combat_AttackSituation_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_DefenseSituation_Type_pimpl
//

void RPG_Combat_DefenseSituation_Type_pimpl::
pre ()
{
}

RPG_Combat_DefenseSituation RPG_Combat_DefenseSituation_Type_pimpl::
post_RPG_Combat_DefenseSituation_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_SpecialAttack_Type_pimpl
//

void RPG_Combat_SpecialAttack_Type_pimpl::
pre ()
{
}

RPG_Combat_SpecialAttack RPG_Combat_SpecialAttack_Type_pimpl::
post_RPG_Combat_SpecialAttack_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_SpecialDamageType_Type_pimpl
//

void RPG_Combat_SpecialDamageType_Type_pimpl::
pre ()
{
}

RPG_Combat_SpecialDamageType RPG_Combat_SpecialDamageType_Type_pimpl::
post_RPG_Combat_SpecialDamageType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageTypeUnion_Type_pimpl
//

void RPG_Combat_DamageTypeUnion_Type_pimpl::
pre ()
{
}

void RPG_Combat_DamageTypeUnion_Type_pimpl::
_characters (const ::xml_schema::ro_string& s)
{
  // TODO
  //
}

RPG_Combat_DamageTypeUnion RPG_Combat_DamageTypeUnion_Type_pimpl::
post_RPG_Combat_DamageTypeUnion_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageDuration_Type_pimpl
//

void RPG_Combat_DamageDuration_Type_pimpl::
pre ()
{
}

void RPG_Combat_DamageDuration_Type_pimpl::
incubationPeriod (const RPG_Dice_Roll& incubationPeriod)
{
  // TODO
  //
}

void RPG_Combat_DamageDuration_Type_pimpl::
interval (unsigned short interval)
{
  // TODO
  //
}

void RPG_Combat_DamageDuration_Type_pimpl::
totalDuration (unsigned short totalDuration)
{
  // TODO
  //
}

RPG_Combat_DamageDuration RPG_Combat_DamageDuration_Type_pimpl::
post_RPG_Combat_DamageDuration_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageBonusType_Type_pimpl
//

void RPG_Combat_DamageBonusType_Type_pimpl::
pre ()
{
}

RPG_Combat_DamageBonusType RPG_Combat_DamageBonusType_Type_pimpl::
post_RPG_Combat_DamageBonusType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageBonus_Type_pimpl
//

void RPG_Combat_DamageBonus_Type_pimpl::
pre ()
{
}

void RPG_Combat_DamageBonus_Type_pimpl::
type (const RPG_Combat_DamageBonusType& type)
{
  // TODO
  //
}

void RPG_Combat_DamageBonus_Type_pimpl::
modifier (signed char modifier)
{
  // TODO
  //
}

RPG_Combat_DamageBonus RPG_Combat_DamageBonus_Type_pimpl::
post_RPG_Combat_DamageBonus_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageEffectType_Type_pimpl
//

void RPG_Combat_DamageEffectType_Type_pimpl::
pre ()
{
}

RPG_Combat_DamageEffectType RPG_Combat_DamageEffectType_Type_pimpl::
post_RPG_Combat_DamageEffectType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageCounterMeasureType_Type_pimpl
//

void RPG_Combat_DamageCounterMeasureType_Type_pimpl::
pre ()
{
}

RPG_Combat_DamageCounterMeasureType RPG_Combat_DamageCounterMeasureType_Type_pimpl::
post_RPG_Combat_DamageCounterMeasureType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_CheckTypeUnion_Type_pimpl
//

void RPG_Combat_CheckTypeUnion_Type_pimpl::
pre ()
{
}

void RPG_Combat_CheckTypeUnion_Type_pimpl::
_characters (const ::xml_schema::ro_string& s)
{
  // TODO
  //
}

RPG_Combat_CheckTypeUnion RPG_Combat_CheckTypeUnion_Type_pimpl::
post_RPG_Combat_CheckTypeUnion_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_Check_Type_pimpl
//

void RPG_Combat_Check_Type_pimpl::
pre ()
{
}

void RPG_Combat_Check_Type_pimpl::
type (const RPG_Combat_CheckTypeUnion& type)
{
  // TODO
  //
}

void RPG_Combat_Check_Type_pimpl::
attribute (const RPG_Common_Attribute& attribute)
{
  // TODO
  //
}

void RPG_Combat_Check_Type_pimpl::
difficultyClass (unsigned char difficultyClass)
{
  // TODO
  //
}

RPG_Combat_Check RPG_Combat_Check_Type_pimpl::
post_RPG_Combat_Check_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageReductionType_Type_pimpl
//

void RPG_Combat_DamageReductionType_Type_pimpl::
pre ()
{
}

RPG_Combat_DamageReductionType RPG_Combat_DamageReductionType_Type_pimpl::
post_RPG_Combat_DamageReductionType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageCounterMeasure_Type_pimpl
//

void RPG_Combat_DamageCounterMeasure_Type_pimpl::
pre ()
{
}

void RPG_Combat_DamageCounterMeasure_Type_pimpl::
type (const RPG_Combat_DamageCounterMeasureType& type)
{
  // TODO
  //
}

void RPG_Combat_DamageCounterMeasure_Type_pimpl::
check (const RPG_Combat_Check& check)
{
  // TODO
  //
}

void RPG_Combat_DamageCounterMeasure_Type_pimpl::
spell (const RPG_Magic_Spell& spell)
{
  // TODO
  //
}

void RPG_Combat_DamageCounterMeasure_Type_pimpl::
reduction (const RPG_Combat_DamageReductionType& reduction)
{
  // TODO
  //
}

RPG_Combat_DamageCounterMeasure RPG_Combat_DamageCounterMeasure_Type_pimpl::
post_RPG_Combat_DamageCounterMeasure_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_DamageElement_Type_pimpl
//

void RPG_Combat_DamageElement_Type_pimpl::
pre ()
{
}

void RPG_Combat_DamageElement_Type_pimpl::
type (const RPG_Combat_DamageTypeUnion& type)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
amount (const RPG_Dice_Roll& amount)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
secondary (const RPG_Dice_Roll& secondary)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
duration (const RPG_Combat_DamageDuration& duration)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
other (const RPG_Combat_DamageBonus& other)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
attribute (const RPG_Common_Attribute& attribute)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
counterMeasure (const RPG_Combat_DamageCounterMeasure& counterMeasure)
{
  // TODO
  //
}

void RPG_Combat_DamageElement_Type_pimpl::
effect (const RPG_Combat_DamageEffectType& effect)
{
  // TODO
  //
}

RPG_Combat_DamageElement RPG_Combat_DamageElement_Type_pimpl::
post_RPG_Combat_DamageElement_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_Damage_Type_pimpl
//

void RPG_Combat_Damage_Type_pimpl::
pre ()
{
}

void RPG_Combat_Damage_Type_pimpl::
element (const RPG_Combat_DamageElement& element)
{
  // TODO
  //
}

RPG_Combat_Damage RPG_Combat_Damage_Type_pimpl::
post_RPG_Combat_Damage_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Combat_ActionType_Type_pimpl
//

void RPG_Combat_ActionType_Type_pimpl::
pre ()
{
}

void RPG_Combat_ActionType_Type_pimpl::
post_RPG_Combat_ActionType_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
}

