// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "stdafx.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_combat_XML_tree.h"

// RPG_Combat_AttackForm_XMLTree_Type
// 

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_[v])
{
}

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const RPG_Combat_AttackForm_XMLTree_Type& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_AttackForm_XMLTree_Type& RPG_Combat_AttackForm_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_RangedEffectUnion_XMLTree_Type
// 

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_[v])
{
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const RPG_Combat_RangedEffectUnion_XMLTree_Type& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_RangedEffectUnion_XMLTree_Type& RPG_Combat_RangedEffectUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_RangedAttackProperties_XMLTree_Type
// 

const RPG_Combat_RangedAttackProperties_XMLTree_Type::maxRange_type& RPG_Combat_RangedAttackProperties_XMLTree_Type::
maxRange () const
{
  return this->maxRange_.get ();
}

RPG_Combat_RangedAttackProperties_XMLTree_Type::maxRange_type& RPG_Combat_RangedAttackProperties_XMLTree_Type::
maxRange ()
{
  return this->maxRange_.get ();
}

void RPG_Combat_RangedAttackProperties_XMLTree_Type::
maxRange (const maxRange_type& x)
{
  this->maxRange_.set (x);
}

const RPG_Combat_RangedAttackProperties_XMLTree_Type::increment_optional& RPG_Combat_RangedAttackProperties_XMLTree_Type::
increment () const
{
  return this->increment_;
}

RPG_Combat_RangedAttackProperties_XMLTree_Type::increment_optional& RPG_Combat_RangedAttackProperties_XMLTree_Type::
increment ()
{
  return this->increment_;
}

void RPG_Combat_RangedAttackProperties_XMLTree_Type::
increment (const increment_type& x)
{
  this->increment_.set (x);
}

void RPG_Combat_RangedAttackProperties_XMLTree_Type::
increment (const increment_optional& x)
{
  this->increment_ = x;
}

const RPG_Combat_RangedAttackProperties_XMLTree_Type::effect_type& RPG_Combat_RangedAttackProperties_XMLTree_Type::
effect () const
{
  return this->effect_.get ();
}

RPG_Combat_RangedAttackProperties_XMLTree_Type::effect_type& RPG_Combat_RangedAttackProperties_XMLTree_Type::
effect ()
{
  return this->effect_.get ();
}

void RPG_Combat_RangedAttackProperties_XMLTree_Type::
effect (const effect_type& x)
{
  this->effect_.set (x);
}

void RPG_Combat_RangedAttackProperties_XMLTree_Type::
effect (::std::auto_ptr< effect_type > x)
{
  this->effect_.set (x);
}

const RPG_Combat_RangedAttackProperties_XMLTree_Type::effect_type& RPG_Combat_RangedAttackProperties_XMLTree_Type::
effect_default_value ()
{
  return effect_default_value_;
}


// RPG_Combat_AttackSituation_XMLTree_Type
// 

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_[v])
{
}

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const RPG_Combat_AttackSituation_XMLTree_Type& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_AttackSituation_XMLTree_Type& RPG_Combat_AttackSituation_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_DefenseSituation_XMLTree_Type
// 

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_[v])
{
}

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const RPG_Combat_DefenseSituation_XMLTree_Type& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_DefenseSituation_XMLTree_Type& RPG_Combat_DefenseSituation_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_SpecialAttack_XMLTree_Type
// 

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_[v])
{
}

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const RPG_Combat_SpecialAttack_XMLTree_Type& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_SpecialAttack_XMLTree_Type& RPG_Combat_SpecialAttack_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_SpecialDamageType_XMLTree_Type
// 

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_[v])
{
}

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const RPG_Combat_SpecialDamageType_XMLTree_Type& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_SpecialDamageType_XMLTree_Type& RPG_Combat_SpecialDamageType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_DamageTypeUnion_XMLTree_Type
// 

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_[v])
{
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const RPG_Combat_DamageTypeUnion_XMLTree_Type& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_DamageTypeUnion_XMLTree_Type& RPG_Combat_DamageTypeUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_DamageDuration_XMLTree_Type
// 

const RPG_Combat_DamageDuration_XMLTree_Type::incubationPeriod_optional& RPG_Combat_DamageDuration_XMLTree_Type::
incubationPeriod () const
{
  return this->incubationPeriod_;
}

RPG_Combat_DamageDuration_XMLTree_Type::incubationPeriod_optional& RPG_Combat_DamageDuration_XMLTree_Type::
incubationPeriod ()
{
  return this->incubationPeriod_;
}

void RPG_Combat_DamageDuration_XMLTree_Type::
incubationPeriod (const incubationPeriod_type& x)
{
  this->incubationPeriod_.set (x);
}

void RPG_Combat_DamageDuration_XMLTree_Type::
incubationPeriod (const incubationPeriod_optional& x)
{
  this->incubationPeriod_ = x;
}

void RPG_Combat_DamageDuration_XMLTree_Type::
incubationPeriod (::std::auto_ptr< incubationPeriod_type > x)
{
  this->incubationPeriod_.set (x);
}

const RPG_Combat_DamageDuration_XMLTree_Type::totalPeriod_optional& RPG_Combat_DamageDuration_XMLTree_Type::
totalPeriod () const
{
  return this->totalPeriod_;
}

RPG_Combat_DamageDuration_XMLTree_Type::totalPeriod_optional& RPG_Combat_DamageDuration_XMLTree_Type::
totalPeriod ()
{
  return this->totalPeriod_;
}

void RPG_Combat_DamageDuration_XMLTree_Type::
totalPeriod (const totalPeriod_type& x)
{
  this->totalPeriod_.set (x);
}

void RPG_Combat_DamageDuration_XMLTree_Type::
totalPeriod (const totalPeriod_optional& x)
{
  this->totalPeriod_ = x;
}

void RPG_Combat_DamageDuration_XMLTree_Type::
totalPeriod (::std::auto_ptr< totalPeriod_type > x)
{
  this->totalPeriod_.set (x);
}

const RPG_Combat_DamageDuration_XMLTree_Type::interval_optional& RPG_Combat_DamageDuration_XMLTree_Type::
interval () const
{
  return this->interval_;
}

RPG_Combat_DamageDuration_XMLTree_Type::interval_optional& RPG_Combat_DamageDuration_XMLTree_Type::
interval ()
{
  return this->interval_;
}

void RPG_Combat_DamageDuration_XMLTree_Type::
interval (const interval_type& x)
{
  this->interval_.set (x);
}

void RPG_Combat_DamageDuration_XMLTree_Type::
interval (const interval_optional& x)
{
  this->interval_ = x;
}

const RPG_Combat_DamageDuration_XMLTree_Type::totalDuration_optional& RPG_Combat_DamageDuration_XMLTree_Type::
totalDuration () const
{
  return this->totalDuration_;
}

RPG_Combat_DamageDuration_XMLTree_Type::totalDuration_optional& RPG_Combat_DamageDuration_XMLTree_Type::
totalDuration ()
{
  return this->totalDuration_;
}

void RPG_Combat_DamageDuration_XMLTree_Type::
totalDuration (const totalDuration_type& x)
{
  this->totalDuration_.set (x);
}

void RPG_Combat_DamageDuration_XMLTree_Type::
totalDuration (const totalDuration_optional& x)
{
  this->totalDuration_ = x;
}

const RPG_Combat_DamageDuration_XMLTree_Type::vicinity_type& RPG_Combat_DamageDuration_XMLTree_Type::
vicinity () const
{
  return this->vicinity_.get ();
}

RPG_Combat_DamageDuration_XMLTree_Type::vicinity_type& RPG_Combat_DamageDuration_XMLTree_Type::
vicinity ()
{
  return this->vicinity_.get ();
}

void RPG_Combat_DamageDuration_XMLTree_Type::
vicinity (const vicinity_type& x)
{
  this->vicinity_.set (x);
}

RPG_Combat_DamageDuration_XMLTree_Type::vicinity_type RPG_Combat_DamageDuration_XMLTree_Type::
vicinity_default_value ()
{
  return vicinity_type (false);
}


// RPG_Combat_CheckTypeUnion_XMLTree_Type
// 

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_[v])
{
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const RPG_Combat_CheckTypeUnion_XMLTree_Type& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_CheckTypeUnion_XMLTree_Type& RPG_Combat_CheckTypeUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_Check_XMLTree_Type
// 

const RPG_Combat_Check_XMLTree_Type::type_type& RPG_Combat_Check_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Combat_Check_XMLTree_Type::type_type& RPG_Combat_Check_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Combat_Check_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Combat_Check_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Combat_Check_XMLTree_Type::attribute_optional& RPG_Combat_Check_XMLTree_Type::
attribute () const
{
  return this->attribute_;
}

RPG_Combat_Check_XMLTree_Type::attribute_optional& RPG_Combat_Check_XMLTree_Type::
attribute ()
{
  return this->attribute_;
}

void RPG_Combat_Check_XMLTree_Type::
attribute (const attribute_type& x)
{
  this->attribute_.set (x);
}

void RPG_Combat_Check_XMLTree_Type::
attribute (const attribute_optional& x)
{
  this->attribute_ = x;
}

void RPG_Combat_Check_XMLTree_Type::
attribute (::std::auto_ptr< attribute_type > x)
{
  this->attribute_.set (x);
}

const RPG_Combat_Check_XMLTree_Type::difficultyClass_optional& RPG_Combat_Check_XMLTree_Type::
difficultyClass () const
{
  return this->difficultyClass_;
}

RPG_Combat_Check_XMLTree_Type::difficultyClass_optional& RPG_Combat_Check_XMLTree_Type::
difficultyClass ()
{
  return this->difficultyClass_;
}

void RPG_Combat_Check_XMLTree_Type::
difficultyClass (const difficultyClass_type& x)
{
  this->difficultyClass_.set (x);
}

void RPG_Combat_Check_XMLTree_Type::
difficultyClass (const difficultyClass_optional& x)
{
  this->difficultyClass_ = x;
}


// RPG_Combat_DamageReductionType_XMLTree_Type
// 

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_[v])
{
}

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const RPG_Combat_DamageReductionType_XMLTree_Type& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_DamageReductionType_XMLTree_Type& RPG_Combat_DamageReductionType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_DamageCounterMeasure_XMLTree_Type
// 

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::type_type& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::type_type& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::check_optional& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
check () const
{
  return this->check_;
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::check_optional& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
check ()
{
  return this->check_;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
check (const check_type& x)
{
  this->check_.set (x);
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
check (const check_optional& x)
{
  this->check_ = x;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
check (::std::auto_ptr< check_type > x)
{
  this->check_.set (x);
}

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::spell_sequence& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
spell () const
{
  return this->spell_;
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::spell_sequence& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
spell ()
{
  return this->spell_;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
spell (const spell_sequence& s)
{
  this->spell_ = s;
}

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::duration_optional& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
duration () const
{
  return this->duration_;
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::duration_optional& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
duration ()
{
  return this->duration_;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
duration (const duration_type& x)
{
  this->duration_.set (x);
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
duration (const duration_optional& x)
{
  this->duration_ = x;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
duration (::std::auto_ptr< duration_type > x)
{
  this->duration_.set (x);
}

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::condition_optional& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
condition () const
{
  return this->condition_;
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::condition_optional& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
condition ()
{
  return this->condition_;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
condition (const condition_type& x)
{
  this->condition_.set (x);
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
condition (const condition_optional& x)
{
  this->condition_ = x;
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
condition (::std::auto_ptr< condition_type > x)
{
  this->condition_.set (x);
}

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::reduction_type& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
reduction () const
{
  return this->reduction_.get ();
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::reduction_type& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
reduction ()
{
  return this->reduction_.get ();
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
reduction (const reduction_type& x)
{
  this->reduction_.set (x);
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
reduction (::std::auto_ptr< reduction_type > x)
{
  this->reduction_.set (x);
}

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::reduction_type& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
reduction_default_value ()
{
  return reduction_default_value_;
}


// RPG_Combat_OtherDamageType_XMLTree_Type
// 

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_[v])
{
}

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const RPG_Combat_OtherDamageType_XMLTree_Type& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Combat_OtherDamageType_XMLTree_Type& RPG_Combat_OtherDamageType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Combat_OtherDamage_XMLTree_Type
// 

const RPG_Combat_OtherDamage_XMLTree_Type::type_type& RPG_Combat_OtherDamage_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Combat_OtherDamage_XMLTree_Type::type_type& RPG_Combat_OtherDamage_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Combat_OtherDamage_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Combat_OtherDamage_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Combat_OtherDamage_XMLTree_Type::modifier_optional& RPG_Combat_OtherDamage_XMLTree_Type::
modifier () const
{
  return this->modifier_;
}

RPG_Combat_OtherDamage_XMLTree_Type::modifier_optional& RPG_Combat_OtherDamage_XMLTree_Type::
modifier ()
{
  return this->modifier_;
}

void RPG_Combat_OtherDamage_XMLTree_Type::
modifier (const modifier_type& x)
{
  this->modifier_.set (x);
}

void RPG_Combat_OtherDamage_XMLTree_Type::
modifier (const modifier_optional& x)
{
  this->modifier_ = x;
}

const RPG_Combat_OtherDamage_XMLTree_Type::counterMeasure_sequence& RPG_Combat_OtherDamage_XMLTree_Type::
counterMeasure () const
{
  return this->counterMeasure_;
}

RPG_Combat_OtherDamage_XMLTree_Type::counterMeasure_sequence& RPG_Combat_OtherDamage_XMLTree_Type::
counterMeasure ()
{
  return this->counterMeasure_;
}

void RPG_Combat_OtherDamage_XMLTree_Type::
counterMeasure (const counterMeasure_sequence& s)
{
  this->counterMeasure_ = s;
}


// RPG_Combat_DamageElement_XMLTree_Type
// 

const RPG_Combat_DamageElement_XMLTree_Type::type_sequence& RPG_Combat_DamageElement_XMLTree_Type::
type () const
{
  return this->type_;
}

RPG_Combat_DamageElement_XMLTree_Type::type_sequence& RPG_Combat_DamageElement_XMLTree_Type::
type ()
{
  return this->type_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
type (const type_sequence& s)
{
  this->type_ = s;
}

const RPG_Combat_DamageElement_XMLTree_Type::amount_optional& RPG_Combat_DamageElement_XMLTree_Type::
amount () const
{
  return this->amount_;
}

RPG_Combat_DamageElement_XMLTree_Type::amount_optional& RPG_Combat_DamageElement_XMLTree_Type::
amount ()
{
  return this->amount_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
amount (const amount_type& x)
{
  this->amount_.set (x);
}

void RPG_Combat_DamageElement_XMLTree_Type::
amount (const amount_optional& x)
{
  this->amount_ = x;
}

void RPG_Combat_DamageElement_XMLTree_Type::
amount (::std::auto_ptr< amount_type > x)
{
  this->amount_.set (x);
}

const RPG_Combat_DamageElement_XMLTree_Type::secondary_optional& RPG_Combat_DamageElement_XMLTree_Type::
secondary () const
{
  return this->secondary_;
}

RPG_Combat_DamageElement_XMLTree_Type::secondary_optional& RPG_Combat_DamageElement_XMLTree_Type::
secondary ()
{
  return this->secondary_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
secondary (const secondary_type& x)
{
  this->secondary_.set (x);
}

void RPG_Combat_DamageElement_XMLTree_Type::
secondary (const secondary_optional& x)
{
  this->secondary_ = x;
}

void RPG_Combat_DamageElement_XMLTree_Type::
secondary (::std::auto_ptr< secondary_type > x)
{
  this->secondary_.set (x);
}

const RPG_Combat_DamageElement_XMLTree_Type::attribute_optional& RPG_Combat_DamageElement_XMLTree_Type::
attribute () const
{
  return this->attribute_;
}

RPG_Combat_DamageElement_XMLTree_Type::attribute_optional& RPG_Combat_DamageElement_XMLTree_Type::
attribute ()
{
  return this->attribute_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
attribute (const attribute_type& x)
{
  this->attribute_.set (x);
}

void RPG_Combat_DamageElement_XMLTree_Type::
attribute (const attribute_optional& x)
{
  this->attribute_ = x;
}

void RPG_Combat_DamageElement_XMLTree_Type::
attribute (::std::auto_ptr< attribute_type > x)
{
  this->attribute_.set (x);
}

const RPG_Combat_DamageElement_XMLTree_Type::condition_optional& RPG_Combat_DamageElement_XMLTree_Type::
condition () const
{
  return this->condition_;
}

RPG_Combat_DamageElement_XMLTree_Type::condition_optional& RPG_Combat_DamageElement_XMLTree_Type::
condition ()
{
  return this->condition_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
condition (const condition_type& x)
{
  this->condition_.set (x);
}

void RPG_Combat_DamageElement_XMLTree_Type::
condition (const condition_optional& x)
{
  this->condition_ = x;
}

void RPG_Combat_DamageElement_XMLTree_Type::
condition (::std::auto_ptr< condition_type > x)
{
  this->condition_.set (x);
}

const RPG_Combat_DamageElement_XMLTree_Type::duration_optional& RPG_Combat_DamageElement_XMLTree_Type::
duration () const
{
  return this->duration_;
}

RPG_Combat_DamageElement_XMLTree_Type::duration_optional& RPG_Combat_DamageElement_XMLTree_Type::
duration ()
{
  return this->duration_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
duration (const duration_type& x)
{
  this->duration_.set (x);
}

void RPG_Combat_DamageElement_XMLTree_Type::
duration (const duration_optional& x)
{
  this->duration_ = x;
}

void RPG_Combat_DamageElement_XMLTree_Type::
duration (::std::auto_ptr< duration_type > x)
{
  this->duration_.set (x);
}

const RPG_Combat_DamageElement_XMLTree_Type::counterMeasure_sequence& RPG_Combat_DamageElement_XMLTree_Type::
counterMeasure () const
{
  return this->counterMeasure_;
}

RPG_Combat_DamageElement_XMLTree_Type::counterMeasure_sequence& RPG_Combat_DamageElement_XMLTree_Type::
counterMeasure ()
{
  return this->counterMeasure_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
counterMeasure (const counterMeasure_sequence& s)
{
  this->counterMeasure_ = s;
}

const RPG_Combat_DamageElement_XMLTree_Type::other_sequence& RPG_Combat_DamageElement_XMLTree_Type::
other () const
{
  return this->other_;
}

RPG_Combat_DamageElement_XMLTree_Type::other_sequence& RPG_Combat_DamageElement_XMLTree_Type::
other ()
{
  return this->other_;
}

void RPG_Combat_DamageElement_XMLTree_Type::
other (const other_sequence& s)
{
  this->other_ = s;
}

const RPG_Combat_DamageElement_XMLTree_Type::effect_type& RPG_Combat_DamageElement_XMLTree_Type::
effect () const
{
  return this->effect_.get ();
}

RPG_Combat_DamageElement_XMLTree_Type::effect_type& RPG_Combat_DamageElement_XMLTree_Type::
effect ()
{
  return this->effect_.get ();
}

void RPG_Combat_DamageElement_XMLTree_Type::
effect (const effect_type& x)
{
  this->effect_.set (x);
}

void RPG_Combat_DamageElement_XMLTree_Type::
effect (::std::auto_ptr< effect_type > x)
{
  this->effect_.set (x);
}

const RPG_Combat_DamageElement_XMLTree_Type::effect_type& RPG_Combat_DamageElement_XMLTree_Type::
effect_default_value ()
{
  return effect_default_value_;
}


// RPG_Combat_Damage_XMLTree_Type
// 

const RPG_Combat_Damage_XMLTree_Type::element_sequence& RPG_Combat_Damage_XMLTree_Type::
element () const
{
  return this->element_;
}

RPG_Combat_Damage_XMLTree_Type::element_sequence& RPG_Combat_Damage_XMLTree_Type::
element ()
{
  return this->element_;
}

void RPG_Combat_Damage_XMLTree_Type::
element (const element_sequence& s)
{
  this->element_ = s;
}

const RPG_Combat_Damage_XMLTree_Type::elementsAreInclusive_type& RPG_Combat_Damage_XMLTree_Type::
elementsAreInclusive () const
{
  return this->elementsAreInclusive_.get ();
}

RPG_Combat_Damage_XMLTree_Type::elementsAreInclusive_type& RPG_Combat_Damage_XMLTree_Type::
elementsAreInclusive ()
{
  return this->elementsAreInclusive_.get ();
}

void RPG_Combat_Damage_XMLTree_Type::
elementsAreInclusive (const elementsAreInclusive_type& x)
{
  this->elementsAreInclusive_.set (x);
}

RPG_Combat_Damage_XMLTree_Type::elementsAreInclusive_type RPG_Combat_Damage_XMLTree_Type::
elementsAreInclusive_default_value ()
{
  return elementsAreInclusive_type (true);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Combat_AttackForm_XMLTree_Type
//

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_AttackForm_XMLTree_Type_convert ();
}

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_AttackForm_XMLTree_Type_convert ();
}

RPG_Combat_AttackForm_XMLTree_Type::
RPG_Combat_AttackForm_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_AttackForm_XMLTree_Type_convert ();
}

RPG_Combat_AttackForm_XMLTree_Type* RPG_Combat_AttackForm_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_AttackForm_XMLTree_Type (*this, f, c);
}

RPG_Combat_AttackForm_XMLTree_Type::value RPG_Combat_AttackForm_XMLTree_Type::
_xsd_RPG_Combat_AttackForm_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_AttackForm_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_AttackForm_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_AttackForm_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_AttackForm_XMLTree_Type::
_xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_[3] =
{
  "ATTACKFORM_MELEE",
  "ATTACKFORM_TOUCH",
  "ATTACKFORM_RANGED"
};

const RPG_Combat_AttackForm_XMLTree_Type::value RPG_Combat_AttackForm_XMLTree_Type::
_xsd_RPG_Combat_AttackForm_XMLTree_Type_indexes_[3] =
{
  ::RPG_Combat_AttackForm_XMLTree_Type::ATTACKFORM_MELEE,
  ::RPG_Combat_AttackForm_XMLTree_Type::ATTACKFORM_RANGED,
  ::RPG_Combat_AttackForm_XMLTree_Type::ATTACKFORM_TOUCH
};

// RPG_Combat_RangedEffectUnion_XMLTree_Type
//

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_convert ();
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_convert ();
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::
RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_convert ();
}

RPG_Combat_RangedEffectUnion_XMLTree_Type* RPG_Combat_RangedEffectUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_RangedEffectUnion_XMLTree_Type (*this, f, c);
}

RPG_Combat_RangedEffectUnion_XMLTree_Type::value RPG_Combat_RangedEffectUnion_XMLTree_Type::
_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_indexes_ + 17,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_indexes_ + 17 || _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_RangedEffectUnion_XMLTree_Type::
_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_[17] =
{
  "SIZE_FINE",
  "SIZE_DIMINUTIVE",
  "SIZE_TINY",
  "SIZE_SMALL",
  "SIZE_MEDIUM",
  "SIZE_LARGE",
  "SIZE_HUGE",
  "SIZE_GARGANTUAN",
  "SIZE_COLOSSAL",
  "AREA_CONE",
  "AREA_CUBE",
  "AREA_CYLINDER",
  "AREA_LINE_HORIZONTAL",
  "AREA_LINE_VERTICAL",
  "AREA_RING",
  "AREA_SPHERE",
  "AREA_WALL"
};

const RPG_Combat_RangedEffectUnion_XMLTree_Type::value RPG_Combat_RangedEffectUnion_XMLTree_Type::
_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_indexes_[17] =
{
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_CONE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_CUBE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_CYLINDER,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_LINE_HORIZONTAL,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_LINE_VERTICAL,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_RING,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_SPHERE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::AREA_WALL,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_COLOSSAL,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_DIMINUTIVE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_FINE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_GARGANTUAN,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_HUGE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_LARGE,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_MEDIUM,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_SMALL,
  ::RPG_Combat_RangedEffectUnion_XMLTree_Type::SIZE_TINY
};

// RPG_Combat_RangedAttackProperties_XMLTree_Type
//

const RPG_Combat_RangedAttackProperties_XMLTree_Type::effect_type RPG_Combat_RangedAttackProperties_XMLTree_Type::effect_default_value_ (
  "AREA_LINE_HORIZONTAL");

RPG_Combat_RangedAttackProperties_XMLTree_Type::
RPG_Combat_RangedAttackProperties_XMLTree_Type (const maxRange_type& maxRange)
: ::xml_schema::type (),
  maxRange_ (maxRange, this),
  increment_ (this),
  effect_ (effect_default_value (), this)
{
}

RPG_Combat_RangedAttackProperties_XMLTree_Type::
RPG_Combat_RangedAttackProperties_XMLTree_Type (const RPG_Combat_RangedAttackProperties_XMLTree_Type& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  maxRange_ (x.maxRange_, f, this),
  increment_ (x.increment_, f, this),
  effect_ (x.effect_, f, this)
{
}

RPG_Combat_RangedAttackProperties_XMLTree_Type::
RPG_Combat_RangedAttackProperties_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  maxRange_ (this),
  increment_ (this),
  effect_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RPG_Combat_RangedAttackProperties_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // maxRange
    //
    if (n.name () == "maxRange" && n.namespace_ () == "urn:rpg")
    {
      if (!maxRange_.present ())
      {
        this->maxRange_.set (maxRange_traits::create (i, f, this));
        continue;
      }
    }

    // increment
    //
    if (n.name () == "increment" && n.namespace_ () == "urn:rpg")
    {
      if (!this->increment_)
      {
        this->increment_.set (increment_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!maxRange_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxRange",
      "urn:rpg");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "effect" && n.namespace_ ().empty ())
    {
      this->effect_.set (effect_traits::create (i, f, this));
      continue;
    }
  }

  if (!effect_.present ())
  {
    this->effect_.set (effect_default_value ());
  }
}

RPG_Combat_RangedAttackProperties_XMLTree_Type* RPG_Combat_RangedAttackProperties_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_RangedAttackProperties_XMLTree_Type (*this, f, c);
}

RPG_Combat_RangedAttackProperties_XMLTree_Type& RPG_Combat_RangedAttackProperties_XMLTree_Type::
operator= (const RPG_Combat_RangedAttackProperties_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->maxRange_ = x.maxRange_;
    this->increment_ = x.increment_;
    this->effect_ = x.effect_;
  }

  return *this;
}

RPG_Combat_RangedAttackProperties_XMLTree_Type::
~RPG_Combat_RangedAttackProperties_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_RangedAttackProperties_XMLTree_Type& x, const RPG_Combat_RangedAttackProperties_XMLTree_Type& y)
{
  if (!(x.maxRange () == y.maxRange ()))
    return false;

  if (!(x.increment () == y.increment ()))
    return false;

  if (!(x.effect () == y.effect ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_RangedAttackProperties_XMLTree_Type& x, const RPG_Combat_RangedAttackProperties_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Combat_AttackSituation_XMLTree_Type
//

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_AttackSituation_XMLTree_Type_convert ();
}

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_AttackSituation_XMLTree_Type_convert ();
}

RPG_Combat_AttackSituation_XMLTree_Type::
RPG_Combat_AttackSituation_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_AttackSituation_XMLTree_Type_convert ();
}

RPG_Combat_AttackSituation_XMLTree_Type* RPG_Combat_AttackSituation_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_AttackSituation_XMLTree_Type (*this, f, c);
}

RPG_Combat_AttackSituation_XMLTree_Type::value RPG_Combat_AttackSituation_XMLTree_Type::
_xsd_RPG_Combat_AttackSituation_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_AttackSituation_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_AttackSituation_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_AttackSituation_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_AttackSituation_XMLTree_Type::
_xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_[3] =
{
  "ATTACK_NORMAL",
  "ATTACK_BACKSTAB",
  "ATTACK_SURPRISE"
};

const RPG_Combat_AttackSituation_XMLTree_Type::value RPG_Combat_AttackSituation_XMLTree_Type::
_xsd_RPG_Combat_AttackSituation_XMLTree_Type_indexes_[3] =
{
  ::RPG_Combat_AttackSituation_XMLTree_Type::ATTACK_BACKSTAB,
  ::RPG_Combat_AttackSituation_XMLTree_Type::ATTACK_NORMAL,
  ::RPG_Combat_AttackSituation_XMLTree_Type::ATTACK_SURPRISE
};

// RPG_Combat_DefenseSituation_XMLTree_Type
//

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_convert ();
}

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_convert ();
}

RPG_Combat_DefenseSituation_XMLTree_Type::
RPG_Combat_DefenseSituation_XMLTree_Type (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_convert ();
}

RPG_Combat_DefenseSituation_XMLTree_Type* RPG_Combat_DefenseSituation_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_DefenseSituation_XMLTree_Type (*this, f, c);
}

RPG_Combat_DefenseSituation_XMLTree_Type::value RPG_Combat_DefenseSituation_XMLTree_Type::
_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_DefenseSituation_XMLTree_Type::
_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_[3] =
{
  "DEFENSE_NORMAL",
  "DEFENSE_TOUCH",
  "DEFENSE_FLATFOOTED"
};

const RPG_Combat_DefenseSituation_XMLTree_Type::value RPG_Combat_DefenseSituation_XMLTree_Type::
_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_indexes_[3] =
{
  ::RPG_Combat_DefenseSituation_XMLTree_Type::DEFENSE_FLATFOOTED,
  ::RPG_Combat_DefenseSituation_XMLTree_Type::DEFENSE_NORMAL,
  ::RPG_Combat_DefenseSituation_XMLTree_Type::DEFENSE_TOUCH
};

// RPG_Combat_SpecialAttack_XMLTree_Type
//

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_convert ();
}

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_convert ();
}

RPG_Combat_SpecialAttack_XMLTree_Type::
RPG_Combat_SpecialAttack_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_convert ();
}

RPG_Combat_SpecialAttack_XMLTree_Type* RPG_Combat_SpecialAttack_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_SpecialAttack_XMLTree_Type (*this, f, c);
}

RPG_Combat_SpecialAttack_XMLTree_Type::value RPG_Combat_SpecialAttack_XMLTree_Type::
_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_indexes_ + 2 || _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_SpecialAttack_XMLTree_Type::
_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_[2] =
{
  "SPECIALATTACK_INCORPOREAL_TOUCH",
  "SPECIALATTACK_SMITE"
};

const RPG_Combat_SpecialAttack_XMLTree_Type::value RPG_Combat_SpecialAttack_XMLTree_Type::
_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_indexes_[2] =
{
  ::RPG_Combat_SpecialAttack_XMLTree_Type::SPECIALATTACK_INCORPOREAL_TOUCH,
  ::RPG_Combat_SpecialAttack_XMLTree_Type::SPECIALATTACK_SMITE
};

// RPG_Combat_SpecialDamageType_XMLTree_Type
//

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_convert ();
}

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_convert ();
}

RPG_Combat_SpecialDamageType_XMLTree_Type::
RPG_Combat_SpecialDamageType_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_convert ();
}

RPG_Combat_SpecialDamageType_XMLTree_Type* RPG_Combat_SpecialDamageType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_SpecialDamageType_XMLTree_Type (*this, f, c);
}

RPG_Combat_SpecialDamageType_XMLTree_Type::value RPG_Combat_SpecialDamageType_XMLTree_Type::
_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_indexes_ + 16,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_indexes_ + 16 || _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_SpecialDamageType_XMLTree_Type::
_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_[16] =
{
  "DAMAGE_ABILITY_DRAIN",
  "DAMAGE_ABILITY_LOSS",
  "DAMAGE_ABILITY_REDUCTION",
  "DAMAGE_ACID",
  "DAMAGE_COLD",
  "DAMAGE_ELECTRICITY",
  "DAMAGE_FIRE",
  "DAMAGE_LEVEL_DRAIN",
  "DAMAGE_LEVEL_LOSS",
  "DAMAGE_MAGIC",
  "DAMAGE_PETRIFY",
  "DAMAGE_PARALYZE",
  "DAMAGE_POISON",
  "DAMAGE_SLAY",
  "DAMAGE_SONIC",
  "DAMAGE_STUN"
};

const RPG_Combat_SpecialDamageType_XMLTree_Type::value RPG_Combat_SpecialDamageType_XMLTree_Type::
_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_indexes_[16] =
{
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_ABILITY_DRAIN,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_ABILITY_LOSS,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_ABILITY_REDUCTION,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_ACID,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_COLD,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_ELECTRICITY,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_FIRE,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_LEVEL_DRAIN,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_LEVEL_LOSS,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_MAGIC,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_PARALYZE,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_PETRIFY,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_POISON,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_SLAY,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_SONIC,
  ::RPG_Combat_SpecialDamageType_XMLTree_Type::DAMAGE_STUN
};

// RPG_Combat_DamageTypeUnion_XMLTree_Type
//

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_convert ();
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_convert ();
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::
RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_convert ();
}

RPG_Combat_DamageTypeUnion_XMLTree_Type* RPG_Combat_DamageTypeUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_DamageTypeUnion_XMLTree_Type (*this, f, c);
}

RPG_Combat_DamageTypeUnion_XMLTree_Type::value RPG_Combat_DamageTypeUnion_XMLTree_Type::
_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_indexes_ + 22,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_indexes_ + 22 || _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_DamageTypeUnion_XMLTree_Type::
_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_[22] =
{
  "PHYSICALDAMAGE_NONE",
  "PHYSICALDAMAGE_BLUDGEONING",
  "PHYSICALDAMAGE_PIERCING",
  "PHYSICALDAMAGE_SLASHING",
  "PHYSICALDAMAGE_CRUSHING",
  "PHYSICALDAMAGE_WITHERING",
  "DAMAGE_ABILITY_DRAIN",
  "DAMAGE_ABILITY_LOSS",
  "DAMAGE_ABILITY_REDUCTION",
  "DAMAGE_ACID",
  "DAMAGE_COLD",
  "DAMAGE_ELECTRICITY",
  "DAMAGE_FIRE",
  "DAMAGE_LEVEL_DRAIN",
  "DAMAGE_LEVEL_LOSS",
  "DAMAGE_MAGIC",
  "DAMAGE_PETRIFY",
  "DAMAGE_PARALYZE",
  "DAMAGE_POISON",
  "DAMAGE_SLAY",
  "DAMAGE_SONIC",
  "DAMAGE_STUN"
};

const RPG_Combat_DamageTypeUnion_XMLTree_Type::value RPG_Combat_DamageTypeUnion_XMLTree_Type::
_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_indexes_[22] =
{
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_ABILITY_DRAIN,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_ABILITY_LOSS,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_ABILITY_REDUCTION,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_ACID,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_COLD,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_ELECTRICITY,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_FIRE,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_LEVEL_DRAIN,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_LEVEL_LOSS,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_MAGIC,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_PARALYZE,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_PETRIFY,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_POISON,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_SLAY,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_SONIC,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::DAMAGE_STUN,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::PHYSICALDAMAGE_BLUDGEONING,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::PHYSICALDAMAGE_CRUSHING,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::PHYSICALDAMAGE_NONE,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::PHYSICALDAMAGE_PIERCING,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::PHYSICALDAMAGE_SLASHING,
  ::RPG_Combat_DamageTypeUnion_XMLTree_Type::PHYSICALDAMAGE_WITHERING
};

// RPG_Combat_DamageDuration_XMLTree_Type
//

RPG_Combat_DamageDuration_XMLTree_Type::
RPG_Combat_DamageDuration_XMLTree_Type ()
: ::xml_schema::type (),
  incubationPeriod_ (this),
  totalPeriod_ (this),
  interval_ (this),
  totalDuration_ (this),
  vicinity_ (vicinity_default_value (), this)
{
}

RPG_Combat_DamageDuration_XMLTree_Type::
RPG_Combat_DamageDuration_XMLTree_Type (const RPG_Combat_DamageDuration_XMLTree_Type& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  incubationPeriod_ (x.incubationPeriod_, f, this),
  totalPeriod_ (x.totalPeriod_, f, this),
  interval_ (x.interval_, f, this),
  totalDuration_ (x.totalDuration_, f, this),
  vicinity_ (x.vicinity_, f, this)
{
}

RPG_Combat_DamageDuration_XMLTree_Type::
RPG_Combat_DamageDuration_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  incubationPeriod_ (this),
  totalPeriod_ (this),
  interval_ (this),
  totalDuration_ (this),
  vicinity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RPG_Combat_DamageDuration_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // incubationPeriod
    //
    if (n.name () == "incubationPeriod" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< incubationPeriod_type > r (
        incubationPeriod_traits::create (i, f, this));

      if (!this->incubationPeriod_)
      {
        this->incubationPeriod_.set (r);
        continue;
      }
    }

    // totalPeriod
    //
    if (n.name () == "totalPeriod" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< totalPeriod_type > r (
        totalPeriod_traits::create (i, f, this));

      if (!this->totalPeriod_)
      {
        this->totalPeriod_.set (r);
        continue;
      }
    }

    // interval
    //
    if (n.name () == "interval" && n.namespace_ () == "urn:rpg")
    {
      if (!this->interval_)
      {
        this->interval_.set (interval_traits::create (i, f, this));
        continue;
      }
    }

    // totalDuration
    //
    if (n.name () == "totalDuration" && n.namespace_ () == "urn:rpg")
    {
      if (!this->totalDuration_)
      {
        this->totalDuration_.set (totalDuration_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "vicinity" && n.namespace_ ().empty ())
    {
      this->vicinity_.set (vicinity_traits::create (i, f, this));
      continue;
    }
  }

  if (!vicinity_.present ())
  {
    this->vicinity_.set (vicinity_default_value ());
  }
}

RPG_Combat_DamageDuration_XMLTree_Type* RPG_Combat_DamageDuration_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_DamageDuration_XMLTree_Type (*this, f, c);
}

RPG_Combat_DamageDuration_XMLTree_Type& RPG_Combat_DamageDuration_XMLTree_Type::
operator= (const RPG_Combat_DamageDuration_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->incubationPeriod_ = x.incubationPeriod_;
    this->totalPeriod_ = x.totalPeriod_;
    this->interval_ = x.interval_;
    this->totalDuration_ = x.totalDuration_;
    this->vicinity_ = x.vicinity_;
  }

  return *this;
}

RPG_Combat_DamageDuration_XMLTree_Type::
~RPG_Combat_DamageDuration_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_DamageDuration_XMLTree_Type& x, const RPG_Combat_DamageDuration_XMLTree_Type& y)
{
  if (!(x.incubationPeriod () == y.incubationPeriod ()))
    return false;

  if (!(x.totalPeriod () == y.totalPeriod ()))
    return false;

  if (!(x.interval () == y.interval ()))
    return false;

  if (!(x.totalDuration () == y.totalDuration ()))
    return false;

  if (!(x.vicinity () == y.vicinity ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_DamageDuration_XMLTree_Type& x, const RPG_Combat_DamageDuration_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Combat_CheckTypeUnion_XMLTree_Type
//

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::
RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Combat_CheckTypeUnion_XMLTree_Type* RPG_Combat_CheckTypeUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_CheckTypeUnion_XMLTree_Type (*this, f, c);
}

RPG_Combat_CheckTypeUnion_XMLTree_Type::value RPG_Combat_CheckTypeUnion_XMLTree_Type::
_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_indexes_ + 71,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_indexes_ + 71 || _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_CheckTypeUnion_XMLTree_Type::
_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_[71] =
{
  "SKILL_APPRAISE",
  "SKILL_BALANCE",
  "SKILL_BLUFF",
  "SKILL_CLIMB",
  "SKILL_CONCENTRATION",
  "SKILL_CRAFT_ANY",
  "SKILL_CRAFT_ALL",
  "SKILL_CRAFT_ALCHEMY",
  "SKILL_CRAFT_FLETCHER",
  "SKILL_CRAFT_BOWYER",
  "SKILL_CRAFT_SMITH_ARMOR",
  "SKILL_CRAFT_SMITH_BLACK",
  "SKILL_CRAFT_SMITH_WEAPON",
  "SKILL_CRAFT_TRAP",
  "SKILL_CRAFT_OTHER",
  "SKILL_DECIPHER_SCRIPT",
  "SKILL_DIPLOMACY",
  "SKILL_DISABLE_DEVICE",
  "SKILL_DISGUISE",
  "SKILL_ESCAPE_ARTIST",
  "SKILL_FORGERY",
  "SKILL_GATHER_INFORMATION",
  "SKILL_HANDLE_ANIMAL",
  "SKILL_HEAL",
  "SKILL_HIDE",
  "SKILL_INTIMIDATE",
  "SKILL_JUMP",
  "SKILL_KNOWLEDGE_ANY",
  "SKILL_KNOWLEDGE_ALL",
  "SKILL_KNOWLEDGE_ARCANA",
  "SKILL_KNOWLEDGE_ARCHITECTURE_ENGINEERING",
  "SKILL_KNOWLEDGE_DUNGEONS",
  "SKILL_KNOWLEDGE_GEOGRAPHY",
  "SKILL_KNOWLEDGE_HISTORY",
  "SKILL_KNOWLEDGE_LOCAL",
  "SKILL_KNOWLEDGE_NATURE",
  "SKILL_KNOWLEDGE_NOBILITY_ROYALTY",
  "SKILL_KNOWLEDGE_RELIGION",
  "SKILL_KNOWLEDGE_PLANES",
  "SKILL_LISTEN",
  "SKILL_MOVE_SILENTLY",
  "SKILL_OPEN_LOCK",
  "SKILL_PERFORM",
  "SKILL_PROFESSION",
  "SKILL_RIDE",
  "SKILL_SEARCH",
  "SKILL_SENSE_MOTIVE",
  "SKILL_SLEIGHT_OF_HAND",
  "SKILL_SPEAK_LANGUAGE",
  "SKILL_SPELLCRAFT",
  "SKILL_SPOT",
  "SKILL_SURVIVAL",
  "SKILL_SWIM",
  "SKILL_TUMBLE",
  "SKILL_USE_MAGIC_DEVICE",
  "SKILL_USE_ROPE",
  "ATTRIBUTE_CHARISMA",
  "ATTRIBUTE_CONSTITUTION",
  "ATTRIBUTE_DEXTERITY",
  "ATTRIBUTE_INTELLIGENCE",
  "ATTRIBUTE_STRENGTH",
  "ATTRIBUTE_WISDOM",
  "ATTRIBUTE_ANY",
  "CHECK_CASTER_LEVEL",
  "CHECK_GRAPPLE",
  "CHECK_HIT_DICE",
  "SAVE_NONE",
  "SAVE_FORTITUDE",
  "SAVE_MAGIC",
  "SAVE_REFLEX",
  "SAVE_WILL"
};

const RPG_Combat_CheckTypeUnion_XMLTree_Type::value RPG_Combat_CheckTypeUnion_XMLTree_Type::
_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_indexes_[71] =
{
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_ANY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_CHARISMA,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_CONSTITUTION,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_DEXTERITY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_INTELLIGENCE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_STRENGTH,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::ATTRIBUTE_WISDOM,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::CHECK_CASTER_LEVEL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::CHECK_GRAPPLE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::CHECK_HIT_DICE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SAVE_FORTITUDE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SAVE_MAGIC,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SAVE_NONE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SAVE_REFLEX,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SAVE_WILL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_APPRAISE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_BALANCE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_BLUFF,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CLIMB,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CONCENTRATION,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_ALCHEMY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_ALL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_ANY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_BOWYER,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_FLETCHER,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_OTHER,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_SMITH_ARMOR,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_SMITH_BLACK,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_SMITH_WEAPON,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_CRAFT_TRAP,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_DECIPHER_SCRIPT,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_DIPLOMACY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_DISABLE_DEVICE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_DISGUISE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_ESCAPE_ARTIST,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_FORGERY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_GATHER_INFORMATION,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_HANDLE_ANIMAL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_HEAL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_HIDE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_INTIMIDATE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_JUMP,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_ALL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_ANY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_ARCANA,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_ARCHITECTURE_ENGINEERING,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_DUNGEONS,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_GEOGRAPHY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_HISTORY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_LOCAL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_NATURE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_NOBILITY_ROYALTY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_PLANES,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_KNOWLEDGE_RELIGION,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_LISTEN,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_MOVE_SILENTLY,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_OPEN_LOCK,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_PERFORM,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_PROFESSION,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_RIDE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SEARCH,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SENSE_MOTIVE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SLEIGHT_OF_HAND,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SPEAK_LANGUAGE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SPELLCRAFT,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SPOT,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SURVIVAL,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_SWIM,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_TUMBLE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_USE_MAGIC_DEVICE,
  ::RPG_Combat_CheckTypeUnion_XMLTree_Type::SKILL_USE_ROPE
};

// RPG_Combat_Check_XMLTree_Type
//

RPG_Combat_Check_XMLTree_Type::
RPG_Combat_Check_XMLTree_Type (const type_type& type)
: ::xml_schema::type (),
  type_ (type, this),
  attribute_ (this),
  difficultyClass_ (this)
{
}

RPG_Combat_Check_XMLTree_Type::
RPG_Combat_Check_XMLTree_Type (const RPG_Combat_Check_XMLTree_Type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  attribute_ (x.attribute_, f, this),
  difficultyClass_ (x.difficultyClass_, f, this)
{
}

RPG_Combat_Check_XMLTree_Type::
RPG_Combat_Check_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  attribute_ (this),
  difficultyClass_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void RPG_Combat_Check_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // attribute
    //
    if (n.name () == "attribute" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< attribute_type > r (
        attribute_traits::create (i, f, this));

      if (!this->attribute_)
      {
        this->attribute_.set (r);
        continue;
      }
    }

    // difficultyClass
    //
    if (n.name () == "difficultyClass" && n.namespace_ () == "urn:rpg")
    {
      if (!this->difficultyClass_)
      {
        this->difficultyClass_.set (difficultyClass_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }
}

RPG_Combat_Check_XMLTree_Type* RPG_Combat_Check_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_Check_XMLTree_Type (*this, f, c);
}

RPG_Combat_Check_XMLTree_Type& RPG_Combat_Check_XMLTree_Type::
operator= (const RPG_Combat_Check_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->attribute_ = x.attribute_;
    this->difficultyClass_ = x.difficultyClass_;
  }

  return *this;
}

RPG_Combat_Check_XMLTree_Type::
~RPG_Combat_Check_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_Check_XMLTree_Type& x, const RPG_Combat_Check_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.attribute () == y.attribute ()))
    return false;

  if (!(x.difficultyClass () == y.difficultyClass ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_Check_XMLTree_Type& x, const RPG_Combat_Check_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Combat_DamageReductionType_XMLTree_Type
//

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_convert ();
}

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_convert ();
}

RPG_Combat_DamageReductionType_XMLTree_Type::
RPG_Combat_DamageReductionType_XMLTree_Type (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_convert ();
}

RPG_Combat_DamageReductionType_XMLTree_Type* RPG_Combat_DamageReductionType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_DamageReductionType_XMLTree_Type (*this, f, c);
}

RPG_Combat_DamageReductionType_XMLTree_Type::value RPG_Combat_DamageReductionType_XMLTree_Type::
_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_DamageReductionType_XMLTree_Type::
_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_[4] =
{
  "REDUCTION_FULL",
  "REDUCTION_HALF",
  "REDUCTION_PARTIAL",
  "REDUCTION_TEMPORARY"
};

const RPG_Combat_DamageReductionType_XMLTree_Type::value RPG_Combat_DamageReductionType_XMLTree_Type::
_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_indexes_[4] =
{
  ::RPG_Combat_DamageReductionType_XMLTree_Type::REDUCTION_FULL,
  ::RPG_Combat_DamageReductionType_XMLTree_Type::REDUCTION_HALF,
  ::RPG_Combat_DamageReductionType_XMLTree_Type::REDUCTION_PARTIAL,
  ::RPG_Combat_DamageReductionType_XMLTree_Type::REDUCTION_TEMPORARY
};

// RPG_Combat_DamageCounterMeasure_XMLTree_Type
//

const RPG_Combat_DamageCounterMeasure_XMLTree_Type::reduction_type RPG_Combat_DamageCounterMeasure_XMLTree_Type::reduction_default_value_ (
  "REDUCTION_FULL");

RPG_Combat_DamageCounterMeasure_XMLTree_Type::
RPG_Combat_DamageCounterMeasure_XMLTree_Type (const type_type& type)
: ::xml_schema::type (),
  type_ (type, this),
  check_ (this),
  spell_ (this),
  duration_ (this),
  condition_ (this),
  reduction_ (reduction_default_value (), this)
{
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::
RPG_Combat_DamageCounterMeasure_XMLTree_Type (const RPG_Combat_DamageCounterMeasure_XMLTree_Type& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  check_ (x.check_, f, this),
  spell_ (x.spell_, f, this),
  duration_ (x.duration_, f, this),
  condition_ (x.condition_, f, this),
  reduction_ (x.reduction_, f, this)
{
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::
RPG_Combat_DamageCounterMeasure_XMLTree_Type (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  check_ (this),
  spell_ (this),
  duration_ (this),
  condition_ (this),
  reduction_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RPG_Combat_DamageCounterMeasure_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // check
    //
    if (n.name () == "check" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< check_type > r (
        check_traits::create (i, f, this));

      if (!this->check_)
      {
        this->check_.set (r);
        continue;
      }
    }

    // spell
    //
    if (n.name () == "spell" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< spell_type > r (
        spell_traits::create (i, f, this));

      this->spell_.push_back (r);
      continue;
    }

    // duration
    //
    if (n.name () == "duration" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< duration_type > r (
        duration_traits::create (i, f, this));

      if (!this->duration_)
      {
        this->duration_.set (r);
        continue;
      }
    }

    // condition
    //
    if (n.name () == "condition" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< condition_type > r (
        condition_traits::create (i, f, this));

      if (!this->condition_)
      {
        this->condition_.set (r);
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "reduction" && n.namespace_ ().empty ())
    {
      this->reduction_.set (reduction_traits::create (i, f, this));
      continue;
    }
  }

  if (!reduction_.present ())
  {
    this->reduction_.set (reduction_default_value ());
  }
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type* RPG_Combat_DamageCounterMeasure_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_DamageCounterMeasure_XMLTree_Type (*this, f, c);
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type& RPG_Combat_DamageCounterMeasure_XMLTree_Type::
operator= (const RPG_Combat_DamageCounterMeasure_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->check_ = x.check_;
    this->spell_ = x.spell_;
    this->duration_ = x.duration_;
    this->condition_ = x.condition_;
    this->reduction_ = x.reduction_;
  }

  return *this;
}

RPG_Combat_DamageCounterMeasure_XMLTree_Type::
~RPG_Combat_DamageCounterMeasure_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_DamageCounterMeasure_XMLTree_Type& x, const RPG_Combat_DamageCounterMeasure_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.check () == y.check ()))
    return false;

  if (!(x.spell () == y.spell ()))
    return false;

  if (!(x.duration () == y.duration ()))
    return false;

  if (!(x.condition () == y.condition ()))
    return false;

  if (!(x.reduction () == y.reduction ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_DamageCounterMeasure_XMLTree_Type& x, const RPG_Combat_DamageCounterMeasure_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Combat_OtherDamageType_XMLTree_Type
//

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_convert ();
}

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_convert ();
}

RPG_Combat_OtherDamageType_XMLTree_Type::
RPG_Combat_OtherDamageType_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_convert ();
}

RPG_Combat_OtherDamageType_XMLTree_Type* RPG_Combat_OtherDamageType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_OtherDamageType_XMLTree_Type (*this, f, c);
}

RPG_Combat_OtherDamageType_XMLTree_Type::value RPG_Combat_OtherDamageType_XMLTree_Type::
_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_indexes_,
                    _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Combat_OtherDamageType_XMLTree_Type::
_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_[4] =
{
  "OTHERDAMAGE_DISSOLVEARMOR",
  "OTHERDAMAGE_EXTRAHITPOINTS",
  "OTHERDAMAGE_NATURALARMOR",
  "OTHERDAMAGE_DISSOLVEWEAPON"
};

const RPG_Combat_OtherDamageType_XMLTree_Type::value RPG_Combat_OtherDamageType_XMLTree_Type::
_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_indexes_[4] =
{
  ::RPG_Combat_OtherDamageType_XMLTree_Type::OTHERDAMAGE_DISSOLVEARMOR,
  ::RPG_Combat_OtherDamageType_XMLTree_Type::OTHERDAMAGE_DISSOLVEWEAPON,
  ::RPG_Combat_OtherDamageType_XMLTree_Type::OTHERDAMAGE_EXTRAHITPOINTS,
  ::RPG_Combat_OtherDamageType_XMLTree_Type::OTHERDAMAGE_NATURALARMOR
};

// RPG_Combat_OtherDamage_XMLTree_Type
//

RPG_Combat_OtherDamage_XMLTree_Type::
RPG_Combat_OtherDamage_XMLTree_Type (const type_type& type)
: ::xml_schema::type (),
  type_ (type, this),
  modifier_ (this),
  counterMeasure_ (this)
{
}

RPG_Combat_OtherDamage_XMLTree_Type::
RPG_Combat_OtherDamage_XMLTree_Type (const RPG_Combat_OtherDamage_XMLTree_Type& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  modifier_ (x.modifier_, f, this),
  counterMeasure_ (x.counterMeasure_, f, this)
{
}

RPG_Combat_OtherDamage_XMLTree_Type::
RPG_Combat_OtherDamage_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  modifier_ (this),
  counterMeasure_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void RPG_Combat_OtherDamage_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // modifier
    //
    if (n.name () == "modifier" && n.namespace_ () == "urn:rpg")
    {
      if (!this->modifier_)
      {
        this->modifier_.set (modifier_traits::create (i, f, this));
        continue;
      }
    }

    // counterMeasure
    //
    if (n.name () == "counterMeasure" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< counterMeasure_type > r (
        counterMeasure_traits::create (i, f, this));

      this->counterMeasure_.push_back (r);
      continue;
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }
}

RPG_Combat_OtherDamage_XMLTree_Type* RPG_Combat_OtherDamage_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_OtherDamage_XMLTree_Type (*this, f, c);
}

RPG_Combat_OtherDamage_XMLTree_Type& RPG_Combat_OtherDamage_XMLTree_Type::
operator= (const RPG_Combat_OtherDamage_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->modifier_ = x.modifier_;
    this->counterMeasure_ = x.counterMeasure_;
  }

  return *this;
}

RPG_Combat_OtherDamage_XMLTree_Type::
~RPG_Combat_OtherDamage_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_OtherDamage_XMLTree_Type& x, const RPG_Combat_OtherDamage_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.modifier () == y.modifier ()))
    return false;

  if (!(x.counterMeasure () == y.counterMeasure ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_OtherDamage_XMLTree_Type& x, const RPG_Combat_OtherDamage_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Combat_DamageElement_XMLTree_Type
//

const RPG_Combat_DamageElement_XMLTree_Type::effect_type RPG_Combat_DamageElement_XMLTree_Type::effect_default_value_ (
  "EFFECT_IMMEDIATE");

RPG_Combat_DamageElement_XMLTree_Type::
RPG_Combat_DamageElement_XMLTree_Type ()
: ::xml_schema::type (),
  type_ (this),
  amount_ (this),
  secondary_ (this),
  attribute_ (this),
  condition_ (this),
  duration_ (this),
  counterMeasure_ (this),
  other_ (this),
  effect_ (effect_default_value (), this)
{
}

RPG_Combat_DamageElement_XMLTree_Type::
RPG_Combat_DamageElement_XMLTree_Type (const RPG_Combat_DamageElement_XMLTree_Type& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  amount_ (x.amount_, f, this),
  secondary_ (x.secondary_, f, this),
  attribute_ (x.attribute_, f, this),
  condition_ (x.condition_, f, this),
  duration_ (x.duration_, f, this),
  counterMeasure_ (x.counterMeasure_, f, this),
  other_ (x.other_, f, this),
  effect_ (x.effect_, f, this)
{
}

RPG_Combat_DamageElement_XMLTree_Type::
RPG_Combat_DamageElement_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  amount_ (this),
  secondary_ (this),
  attribute_ (this),
  condition_ (this),
  duration_ (this),
  counterMeasure_ (this),
  other_ (this),
  effect_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RPG_Combat_DamageElement_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      this->type_.push_back (r);
      continue;
    }

    // amount
    //
    if (n.name () == "amount" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< amount_type > r (
        amount_traits::create (i, f, this));

      if (!this->amount_)
      {
        this->amount_.set (r);
        continue;
      }
    }

    // secondary
    //
    if (n.name () == "secondary" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< secondary_type > r (
        secondary_traits::create (i, f, this));

      if (!this->secondary_)
      {
        this->secondary_.set (r);
        continue;
      }
    }

    // attribute
    //
    if (n.name () == "attribute" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< attribute_type > r (
        attribute_traits::create (i, f, this));

      if (!this->attribute_)
      {
        this->attribute_.set (r);
        continue;
      }
    }

    // condition
    //
    if (n.name () == "condition" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< condition_type > r (
        condition_traits::create (i, f, this));

      if (!this->condition_)
      {
        this->condition_.set (r);
        continue;
      }
    }

    // duration
    //
    if (n.name () == "duration" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< duration_type > r (
        duration_traits::create (i, f, this));

      if (!this->duration_)
      {
        this->duration_.set (r);
        continue;
      }
    }

    // counterMeasure
    //
    if (n.name () == "counterMeasure" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< counterMeasure_type > r (
        counterMeasure_traits::create (i, f, this));

      this->counterMeasure_.push_back (r);
      continue;
    }

    // other
    //
    if (n.name () == "other" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< other_type > r (
        other_traits::create (i, f, this));

      this->other_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "effect" && n.namespace_ ().empty ())
    {
      this->effect_.set (effect_traits::create (i, f, this));
      continue;
    }
  }

  if (!effect_.present ())
  {
    this->effect_.set (effect_default_value ());
  }
}

RPG_Combat_DamageElement_XMLTree_Type* RPG_Combat_DamageElement_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_DamageElement_XMLTree_Type (*this, f, c);
}

RPG_Combat_DamageElement_XMLTree_Type& RPG_Combat_DamageElement_XMLTree_Type::
operator= (const RPG_Combat_DamageElement_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->amount_ = x.amount_;
    this->secondary_ = x.secondary_;
    this->attribute_ = x.attribute_;
    this->condition_ = x.condition_;
    this->duration_ = x.duration_;
    this->counterMeasure_ = x.counterMeasure_;
    this->other_ = x.other_;
    this->effect_ = x.effect_;
  }

  return *this;
}

RPG_Combat_DamageElement_XMLTree_Type::
~RPG_Combat_DamageElement_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_DamageElement_XMLTree_Type& x, const RPG_Combat_DamageElement_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.amount () == y.amount ()))
    return false;

  if (!(x.secondary () == y.secondary ()))
    return false;

  if (!(x.attribute () == y.attribute ()))
    return false;

  if (!(x.condition () == y.condition ()))
    return false;

  if (!(x.duration () == y.duration ()))
    return false;

  if (!(x.counterMeasure () == y.counterMeasure ()))
    return false;

  if (!(x.other () == y.other ()))
    return false;

  if (!(x.effect () == y.effect ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_DamageElement_XMLTree_Type& x, const RPG_Combat_DamageElement_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Combat_Damage_XMLTree_Type
//

RPG_Combat_Damage_XMLTree_Type::
RPG_Combat_Damage_XMLTree_Type ()
: ::xml_schema::type (),
  element_ (this),
  elementsAreInclusive_ (elementsAreInclusive_default_value (), this)
{
}

RPG_Combat_Damage_XMLTree_Type::
RPG_Combat_Damage_XMLTree_Type (const RPG_Combat_Damage_XMLTree_Type& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  element_ (x.element_, f, this),
  elementsAreInclusive_ (x.elementsAreInclusive_, f, this)
{
}

RPG_Combat_Damage_XMLTree_Type::
RPG_Combat_Damage_XMLTree_Type (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  element_ (this),
  elementsAreInclusive_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RPG_Combat_Damage_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // element
    //
    if (n.name () == "element" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< element_type > r (
        element_traits::create (i, f, this));

      this->element_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "elementsAreInclusive" && n.namespace_ ().empty ())
    {
      this->elementsAreInclusive_.set (elementsAreInclusive_traits::create (i, f, this));
      continue;
    }
  }

  if (!elementsAreInclusive_.present ())
  {
    this->elementsAreInclusive_.set (elementsAreInclusive_default_value ());
  }
}

RPG_Combat_Damage_XMLTree_Type* RPG_Combat_Damage_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Combat_Damage_XMLTree_Type (*this, f, c);
}

RPG_Combat_Damage_XMLTree_Type& RPG_Combat_Damage_XMLTree_Type::
operator= (const RPG_Combat_Damage_XMLTree_Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->element_ = x.element_;
    this->elementsAreInclusive_ = x.elementsAreInclusive_;
  }

  return *this;
}

RPG_Combat_Damage_XMLTree_Type::
~RPG_Combat_Damage_XMLTree_Type ()
{
}

bool
operator== (const RPG_Combat_Damage_XMLTree_Type& x, const RPG_Combat_Damage_XMLTree_Type& y)
{
  if (!(x.element () == y.element ()))
    return false;

  if (!(x.elementsAreInclusive () == y.elementsAreInclusive ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Combat_Damage_XMLTree_Type& x, const RPG_Combat_Damage_XMLTree_Type& y)
{
  return !(x == y);
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_AttackForm_XMLTree_Type::value i)
{
  return o << RPG_Combat_AttackForm_XMLTree_Type::_xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_AttackForm_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_RangedEffectUnion_XMLTree_Type::value i)
{
  return o << RPG_Combat_RangedEffectUnion_XMLTree_Type::_xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_RangedEffectUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_RangedAttackProperties_XMLTree_Type& i)
{
  o << ::std::endl << "maxRange: " << i.maxRange ();
  if (i.increment ())
  {
    o << ::std::endl << "increment: " << *i.increment ();
  }

  o << ::std::endl << "effect: " << i.effect ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_AttackSituation_XMLTree_Type::value i)
{
  return o << RPG_Combat_AttackSituation_XMLTree_Type::_xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_AttackSituation_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_DefenseSituation_XMLTree_Type::value i)
{
  return o << RPG_Combat_DefenseSituation_XMLTree_Type::_xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_DefenseSituation_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_SpecialAttack_XMLTree_Type::value i)
{
  return o << RPG_Combat_SpecialAttack_XMLTree_Type::_xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_SpecialAttack_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_SpecialDamageType_XMLTree_Type::value i)
{
  return o << RPG_Combat_SpecialDamageType_XMLTree_Type::_xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_SpecialDamageType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_DamageTypeUnion_XMLTree_Type::value i)
{
  return o << RPG_Combat_DamageTypeUnion_XMLTree_Type::_xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_DamageTypeUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_DamageDuration_XMLTree_Type& i)
{
  if (i.incubationPeriod ())
  {
    o << ::std::endl << "incubationPeriod: " << *i.incubationPeriod ();
  }

  if (i.totalPeriod ())
  {
    o << ::std::endl << "totalPeriod: " << *i.totalPeriod ();
  }

  if (i.interval ())
  {
    o << ::std::endl << "interval: " << *i.interval ();
  }

  if (i.totalDuration ())
  {
    o << ::std::endl << "totalDuration: " << *i.totalDuration ();
  }

  o << ::std::endl << "vicinity: " << i.vicinity ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_CheckTypeUnion_XMLTree_Type::value i)
{
  return o << RPG_Combat_CheckTypeUnion_XMLTree_Type::_xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_CheckTypeUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_Check_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.attribute ())
  {
    o << ::std::endl << "attribute: " << *i.attribute ();
  }

  if (i.difficultyClass ())
  {
    o << ::std::endl << "difficultyClass: " << *i.difficultyClass ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_DamageReductionType_XMLTree_Type::value i)
{
  return o << RPG_Combat_DamageReductionType_XMLTree_Type::_xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_DamageReductionType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_DamageCounterMeasure_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.check ())
  {
    o << ::std::endl << "check: " << *i.check ();
  }

  for (RPG_Combat_DamageCounterMeasure_XMLTree_Type::spell_const_iterator
       b (i.spell ().begin ()), e (i.spell ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "spell: " << *b;
  }

  if (i.duration ())
  {
    o << ::std::endl << "duration: " << *i.duration ();
  }

  if (i.condition ())
  {
    o << ::std::endl << "condition: " << *i.condition ();
  }

  o << ::std::endl << "reduction: " << i.reduction ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Combat_OtherDamageType_XMLTree_Type::value i)
{
  return o << RPG_Combat_OtherDamageType_XMLTree_Type::_xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_OtherDamageType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_OtherDamage_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.modifier ())
  {
    o << ::std::endl << "modifier: " << *i.modifier ();
  }

  for (RPG_Combat_OtherDamage_XMLTree_Type::counterMeasure_const_iterator
       b (i.counterMeasure ().begin ()), e (i.counterMeasure ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "counterMeasure: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_DamageElement_XMLTree_Type& i)
{
  for (RPG_Combat_DamageElement_XMLTree_Type::type_const_iterator
       b (i.type ().begin ()), e (i.type ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "type: " << *b;
  }

  if (i.amount ())
  {
    o << ::std::endl << "amount: " << *i.amount ();
  }

  if (i.secondary ())
  {
    o << ::std::endl << "secondary: " << *i.secondary ();
  }

  if (i.attribute ())
  {
    o << ::std::endl << "attribute: " << *i.attribute ();
  }

  if (i.condition ())
  {
    o << ::std::endl << "condition: " << *i.condition ();
  }

  if (i.duration ())
  {
    o << ::std::endl << "duration: " << *i.duration ();
  }

  for (RPG_Combat_DamageElement_XMLTree_Type::counterMeasure_const_iterator
       b (i.counterMeasure ().begin ()), e (i.counterMeasure ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "counterMeasure: " << *b;
  }

  for (RPG_Combat_DamageElement_XMLTree_Type::other_const_iterator
       b (i.other ().begin ()), e (i.other ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "other: " << *b;
  }

  o << ::std::endl << "effect: " << i.effect ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Combat_Damage_XMLTree_Type& i)
{
  for (RPG_Combat_Damage_XMLTree_Type::element_const_iterator
       b (i.element ().begin ()), e (i.element ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "element: " << *b;
  }

  o << ::std::endl << "elementsAreInclusive: " << i.elementsAreInclusive ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_AttackForm_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_AttackForm_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_AttackForm_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_RangedEffectUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_RangedEffectUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_RangedEffectUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_RangedAttackProperties_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // maxRange
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxRange",
        "urn:rpg",
        e));

    s << i.maxRange ();
  }

  // increment
  //
  if (i.increment ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "increment",
        "urn:rpg",
        e));

    s << *i.increment ();
  }

  // effect
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "effect",
        e));

    a << i.effect ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_AttackSituation_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_AttackSituation_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_AttackSituation_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_DefenseSituation_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_DefenseSituation_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_DefenseSituation_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_SpecialAttack_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_SpecialAttack_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_SpecialAttack_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_SpecialDamageType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_SpecialDamageType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_SpecialDamageType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_DamageTypeUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_DamageTypeUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_DamageTypeUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_DamageDuration_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // incubationPeriod
  //
  if (i.incubationPeriod ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "incubationPeriod",
        "urn:rpg",
        e));

    s << *i.incubationPeriod ();
  }

  // totalPeriod
  //
  if (i.totalPeriod ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "totalPeriod",
        "urn:rpg",
        e));

    s << *i.totalPeriod ();
  }

  // interval
  //
  if (i.interval ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "interval",
        "urn:rpg",
        e));

    s << *i.interval ();
  }

  // totalDuration
  //
  if (i.totalDuration ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "totalDuration",
        "urn:rpg",
        e));

    s << *i.totalDuration ();
  }

  // vicinity
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "vicinity",
        e));

    a << i.vicinity ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_CheckTypeUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_CheckTypeUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_CheckTypeUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_Check_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // attribute
  //
  if (i.attribute ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "attribute",
        "urn:rpg",
        e));

    s << *i.attribute ();
  }

  // difficultyClass
  //
  if (i.difficultyClass ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "difficultyClass",
        "urn:rpg",
        e));

    s << *i.difficultyClass ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_DamageReductionType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_DamageReductionType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_DamageReductionType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_DamageCounterMeasure_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // check
  //
  if (i.check ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "check",
        "urn:rpg",
        e));

    s << *i.check ();
  }

  // spell
  //
  for (RPG_Combat_DamageCounterMeasure_XMLTree_Type::spell_const_iterator
       b (i.spell ().begin ()), n (i.spell ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "spell",
        "urn:rpg",
        e));

    s << *b;
  }

  // duration
  //
  if (i.duration ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "duration",
        "urn:rpg",
        e));

    s << *i.duration ();
  }

  // condition
  //
  if (i.condition ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "condition",
        "urn:rpg",
        e));

    s << *i.condition ();
  }

  // reduction
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "reduction",
        e));

    a << i.reduction ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_OtherDamageType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Combat_OtherDamageType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Combat_OtherDamageType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_OtherDamage_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // modifier
  //
  if (i.modifier ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "modifier",
        "urn:rpg",
        e));

    s << *i.modifier ();
  }

  // counterMeasure
  //
  for (RPG_Combat_OtherDamage_XMLTree_Type::counterMeasure_const_iterator
       b (i.counterMeasure ().begin ()), n (i.counterMeasure ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "counterMeasure",
        "urn:rpg",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_DamageElement_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  for (RPG_Combat_DamageElement_XMLTree_Type::type_const_iterator
       b (i.type ().begin ()), n (i.type ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << *b;
  }

  // amount
  //
  if (i.amount ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "amount",
        "urn:rpg",
        e));

    s << *i.amount ();
  }

  // secondary
  //
  if (i.secondary ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "secondary",
        "urn:rpg",
        e));

    s << *i.secondary ();
  }

  // attribute
  //
  if (i.attribute ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "attribute",
        "urn:rpg",
        e));

    s << *i.attribute ();
  }

  // condition
  //
  if (i.condition ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "condition",
        "urn:rpg",
        e));

    s << *i.condition ();
  }

  // duration
  //
  if (i.duration ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "duration",
        "urn:rpg",
        e));

    s << *i.duration ();
  }

  // counterMeasure
  //
  for (RPG_Combat_DamageElement_XMLTree_Type::counterMeasure_const_iterator
       b (i.counterMeasure ().begin ()), n (i.counterMeasure ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "counterMeasure",
        "urn:rpg",
        e));

    s << *b;
  }

  // other
  //
  for (RPG_Combat_DamageElement_XMLTree_Type::other_const_iterator
       b (i.other ().begin ()), n (i.other ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "other",
        "urn:rpg",
        e));

    s << *b;
  }

  // effect
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "effect",
        e));

    a << i.effect ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Combat_Damage_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // element
  //
  for (RPG_Combat_Damage_XMLTree_Type::element_const_iterator
       b (i.element ().begin ()), n (i.element ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "element",
        "urn:rpg",
        e));

    s << *b;
  }

  // elementsAreInclusive
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "elementsAreInclusive",
        e));

    a << i.elementsAreInclusive ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

