// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___RPG_COMBAT_XML_TREE_H
#define CXX___RPG_COMBAT_XML_TREE_H

// Begin prologue.
//
#include "rpg_combat_exports.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Combat_AttackForm_XMLTree_Type;
class RPG_Combat_RangedEffectUnion_XMLTree_Type;
class RPG_Combat_RangedAttackProperties_XMLTree_Type;
class RPG_Combat_AttackSituation_XMLTree_Type;
class RPG_Combat_DefenseSituation_XMLTree_Type;
class RPG_Combat_SpecialAttack_XMLTree_Type;
class RPG_Combat_SpecialDamageType_XMLTree_Type;
class RPG_Combat_DamageTypeUnion_XMLTree_Type;
class RPG_Combat_DamageDuration_XMLTree_Type;
class RPG_Combat_CheckTypeUnion_XMLTree_Type;
class RPG_Combat_Check_XMLTree_Type;
class RPG_Combat_DamageReductionType_XMLTree_Type;
class RPG_Combat_DamageCounterMeasure_XMLTree_Type;
class RPG_Combat_OtherDamageType_XMLTree_Type;
class RPG_Combat_OtherDamage_XMLTree_Type;
class RPG_Combat_DamageElement_XMLTree_Type;
class RPG_Combat_Damage_XMLTree_Type;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

#include "rpg_dice_XML_tree.h"

#include "rpg_common_XML_tree.h"

#include "rpg_magic_XML_tree.h"

class RPG_Combat_Export RPG_Combat_AttackForm_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ATTACKFORM_MELEE,
    ATTACKFORM_TOUCH,
    ATTACKFORM_RANGED
  };

  RPG_Combat_AttackForm_XMLTree_Type (value v);

  RPG_Combat_AttackForm_XMLTree_Type (const char* v);

  RPG_Combat_AttackForm_XMLTree_Type (const ::std::string& v);

  RPG_Combat_AttackForm_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_AttackForm_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Combat_AttackForm_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Combat_AttackForm_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Combat_AttackForm_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Combat_AttackForm_XMLTree_Type (const RPG_Combat_AttackForm_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Combat_AttackForm_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_AttackForm_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_AttackForm_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_AttackForm_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_AttackForm_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Combat_AttackForm_XMLTree_Type_indexes_[3];
};

class RPG_Combat_Export RPG_Combat_RangedEffectUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SIZE_FINE,
    SIZE_DIMINUTIVE,
    SIZE_TINY,
    SIZE_SMALL,
    SIZE_MEDIUM,
    SIZE_LARGE,
    SIZE_HUGE,
    SIZE_GARGANTUAN,
    SIZE_COLOSSAL,
    AREA_CONE,
    AREA_CUBE,
    AREA_CYLINDER,
    AREA_LINE_HORIZONTAL,
    AREA_LINE_VERTICAL,
    AREA_RING,
    AREA_SPHERE,
    AREA_WALL
  };

  RPG_Combat_RangedEffectUnion_XMLTree_Type (value v);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const char* v);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::std::string& v);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_RangedEffectUnion_XMLTree_Type (const RPG_Combat_RangedEffectUnion_XMLTree_Type& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  virtual RPG_Combat_RangedEffectUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_RangedEffectUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_literals_[17];
  static const value _xsd_RPG_Combat_RangedEffectUnion_XMLTree_Type_indexes_[17];
};

class RPG_Combat_Export RPG_Combat_RangedAttackProperties_XMLTree_Type: public ::xml_schema::type
{
  public:
  // maxRange
  // 
  typedef ::xml_schema::unsigned_byte maxRange_type;
  typedef ::xsd::cxx::tree::traits< maxRange_type, char > maxRange_traits;

  const maxRange_type&
  maxRange () const;

  maxRange_type&
  maxRange ();

  void
  maxRange (const maxRange_type& x);

  // increment
  // 
  typedef ::xml_schema::unsigned_byte increment_type;
  typedef ::xsd::cxx::tree::optional< increment_type > increment_optional;
  typedef ::xsd::cxx::tree::traits< increment_type, char > increment_traits;

  const increment_optional&
  increment () const;

  increment_optional&
  increment ();

  void
  increment (const increment_type& x);

  void
  increment (const increment_optional& x);

  // effect
  // 
  typedef ::RPG_Combat_RangedEffectUnion_XMLTree_Type effect_type;
  typedef ::xsd::cxx::tree::traits< effect_type, char > effect_traits;

  const effect_type&
  effect () const;

  effect_type&
  effect ();

  void
  effect (const effect_type& x);

  void
  effect (::std::auto_ptr< effect_type > p);

  static const effect_type&
  effect_default_value ();

  // Constructors.
  //
  RPG_Combat_RangedAttackProperties_XMLTree_Type (const maxRange_type&);

  RPG_Combat_RangedAttackProperties_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Combat_RangedAttackProperties_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Combat_RangedAttackProperties_XMLTree_Type (const RPG_Combat_RangedAttackProperties_XMLTree_Type& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  virtual RPG_Combat_RangedAttackProperties_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_RangedAttackProperties_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< maxRange_type > maxRange_;
  increment_optional increment_;
  ::xsd::cxx::tree::one< effect_type > effect_;
  static const effect_type effect_default_value_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_RangedAttackProperties_XMLTree_Type&, const RPG_Combat_RangedAttackProperties_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_RangedAttackProperties_XMLTree_Type&, const RPG_Combat_RangedAttackProperties_XMLTree_Type&);


class RPG_Combat_Export RPG_Combat_AttackSituation_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ATTACK_NORMAL,
    ATTACK_BACKSTAB,
    ATTACK_SURPRISE
  };

  RPG_Combat_AttackSituation_XMLTree_Type (value v);

  RPG_Combat_AttackSituation_XMLTree_Type (const char* v);

  RPG_Combat_AttackSituation_XMLTree_Type (const ::std::string& v);

  RPG_Combat_AttackSituation_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_AttackSituation_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_AttackSituation_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_AttackSituation_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_AttackSituation_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_AttackSituation_XMLTree_Type (const RPG_Combat_AttackSituation_XMLTree_Type& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  virtual RPG_Combat_AttackSituation_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_AttackSituation_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_AttackSituation_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_AttackSituation_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_AttackSituation_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Combat_AttackSituation_XMLTree_Type_indexes_[3];
};

class RPG_Combat_Export RPG_Combat_DefenseSituation_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    DEFENSE_NORMAL,
    DEFENSE_TOUCH,
    DEFENSE_FLATFOOTED
  };

  RPG_Combat_DefenseSituation_XMLTree_Type (value v);

  RPG_Combat_DefenseSituation_XMLTree_Type (const char* v);

  RPG_Combat_DefenseSituation_XMLTree_Type (const ::std::string& v);

  RPG_Combat_DefenseSituation_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_DefenseSituation_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Combat_DefenseSituation_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Combat_DefenseSituation_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Combat_DefenseSituation_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Combat_DefenseSituation_XMLTree_Type (const RPG_Combat_DefenseSituation_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Combat_DefenseSituation_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_DefenseSituation_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Combat_DefenseSituation_XMLTree_Type_indexes_[3];
};

class RPG_Combat_Export RPG_Combat_SpecialAttack_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SPECIALATTACK_INCORPOREAL_TOUCH,
    SPECIALATTACK_SMITE
  };

  RPG_Combat_SpecialAttack_XMLTree_Type (value v);

  RPG_Combat_SpecialAttack_XMLTree_Type (const char* v);

  RPG_Combat_SpecialAttack_XMLTree_Type (const ::std::string& v);

  RPG_Combat_SpecialAttack_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_SpecialAttack_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Combat_SpecialAttack_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Combat_SpecialAttack_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Combat_SpecialAttack_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Combat_SpecialAttack_XMLTree_Type (const RPG_Combat_SpecialAttack_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Combat_SpecialAttack_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_SpecialAttack_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_literals_[2];
  static const value _xsd_RPG_Combat_SpecialAttack_XMLTree_Type_indexes_[2];
};

class RPG_Combat_Export RPG_Combat_SpecialDamageType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    DAMAGE_ABILITY_DRAIN,
    DAMAGE_ABILITY_LOSS,
    DAMAGE_ABILITY_REDUCTION,
    DAMAGE_ACID,
    DAMAGE_COLD,
    DAMAGE_ELECTRICITY,
    DAMAGE_FIRE,
    DAMAGE_LEVEL_DRAIN,
    DAMAGE_LEVEL_LOSS,
    DAMAGE_MAGIC,
    DAMAGE_PETRIFY,
    DAMAGE_PARALYZE,
    DAMAGE_POISON,
    DAMAGE_SLAY,
    DAMAGE_SONIC,
    DAMAGE_STUN
  };

  RPG_Combat_SpecialDamageType_XMLTree_Type (value v);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const char* v);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const ::std::string& v);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_SpecialDamageType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Combat_SpecialDamageType_XMLTree_Type (const RPG_Combat_SpecialDamageType_XMLTree_Type& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  virtual RPG_Combat_SpecialDamageType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_SpecialDamageType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_literals_[16];
  static const value _xsd_RPG_Combat_SpecialDamageType_XMLTree_Type_indexes_[16];
};

class RPG_Combat_Export RPG_Combat_DamageTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    PHYSICALDAMAGE_NONE,
    PHYSICALDAMAGE_BLUDGEONING,
    PHYSICALDAMAGE_PIERCING,
    PHYSICALDAMAGE_SLASHING,
    PHYSICALDAMAGE_CRUSHING,
    PHYSICALDAMAGE_WITHERING,
    DAMAGE_ABILITY_DRAIN,
    DAMAGE_ABILITY_LOSS,
    DAMAGE_ABILITY_REDUCTION,
    DAMAGE_ACID,
    DAMAGE_COLD,
    DAMAGE_ELECTRICITY,
    DAMAGE_FIRE,
    DAMAGE_LEVEL_DRAIN,
    DAMAGE_LEVEL_LOSS,
    DAMAGE_MAGIC,
    DAMAGE_PETRIFY,
    DAMAGE_PARALYZE,
    DAMAGE_POISON,
    DAMAGE_SLAY,
    DAMAGE_SONIC,
    DAMAGE_STUN
  };

  RPG_Combat_DamageTypeUnion_XMLTree_Type (value v);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const char* v);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_DamageTypeUnion_XMLTree_Type (const RPG_Combat_DamageTypeUnion_XMLTree_Type& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  virtual RPG_Combat_DamageTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_DamageTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_literals_[22];
  static const value _xsd_RPG_Combat_DamageTypeUnion_XMLTree_Type_indexes_[22];
};

class RPG_Combat_Export RPG_Combat_DamageDuration_XMLTree_Type: public ::xml_schema::type
{
  public:
  // incubationPeriod
  // 
  typedef ::RPG_Dice_Roll_XMLTree_Type incubationPeriod_type;
  typedef ::xsd::cxx::tree::optional< incubationPeriod_type > incubationPeriod_optional;
  typedef ::xsd::cxx::tree::traits< incubationPeriod_type, char > incubationPeriod_traits;

  const incubationPeriod_optional&
  incubationPeriod () const;

  incubationPeriod_optional&
  incubationPeriod ();

  void
  incubationPeriod (const incubationPeriod_type& x);

  void
  incubationPeriod (const incubationPeriod_optional& x);

  void
  incubationPeriod (::std::auto_ptr< incubationPeriod_type > p);

  // totalPeriod
  // 
  typedef ::RPG_Dice_Roll_XMLTree_Type totalPeriod_type;
  typedef ::xsd::cxx::tree::optional< totalPeriod_type > totalPeriod_optional;
  typedef ::xsd::cxx::tree::traits< totalPeriod_type, char > totalPeriod_traits;

  const totalPeriod_optional&
  totalPeriod () const;

  totalPeriod_optional&
  totalPeriod ();

  void
  totalPeriod (const totalPeriod_type& x);

  void
  totalPeriod (const totalPeriod_optional& x);

  void
  totalPeriod (::std::auto_ptr< totalPeriod_type > p);

  // interval
  // 
  typedef ::xml_schema::unsigned_short interval_type;
  typedef ::xsd::cxx::tree::optional< interval_type > interval_optional;
  typedef ::xsd::cxx::tree::traits< interval_type, char > interval_traits;

  const interval_optional&
  interval () const;

  interval_optional&
  interval ();

  void
  interval (const interval_type& x);

  void
  interval (const interval_optional& x);

  // totalDuration
  // 
  typedef ::xml_schema::unsigned_short totalDuration_type;
  typedef ::xsd::cxx::tree::optional< totalDuration_type > totalDuration_optional;
  typedef ::xsd::cxx::tree::traits< totalDuration_type, char > totalDuration_traits;

  const totalDuration_optional&
  totalDuration () const;

  totalDuration_optional&
  totalDuration ();

  void
  totalDuration (const totalDuration_type& x);

  void
  totalDuration (const totalDuration_optional& x);

  // vicinity
  // 
  typedef ::xml_schema::boolean vicinity_type;
  typedef ::xsd::cxx::tree::traits< vicinity_type, char > vicinity_traits;

  const vicinity_type&
  vicinity () const;

  vicinity_type&
  vicinity ();

  void
  vicinity (const vicinity_type& x);

  static vicinity_type
  vicinity_default_value ();

  // Constructors.
  //
  RPG_Combat_DamageDuration_XMLTree_Type ();

  RPG_Combat_DamageDuration_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Combat_DamageDuration_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Combat_DamageDuration_XMLTree_Type (const RPG_Combat_DamageDuration_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Combat_DamageDuration_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_DamageDuration_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  incubationPeriod_optional incubationPeriod_;
  totalPeriod_optional totalPeriod_;
  interval_optional interval_;
  totalDuration_optional totalDuration_;
  ::xsd::cxx::tree::one< vicinity_type > vicinity_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_DamageDuration_XMLTree_Type&, const RPG_Combat_DamageDuration_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_DamageDuration_XMLTree_Type&, const RPG_Combat_DamageDuration_XMLTree_Type&);


class RPG_Combat_Export RPG_Combat_CheckTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SKILL_APPRAISE,
    SKILL_BALANCE,
    SKILL_BLUFF,
    SKILL_CLIMB,
    SKILL_CONCENTRATION,
    SKILL_CRAFT_ANY,
    SKILL_CRAFT_ALL,
    SKILL_CRAFT_ALCHEMY,
    SKILL_CRAFT_FLETCHER,
    SKILL_CRAFT_BOWYER,
    SKILL_CRAFT_SMITH_ARMOR,
    SKILL_CRAFT_SMITH_BLACK,
    SKILL_CRAFT_SMITH_WEAPON,
    SKILL_CRAFT_TRAP,
    SKILL_CRAFT_OTHER,
    SKILL_DECIPHER_SCRIPT,
    SKILL_DIPLOMACY,
    SKILL_DISABLE_DEVICE,
    SKILL_DISGUISE,
    SKILL_ESCAPE_ARTIST,
    SKILL_FORGERY,
    SKILL_GATHER_INFORMATION,
    SKILL_HANDLE_ANIMAL,
    SKILL_HEAL,
    SKILL_HIDE,
    SKILL_INTIMIDATE,
    SKILL_JUMP,
    SKILL_KNOWLEDGE_ANY,
    SKILL_KNOWLEDGE_ALL,
    SKILL_KNOWLEDGE_ARCANA,
    SKILL_KNOWLEDGE_ARCHITECTURE_ENGINEERING,
    SKILL_KNOWLEDGE_DUNGEONS,
    SKILL_KNOWLEDGE_GEOGRAPHY,
    SKILL_KNOWLEDGE_HISTORY,
    SKILL_KNOWLEDGE_LOCAL,
    SKILL_KNOWLEDGE_NATURE,
    SKILL_KNOWLEDGE_NOBILITY_ROYALTY,
    SKILL_KNOWLEDGE_RELIGION,
    SKILL_KNOWLEDGE_PLANES,
    SKILL_LISTEN,
    SKILL_MOVE_SILENTLY,
    SKILL_OPEN_LOCK,
    SKILL_PERFORM,
    SKILL_PROFESSION,
    SKILL_RIDE,
    SKILL_SEARCH,
    SKILL_SENSE_MOTIVE,
    SKILL_SLEIGHT_OF_HAND,
    SKILL_SPEAK_LANGUAGE,
    SKILL_SPELLCRAFT,
    SKILL_SPOT,
    SKILL_SURVIVAL,
    SKILL_SWIM,
    SKILL_TUMBLE,
    SKILL_USE_MAGIC_DEVICE,
    SKILL_USE_ROPE,
    ATTRIBUTE_CHARISMA,
    ATTRIBUTE_CONSTITUTION,
    ATTRIBUTE_DEXTERITY,
    ATTRIBUTE_INTELLIGENCE,
    ATTRIBUTE_STRENGTH,
    ATTRIBUTE_WISDOM,
    ATTRIBUTE_ANY,
    CHECK_CASTER_LEVEL,
    CHECK_GRAPPLE,
    CHECK_HIT_DICE,
    SAVE_NONE,
    SAVE_FORTITUDE,
    SAVE_MAGIC,
    SAVE_REFLEX,
    SAVE_WILL
  };

  RPG_Combat_CheckTypeUnion_XMLTree_Type (value v);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const char* v);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Combat_CheckTypeUnion_XMLTree_Type (const RPG_Combat_CheckTypeUnion_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Combat_CheckTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_CheckTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_literals_[71];
  static const value _xsd_RPG_Combat_CheckTypeUnion_XMLTree_Type_indexes_[71];
};

class RPG_Combat_Export RPG_Combat_Check_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Combat_CheckTypeUnion_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // attribute
  // 
  typedef ::RPG_Common_Attribute_XMLTree_Type attribute_type;
  typedef ::xsd::cxx::tree::optional< attribute_type > attribute_optional;
  typedef ::xsd::cxx::tree::traits< attribute_type, char > attribute_traits;

  const attribute_optional&
  attribute () const;

  attribute_optional&
  attribute ();

  void
  attribute (const attribute_type& x);

  void
  attribute (const attribute_optional& x);

  void
  attribute (::std::auto_ptr< attribute_type > p);

  // difficultyClass
  // 
  typedef ::xml_schema::unsigned_byte difficultyClass_type;
  typedef ::xsd::cxx::tree::optional< difficultyClass_type > difficultyClass_optional;
  typedef ::xsd::cxx::tree::traits< difficultyClass_type, char > difficultyClass_traits;

  const difficultyClass_optional&
  difficultyClass () const;

  difficultyClass_optional&
  difficultyClass ();

  void
  difficultyClass (const difficultyClass_type& x);

  void
  difficultyClass (const difficultyClass_optional& x);

  // Constructors.
  //
  RPG_Combat_Check_XMLTree_Type (const type_type&);

  RPG_Combat_Check_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Combat_Check_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Combat_Check_XMLTree_Type (const RPG_Combat_Check_XMLTree_Type& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual RPG_Combat_Check_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_Check_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  attribute_optional attribute_;
  difficultyClass_optional difficultyClass_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_Check_XMLTree_Type&, const RPG_Combat_Check_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_Check_XMLTree_Type&, const RPG_Combat_Check_XMLTree_Type&);


class RPG_Combat_Export RPG_Combat_DamageReductionType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    REDUCTION_FULL,
    REDUCTION_HALF,
    REDUCTION_PARTIAL,
    REDUCTION_TEMPORARY
  };

  RPG_Combat_DamageReductionType_XMLTree_Type (value v);

  RPG_Combat_DamageReductionType_XMLTree_Type (const char* v);

  RPG_Combat_DamageReductionType_XMLTree_Type (const ::std::string& v);

  RPG_Combat_DamageReductionType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_DamageReductionType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

  RPG_Combat_DamageReductionType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

  RPG_Combat_DamageReductionType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

  RPG_Combat_DamageReductionType_XMLTree_Type (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

  RPG_Combat_DamageReductionType_XMLTree_Type (const RPG_Combat_DamageReductionType_XMLTree_Type& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

  virtual RPG_Combat_DamageReductionType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_DamageReductionType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Combat_DamageReductionType_XMLTree_Type_indexes_[4];
};

class RPG_Combat_Export RPG_Combat_DamageCounterMeasure_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Common_CounterMeasure_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // check
  // 
  typedef ::RPG_Combat_Check_XMLTree_Type check_type;
  typedef ::xsd::cxx::tree::optional< check_type > check_optional;
  typedef ::xsd::cxx::tree::traits< check_type, char > check_traits;

  const check_optional&
  check () const;

  check_optional&
  check ();

  void
  check (const check_type& x);

  void
  check (const check_optional& x);

  void
  check (::std::auto_ptr< check_type > p);

  // spell
  // 
  typedef ::RPG_Magic_SpellType_XMLTree_Type spell_type;
  typedef ::xsd::cxx::tree::sequence< spell_type > spell_sequence;
  typedef spell_sequence::iterator spell_iterator;
  typedef spell_sequence::const_iterator spell_const_iterator;
  typedef ::xsd::cxx::tree::traits< spell_type, char > spell_traits;

  const spell_sequence&
  spell () const;

  spell_sequence&
  spell ();

  void
  spell (const spell_sequence& s);

  // duration
  // 
  typedef ::RPG_Common_Duration_XMLTree_Type duration_type;
  typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
  typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

  const duration_optional&
  duration () const;

  duration_optional&
  duration ();

  void
  duration (const duration_type& x);

  void
  duration (const duration_optional& x);

  void
  duration (::std::auto_ptr< duration_type > p);

  // condition
  // 
  typedef ::RPG_Common_Condition_XMLTree_Type condition_type;
  typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
  typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

  const condition_optional&
  condition () const;

  condition_optional&
  condition ();

  void
  condition (const condition_type& x);

  void
  condition (const condition_optional& x);

  void
  condition (::std::auto_ptr< condition_type > p);

  // reduction
  // 
  typedef ::RPG_Combat_DamageReductionType_XMLTree_Type reduction_type;
  typedef ::xsd::cxx::tree::traits< reduction_type, char > reduction_traits;

  const reduction_type&
  reduction () const;

  reduction_type&
  reduction ();

  void
  reduction (const reduction_type& x);

  void
  reduction (::std::auto_ptr< reduction_type > p);

  static const reduction_type&
  reduction_default_value ();

  // Constructors.
  //
  RPG_Combat_DamageCounterMeasure_XMLTree_Type (const type_type&);

  RPG_Combat_DamageCounterMeasure_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

  RPG_Combat_DamageCounterMeasure_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

  RPG_Combat_DamageCounterMeasure_XMLTree_Type (const RPG_Combat_DamageCounterMeasure_XMLTree_Type& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

  virtual RPG_Combat_DamageCounterMeasure_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_DamageCounterMeasure_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  check_optional check_;
  spell_sequence spell_;
  duration_optional duration_;
  condition_optional condition_;
  ::xsd::cxx::tree::one< reduction_type > reduction_;
  static const reduction_type reduction_default_value_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_DamageCounterMeasure_XMLTree_Type&, const RPG_Combat_DamageCounterMeasure_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_DamageCounterMeasure_XMLTree_Type&, const RPG_Combat_DamageCounterMeasure_XMLTree_Type&);


class RPG_Combat_Export RPG_Combat_OtherDamageType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    OTHERDAMAGE_DISSOLVEARMOR,
    OTHERDAMAGE_EXTRAHITPOINTS,
    OTHERDAMAGE_NATURALARMOR,
    OTHERDAMAGE_DISSOLVEWEAPON
  };

  RPG_Combat_OtherDamageType_XMLTree_Type (value v);

  RPG_Combat_OtherDamageType_XMLTree_Type (const char* v);

  RPG_Combat_OtherDamageType_XMLTree_Type (const ::std::string& v);

  RPG_Combat_OtherDamageType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Combat_OtherDamageType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_OtherDamageType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_OtherDamageType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_OtherDamageType_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Combat_OtherDamageType_XMLTree_Type (const RPG_Combat_OtherDamageType_XMLTree_Type& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  virtual RPG_Combat_OtherDamageType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Combat_OtherDamageType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Combat_OtherDamageType_XMLTree_Type_indexes_[4];
};

class RPG_Combat_Export RPG_Combat_OtherDamage_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Combat_OtherDamageType_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // modifier
  // 
  typedef ::xml_schema::byte modifier_type;
  typedef ::xsd::cxx::tree::optional< modifier_type > modifier_optional;
  typedef ::xsd::cxx::tree::traits< modifier_type, char > modifier_traits;

  const modifier_optional&
  modifier () const;

  modifier_optional&
  modifier ();

  void
  modifier (const modifier_type& x);

  void
  modifier (const modifier_optional& x);

  // counterMeasure
  // 
  typedef ::RPG_Combat_DamageCounterMeasure_XMLTree_Type counterMeasure_type;
  typedef ::xsd::cxx::tree::sequence< counterMeasure_type > counterMeasure_sequence;
  typedef counterMeasure_sequence::iterator counterMeasure_iterator;
  typedef counterMeasure_sequence::const_iterator counterMeasure_const_iterator;
  typedef ::xsd::cxx::tree::traits< counterMeasure_type, char > counterMeasure_traits;

  const counterMeasure_sequence&
  counterMeasure () const;

  counterMeasure_sequence&
  counterMeasure ();

  void
  counterMeasure (const counterMeasure_sequence& s);

  // Constructors.
  //
  RPG_Combat_OtherDamage_XMLTree_Type (const type_type&);

  RPG_Combat_OtherDamage_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Combat_OtherDamage_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Combat_OtherDamage_XMLTree_Type (const RPG_Combat_OtherDamage_XMLTree_Type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual RPG_Combat_OtherDamage_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_OtherDamage_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  modifier_optional modifier_;
  counterMeasure_sequence counterMeasure_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_OtherDamage_XMLTree_Type&, const RPG_Combat_OtherDamage_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_OtherDamage_XMLTree_Type&, const RPG_Combat_OtherDamage_XMLTree_Type&);


class RPG_Combat_Export RPG_Combat_DamageElement_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Combat_DamageTypeUnion_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
  typedef type_sequence::iterator type_iterator;
  typedef type_sequence::const_iterator type_const_iterator;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_sequence&
  type () const;

  type_sequence&
  type ();

  void
  type (const type_sequence& s);

  // amount
  // 
  typedef ::RPG_Dice_Roll_XMLTree_Type amount_type;
  typedef ::xsd::cxx::tree::optional< amount_type > amount_optional;
  typedef ::xsd::cxx::tree::traits< amount_type, char > amount_traits;

  const amount_optional&
  amount () const;

  amount_optional&
  amount ();

  void
  amount (const amount_type& x);

  void
  amount (const amount_optional& x);

  void
  amount (::std::auto_ptr< amount_type > p);

  // secondary
  // 
  typedef ::RPG_Dice_Roll_XMLTree_Type secondary_type;
  typedef ::xsd::cxx::tree::optional< secondary_type > secondary_optional;
  typedef ::xsd::cxx::tree::traits< secondary_type, char > secondary_traits;

  const secondary_optional&
  secondary () const;

  secondary_optional&
  secondary ();

  void
  secondary (const secondary_type& x);

  void
  secondary (const secondary_optional& x);

  void
  secondary (::std::auto_ptr< secondary_type > p);

  // attribute
  // 
  typedef ::RPG_Common_Attribute_XMLTree_Type attribute_type;
  typedef ::xsd::cxx::tree::optional< attribute_type > attribute_optional;
  typedef ::xsd::cxx::tree::traits< attribute_type, char > attribute_traits;

  const attribute_optional&
  attribute () const;

  attribute_optional&
  attribute ();

  void
  attribute (const attribute_type& x);

  void
  attribute (const attribute_optional& x);

  void
  attribute (::std::auto_ptr< attribute_type > p);

  // condition
  // 
  typedef ::RPG_Common_Condition_XMLTree_Type condition_type;
  typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
  typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

  const condition_optional&
  condition () const;

  condition_optional&
  condition ();

  void
  condition (const condition_type& x);

  void
  condition (const condition_optional& x);

  void
  condition (::std::auto_ptr< condition_type > p);

  // duration
  // 
  typedef ::RPG_Combat_DamageDuration_XMLTree_Type duration_type;
  typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
  typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

  const duration_optional&
  duration () const;

  duration_optional&
  duration ();

  void
  duration (const duration_type& x);

  void
  duration (const duration_optional& x);

  void
  duration (::std::auto_ptr< duration_type > p);

  // counterMeasure
  // 
  typedef ::RPG_Combat_DamageCounterMeasure_XMLTree_Type counterMeasure_type;
  typedef ::xsd::cxx::tree::sequence< counterMeasure_type > counterMeasure_sequence;
  typedef counterMeasure_sequence::iterator counterMeasure_iterator;
  typedef counterMeasure_sequence::const_iterator counterMeasure_const_iterator;
  typedef ::xsd::cxx::tree::traits< counterMeasure_type, char > counterMeasure_traits;

  const counterMeasure_sequence&
  counterMeasure () const;

  counterMeasure_sequence&
  counterMeasure ();

  void
  counterMeasure (const counterMeasure_sequence& s);

  // other
  // 
  typedef ::RPG_Combat_OtherDamage_XMLTree_Type other_type;
  typedef ::xsd::cxx::tree::sequence< other_type > other_sequence;
  typedef other_sequence::iterator other_iterator;
  typedef other_sequence::const_iterator other_const_iterator;
  typedef ::xsd::cxx::tree::traits< other_type, char > other_traits;

  const other_sequence&
  other () const;

  other_sequence&
  other ();

  void
  other (const other_sequence& s);

  // effect
  // 
  typedef ::RPG_Common_EffectType_XMLTree_Type effect_type;
  typedef ::xsd::cxx::tree::traits< effect_type, char > effect_traits;

  const effect_type&
  effect () const;

  effect_type&
  effect ();

  void
  effect (const effect_type& x);

  void
  effect (::std::auto_ptr< effect_type > p);

  static const effect_type&
  effect_default_value ();

  // Constructors.
  //
  RPG_Combat_DamageElement_XMLTree_Type ();

  RPG_Combat_DamageElement_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Combat_DamageElement_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Combat_DamageElement_XMLTree_Type (const RPG_Combat_DamageElement_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Combat_DamageElement_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_DamageElement_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  type_sequence type_;
  amount_optional amount_;
  secondary_optional secondary_;
  attribute_optional attribute_;
  condition_optional condition_;
  duration_optional duration_;
  counterMeasure_sequence counterMeasure_;
  other_sequence other_;
  ::xsd::cxx::tree::one< effect_type > effect_;
  static const effect_type effect_default_value_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_DamageElement_XMLTree_Type&, const RPG_Combat_DamageElement_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_DamageElement_XMLTree_Type&, const RPG_Combat_DamageElement_XMLTree_Type&);


class RPG_Combat_Export RPG_Combat_Damage_XMLTree_Type: public ::xml_schema::type
{
  public:
  // element
  // 
  typedef ::RPG_Combat_DamageElement_XMLTree_Type element_type;
  typedef ::xsd::cxx::tree::sequence< element_type > element_sequence;
  typedef element_sequence::iterator element_iterator;
  typedef element_sequence::const_iterator element_const_iterator;
  typedef ::xsd::cxx::tree::traits< element_type, char > element_traits;

  const element_sequence&
  element () const;

  element_sequence&
  element ();

  void
  element (const element_sequence& s);

  // elementsAreInclusive
  // 
  typedef ::xml_schema::boolean elementsAreInclusive_type;
  typedef ::xsd::cxx::tree::traits< elementsAreInclusive_type, char > elementsAreInclusive_traits;

  const elementsAreInclusive_type&
  elementsAreInclusive () const;

  elementsAreInclusive_type&
  elementsAreInclusive ();

  void
  elementsAreInclusive (const elementsAreInclusive_type& x);

  static elementsAreInclusive_type
  elementsAreInclusive_default_value ();

  // Constructors.
  //
  RPG_Combat_Damage_XMLTree_Type ();

  RPG_Combat_Damage_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Combat_Damage_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Combat_Damage_XMLTree_Type (const RPG_Combat_Damage_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Combat_Damage_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Combat_Damage_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  element_sequence element_;
  ::xsd::cxx::tree::one< elementsAreInclusive_type > elementsAreInclusive_;
};

RPG_Combat_Export
bool
operator== (const RPG_Combat_Damage_XMLTree_Type&, const RPG_Combat_Damage_XMLTree_Type&);

RPG_Combat_Export
bool
operator!= (const RPG_Combat_Damage_XMLTree_Type&, const RPG_Combat_Damage_XMLTree_Type&);


#include <iosfwd>

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_AttackForm_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_AttackForm_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_RangedEffectUnion_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_RangedEffectUnion_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_RangedAttackProperties_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_AttackSituation_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_AttackSituation_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_DefenseSituation_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_DefenseSituation_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_SpecialAttack_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_SpecialAttack_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_SpecialDamageType_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_SpecialDamageType_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_DamageTypeUnion_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_DamageTypeUnion_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_DamageDuration_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_CheckTypeUnion_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_CheckTypeUnion_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_Check_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_DamageReductionType_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_DamageReductionType_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_DamageCounterMeasure_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Combat_OtherDamageType_XMLTree_Type::value);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_OtherDamageType_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_OtherDamage_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_DamageElement_XMLTree_Type&);

RPG_Combat_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Combat_Damage_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_AttackForm_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_AttackForm_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_AttackForm_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_RangedEffectUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_RangedEffectUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_RangedEffectUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_RangedAttackProperties_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_AttackSituation_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_AttackSituation_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_AttackSituation_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_DefenseSituation_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_DefenseSituation_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_DefenseSituation_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_SpecialAttack_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_SpecialAttack_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_SpecialAttack_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_SpecialDamageType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_SpecialDamageType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_SpecialDamageType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_DamageTypeUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_DamageTypeUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_DamageTypeUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_DamageDuration_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_CheckTypeUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_CheckTypeUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_CheckTypeUnion_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_Check_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_DamageReductionType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_DamageReductionType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_DamageReductionType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_DamageCounterMeasure_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_OtherDamageType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Combat_OtherDamageType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Combat_OtherDamageType_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_OtherDamage_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_DamageElement_XMLTree_Type&);

RPG_Combat_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Combat_Damage_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_AttackForm_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_RangedEffectUnion_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_RangedAttackProperties_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_AttackSituation_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_DefenseSituation_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_SpecialAttack_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_SpecialDamageType_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_DamageTypeUnion_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_DamageDuration_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_CheckTypeUnion_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_Check_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_DamageReductionType_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_DamageCounterMeasure_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_OtherDamageType_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_OtherDamage_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_DamageElement_XMLTree_Type&);

RPG_Combat_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Combat_Damage_XMLTree_Type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___RPG_COMBAT_XML_TREE_H
