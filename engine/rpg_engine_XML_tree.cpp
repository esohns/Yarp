// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_engine_XML_tree.h"

// RPG_Engine_Command_XMLTree_Type
// 

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Engine_Command_XMLTree_Type_literals_[v])
{
}

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const RPG_Engine_Command_XMLTree_Type& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Engine_Command_XMLTree_Type& RPG_Engine_Command_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Engine_Command_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Engine_EntityMode_XMLTree_Type
// 

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Engine_EntityMode_XMLTree_Type_literals_[v])
{
}

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const RPG_Engine_EntityMode_XMLTree_Type& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Engine_EntityMode_XMLTree_Type& RPG_Engine_EntityMode_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Engine_EntityMode_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Engine_EntityState_XMLTree_Type
// 

const RPG_Engine_EntityState_XMLTree_Type::player_optional& RPG_Engine_EntityState_XMLTree_Type::
player () const
{
  return this->player_;
}

RPG_Engine_EntityState_XMLTree_Type::player_optional& RPG_Engine_EntityState_XMLTree_Type::
player ()
{
  return this->player_;
}

void RPG_Engine_EntityState_XMLTree_Type::
player (const player_type& x)
{
  this->player_.set (x);
}

void RPG_Engine_EntityState_XMLTree_Type::
player (const player_optional& x)
{
  this->player_ = x;
}

void RPG_Engine_EntityState_XMLTree_Type::
player (::std::auto_ptr< player_type > x)
{
  this->player_.set (x);
}

const RPG_Engine_EntityState_XMLTree_Type::monster_optional& RPG_Engine_EntityState_XMLTree_Type::
monster () const
{
  return this->monster_;
}

RPG_Engine_EntityState_XMLTree_Type::monster_optional& RPG_Engine_EntityState_XMLTree_Type::
monster ()
{
  return this->monster_;
}

void RPG_Engine_EntityState_XMLTree_Type::
monster (const monster_type& x)
{
  this->monster_.set (x);
}

void RPG_Engine_EntityState_XMLTree_Type::
monster (const monster_optional& x)
{
  this->monster_ = x;
}

void RPG_Engine_EntityState_XMLTree_Type::
monster (::std::auto_ptr< monster_type > x)
{
  this->monster_.set (x);
}

const RPG_Engine_EntityState_XMLTree_Type::position_type& RPG_Engine_EntityState_XMLTree_Type::
position () const
{
  return this->position_.get ();
}

RPG_Engine_EntityState_XMLTree_Type::position_type& RPG_Engine_EntityState_XMLTree_Type::
position ()
{
  return this->position_.get ();
}

void RPG_Engine_EntityState_XMLTree_Type::
position (const position_type& x)
{
  this->position_.set (x);
}

void RPG_Engine_EntityState_XMLTree_Type::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const RPG_Engine_EntityState_XMLTree_Type::mode_sequence& RPG_Engine_EntityState_XMLTree_Type::
mode () const
{
  return this->mode_;
}

RPG_Engine_EntityState_XMLTree_Type::mode_sequence& RPG_Engine_EntityState_XMLTree_Type::
mode ()
{
  return this->mode_;
}

void RPG_Engine_EntityState_XMLTree_Type::
mode (const mode_sequence& s)
{
  this->mode_ = s;
}


// RPG_Engine_Level_XMLTree_Type
// 

const RPG_Engine_Level_XMLTree_Type::spawn_sequence& RPG_Engine_Level_XMLTree_Type::
spawn () const
{
  return this->spawn_;
}

RPG_Engine_Level_XMLTree_Type::spawn_sequence& RPG_Engine_Level_XMLTree_Type::
spawn ()
{
  return this->spawn_;
}

void RPG_Engine_Level_XMLTree_Type::
spawn (const spawn_sequence& s)
{
  this->spawn_ = s;
}

const RPG_Engine_Level_XMLTree_Type::max_num_spawned_type& RPG_Engine_Level_XMLTree_Type::
max_num_spawned () const
{
  return this->max_num_spawned_.get ();
}

RPG_Engine_Level_XMLTree_Type::max_num_spawned_type& RPG_Engine_Level_XMLTree_Type::
max_num_spawned ()
{
  return this->max_num_spawned_.get ();
}

void RPG_Engine_Level_XMLTree_Type::
max_num_spawned (const max_num_spawned_type& x)
{
  this->max_num_spawned_.set (x);
}


// RPG_Engine_State_XMLTree_Type
// 

const RPG_Engine_State_XMLTree_Type::entities_sequence& RPG_Engine_State_XMLTree_Type::
entities () const
{
  return this->entities_;
}

RPG_Engine_State_XMLTree_Type::entities_sequence& RPG_Engine_State_XMLTree_Type::
entities ()
{
  return this->entities_;
}

void RPG_Engine_State_XMLTree_Type::
entities (const entities_sequence& s)
{
  this->entities_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Engine_Command_XMLTree_Type
//

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Engine_Command_XMLTree_Type_convert ();
}

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Engine_Command_XMLTree_Type_convert ();
}

RPG_Engine_Command_XMLTree_Type::
RPG_Engine_Command_XMLTree_Type (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Engine_Command_XMLTree_Type_convert ();
}

RPG_Engine_Command_XMLTree_Type* RPG_Engine_Command_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Engine_Command_XMLTree_Type (*this, f, c);
}

RPG_Engine_Command_XMLTree_Type::value RPG_Engine_Command_XMLTree_Type::
_xsd_RPG_Engine_Command_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Engine_Command_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Engine_Command_XMLTree_Type_indexes_,
                    _xsd_RPG_Engine_Command_XMLTree_Type_indexes_ + 22,
                    *this,
                    c));

  if (i == _xsd_RPG_Engine_Command_XMLTree_Type_indexes_ + 22 || _xsd_RPG_Engine_Command_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Engine_Command_XMLTree_Type::
_xsd_RPG_Engine_Command_XMLTree_Type_literals_[22] =
{
  "COMMAND_ATTACK",
  "COMMAND_ATTACK_FULL",
  "COMMAND_ATTACK_STANDARD",
  "COMMAND_DOOR_CLOSE",
  "COMMAND_DOOR_OPEN",
  "COMMAND_IDLE",
  "COMMAND_RUN",
  "COMMAND_SEARCH",
  "COMMAND_STEP",
  "COMMAND_STOP",
  "COMMAND_TRAVEL",
  "COMMAND_E2C_ENTITY_ADD",
  "COMMAND_E2C_ENTITY_REMOVE",
  "COMMAND_E2C_ENTITY_HIT",
  "COMMAND_E2C_ENTITY_MISS",
  "COMMAND_E2C_ENTITY_CONDITION",
  "COMMAND_E2C_ENTITY_POSITION",
  "COMMAND_E2C_ENTITY_VISION",
  "COMMAND_E2C_ENTITY_LEVEL_UP",
  "COMMAND_E2C_INIT",
  "COMMAND_E2C_MESSAGE",
  "COMMAND_E2C_QUIT"
};

const RPG_Engine_Command_XMLTree_Type::value RPG_Engine_Command_XMLTree_Type::
_xsd_RPG_Engine_Command_XMLTree_Type_indexes_[22] =
{
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_ATTACK,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_ATTACK_FULL,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_ATTACK_STANDARD,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_DOOR_CLOSE,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_DOOR_OPEN,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_ADD,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_CONDITION,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_HIT,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_LEVEL_UP,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_MISS,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_POSITION,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_REMOVE,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_ENTITY_VISION,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_INIT,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_MESSAGE,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_E2C_QUIT,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_IDLE,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_RUN,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_SEARCH,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_STEP,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_STOP,
  ::RPG_Engine_Command_XMLTree_Type::COMMAND_TRAVEL
};

// RPG_Engine_EntityMode_XMLTree_Type
//

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Engine_EntityMode_XMLTree_Type_convert ();
}

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Engine_EntityMode_XMLTree_Type_convert ();
}

RPG_Engine_EntityMode_XMLTree_Type::
RPG_Engine_EntityMode_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Engine_EntityMode_XMLTree_Type_convert ();
}

RPG_Engine_EntityMode_XMLTree_Type* RPG_Engine_EntityMode_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Engine_EntityMode_XMLTree_Type (*this, f, c);
}

RPG_Engine_EntityMode_XMLTree_Type::value RPG_Engine_EntityMode_XMLTree_Type::
_xsd_RPG_Engine_EntityMode_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Engine_EntityMode_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Engine_EntityMode_XMLTree_Type_indexes_,
                    _xsd_RPG_Engine_EntityMode_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Engine_EntityMode_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Engine_EntityMode_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Engine_EntityMode_XMLTree_Type::
_xsd_RPG_Engine_EntityMode_XMLTree_Type_literals_[4] =
{
  "ENTITYMODE_FIGHTING",
  "ENTITYMODE_RUNNING",
  "ENTITYMODE_SEARCHING",
  "ENTITYMODE_TRAVELLING"
};

const RPG_Engine_EntityMode_XMLTree_Type::value RPG_Engine_EntityMode_XMLTree_Type::
_xsd_RPG_Engine_EntityMode_XMLTree_Type_indexes_[4] =
{
  ::RPG_Engine_EntityMode_XMLTree_Type::ENTITYMODE_FIGHTING,
  ::RPG_Engine_EntityMode_XMLTree_Type::ENTITYMODE_RUNNING,
  ::RPG_Engine_EntityMode_XMLTree_Type::ENTITYMODE_SEARCHING,
  ::RPG_Engine_EntityMode_XMLTree_Type::ENTITYMODE_TRAVELLING
};

// RPG_Engine_EntityState_XMLTree_Type
//

RPG_Engine_EntityState_XMLTree_Type::
RPG_Engine_EntityState_XMLTree_Type (const position_type& position)
: ::xml_schema::type (),
  player_ (::xml_schema::flags (), this),
  monster_ (::xml_schema::flags (), this),
  position_ (position, ::xml_schema::flags (), this),
  mode_ (::xml_schema::flags (), this)
{
}

RPG_Engine_EntityState_XMLTree_Type::
RPG_Engine_EntityState_XMLTree_Type (::std::auto_ptr< position_type >& position)
: ::xml_schema::type (),
  player_ (::xml_schema::flags (), this),
  monster_ (::xml_schema::flags (), this),
  position_ (position, ::xml_schema::flags (), this),
  mode_ (::xml_schema::flags (), this)
{
}

RPG_Engine_EntityState_XMLTree_Type::
RPG_Engine_EntityState_XMLTree_Type (const RPG_Engine_EntityState_XMLTree_Type& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  player_ (x.player_, f, this),
  monster_ (x.monster_, f, this),
  position_ (x.position_, f, this),
  mode_ (x.mode_, f, this)
{
}

RPG_Engine_EntityState_XMLTree_Type::
RPG_Engine_EntityState_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  player_ (f, this),
  monster_ (f, this),
  position_ (f, this),
  mode_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Engine_EntityState_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // player
    //
    if (n.name () == "player" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< player_type > r (
        player_traits::create (i, f, this));

      if (!this->player_)
      {
        this->player_.set (r);
        continue;
      }
    }

    // monster
    //
    if (n.name () == "monster" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< monster_type > r (
        monster_traits::create (i, f, this));

      if (!this->monster_)
      {
        this->monster_.set (r);
        continue;
      }
    }

    // position
    //
    if (n.name () == "position" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // mode
    //
    if (n.name () == "mode" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< mode_type > r (
        mode_traits::create (i, f, this));

      this->mode_.push_back (r);
      continue;
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "urn:rpg");
  }
}

RPG_Engine_EntityState_XMLTree_Type* RPG_Engine_EntityState_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Engine_EntityState_XMLTree_Type (*this, f, c);
}

RPG_Engine_EntityState_XMLTree_Type::
~RPG_Engine_EntityState_XMLTree_Type ()
{
}

bool
operator== (const RPG_Engine_EntityState_XMLTree_Type& x, const RPG_Engine_EntityState_XMLTree_Type& y)
{
  if (!(x.player () == y.player ()))
    return false;

  if (!(x.monster () == y.monster ()))
    return false;

  if (!(x.position () == y.position ()))
    return false;

  if (!(x.mode () == y.mode ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Engine_EntityState_XMLTree_Type& x, const RPG_Engine_EntityState_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Engine_Level_XMLTree_Type
//

RPG_Engine_Level_XMLTree_Type::
RPG_Engine_Level_XMLTree_Type (const name_type& name,
                               const environment_type& environment,
                               const map_type& map,
                               const max_num_spawned_type& max_num_spawned)
: ::RPG_Map_Level_XMLTree_Type (name,
                                environment,
                                map),
  spawn_ (::xml_schema::flags (), this),
  max_num_spawned_ (max_num_spawned, ::xml_schema::flags (), this)
{
}

RPG_Engine_Level_XMLTree_Type::
RPG_Engine_Level_XMLTree_Type (const name_type& name,
                               ::std::auto_ptr< environment_type >& environment,
                               const map_type& map,
                               const max_num_spawned_type& max_num_spawned)
: ::RPG_Map_Level_XMLTree_Type (name,
                                environment,
                                map),
  spawn_ (::xml_schema::flags (), this),
  max_num_spawned_ (max_num_spawned, ::xml_schema::flags (), this)
{
}

RPG_Engine_Level_XMLTree_Type::
RPG_Engine_Level_XMLTree_Type (const RPG_Engine_Level_XMLTree_Type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::RPG_Map_Level_XMLTree_Type (x, f, c),
  spawn_ (x.spawn_, f, this),
  max_num_spawned_ (x.max_num_spawned_, f, this)
{
}

RPG_Engine_Level_XMLTree_Type::
RPG_Engine_Level_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::RPG_Map_Level_XMLTree_Type (e, f | ::xml_schema::flags::base, c),
  spawn_ (f, this),
  max_num_spawned_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Engine_Level_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::RPG_Map_Level_XMLTree_Type::parse (p, f);

  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // spawn
    //
    if (n.name () == "spawn" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< spawn_type > r (
        spawn_traits::create (i, f, this));

      this->spawn_.push_back (r);
      continue;
    }

    // max_num_spawned
    //
    if (n.name () == "max_num_spawned" && n.namespace_ () == "urn:rpg")
    {
      if (!max_num_spawned_.present ())
      {
        this->max_num_spawned_.set (max_num_spawned_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!max_num_spawned_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "max_num_spawned",
      "urn:rpg");
  }
}

RPG_Engine_Level_XMLTree_Type* RPG_Engine_Level_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Engine_Level_XMLTree_Type (*this, f, c);
}

RPG_Engine_Level_XMLTree_Type::
~RPG_Engine_Level_XMLTree_Type ()
{
}

bool
operator== (const RPG_Engine_Level_XMLTree_Type& x, const RPG_Engine_Level_XMLTree_Type& y)
{
  if (!(static_cast< const ::RPG_Map_Level_XMLTree_Type& > (x) ==
        static_cast< const ::RPG_Map_Level_XMLTree_Type& > (y)))
    return false;

  if (!(x.spawn () == y.spawn ()))
    return false;

  if (!(x.max_num_spawned () == y.max_num_spawned ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Engine_Level_XMLTree_Type& x, const RPG_Engine_Level_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Engine_State_XMLTree_Type
//

RPG_Engine_State_XMLTree_Type::
RPG_Engine_State_XMLTree_Type (const file_type& file)
: ::RPG_Map_State_XMLTree_Type (file),
  entities_ (::xml_schema::flags (), this)
{
}

RPG_Engine_State_XMLTree_Type::
RPG_Engine_State_XMLTree_Type (const RPG_Engine_State_XMLTree_Type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::RPG_Map_State_XMLTree_Type (x, f, c),
  entities_ (x.entities_, f, this)
{
}

RPG_Engine_State_XMLTree_Type::
RPG_Engine_State_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::RPG_Map_State_XMLTree_Type (e, f | ::xml_schema::flags::base, c),
  entities_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Engine_State_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::RPG_Map_State_XMLTree_Type::parse (p, f);

  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // entities
    //
    if (n.name () == "entities" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< entities_type > r (
        entities_traits::create (i, f, this));

      this->entities_.push_back (r);
      continue;
    }

    break;
  }
}

RPG_Engine_State_XMLTree_Type* RPG_Engine_State_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Engine_State_XMLTree_Type (*this, f, c);
}

RPG_Engine_State_XMLTree_Type::
~RPG_Engine_State_XMLTree_Type ()
{
}

bool
operator== (const RPG_Engine_State_XMLTree_Type& x, const RPG_Engine_State_XMLTree_Type& y)
{
  if (!(static_cast< const ::RPG_Map_State_XMLTree_Type& > (x) ==
        static_cast< const ::RPG_Map_State_XMLTree_Type& > (y)))
    return false;

  if (!(x.entities () == y.entities ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Engine_State_XMLTree_Type& x, const RPG_Engine_State_XMLTree_Type& y)
{
  return !(x == y);
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Engine_Command_XMLTree_Type::value i)
{
  return o << RPG_Engine_Command_XMLTree_Type::_xsd_RPG_Engine_Command_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Engine_Command_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Engine_EntityMode_XMLTree_Type::value i)
{
  return o << RPG_Engine_EntityMode_XMLTree_Type::_xsd_RPG_Engine_EntityMode_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Engine_EntityMode_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Engine_EntityState_XMLTree_Type& i)
{
  if (i.player ())
  {
    o << ::std::endl << "player: " << *i.player ();
  }

  if (i.monster ())
  {
    o << ::std::endl << "monster: " << *i.monster ();
  }

  o << ::std::endl << "position: " << i.position ();
  for (RPG_Engine_EntityState_XMLTree_Type::mode_const_iterator
       b (i.mode ().begin ()), e (i.mode ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "mode: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Engine_Level_XMLTree_Type& i)
{
  o << static_cast< const ::RPG_Map_Level_XMLTree_Type& > (i);

  for (RPG_Engine_Level_XMLTree_Type::spawn_const_iterator
       b (i.spawn ().begin ()), e (i.spawn ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "spawn: " << *b;
  }

  o << ::std::endl << "max_num_spawned: " << i.max_num_spawned ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Engine_State_XMLTree_Type& i)
{
  o << static_cast< const ::RPG_Map_State_XMLTree_Type& > (i);

  for (RPG_Engine_State_XMLTree_Type::entities_const_iterator
       b (i.entities ().begin ()), e (i.entities ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "entities: " << *b;
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
    ::engine_level_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
    ::engine_level_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
    ::engine_level_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::engine_level_t (isrc, f, p);
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::engine_level_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::engine_level_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::engine_level_t (isrc, f, p);
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::engine_level_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::engine_level_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
    ::engine_level_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
    ::engine_level_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
    ::engine_level_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
      ::engine_level_t (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "engine_level_t" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Engine_Level_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "engine_level_t",
    "urn:rpg");
}

::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type >
engine_level_t (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "engine_level_t" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Engine_Level_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Engine_Level_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "engine_level_t",
    "urn:rpg");
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
    ::engine_state_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
    ::engine_state_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
    ::engine_state_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::engine_state_t (isrc, f, p);
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::engine_state_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::engine_state_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::engine_state_t (isrc, f, p);
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::engine_state_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::engine_state_t (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
    ::engine_state_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
    ::engine_state_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
    ::engine_state_t (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
      ::engine_state_t (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "engine_state_t" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Engine_State_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "engine_state_t",
    "urn:rpg");
}

::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type >
engine_state_t (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "engine_state_t" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Engine_State_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Engine_State_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "engine_state_t",
    "urn:rpg");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Engine_Command_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Engine_Command_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Engine_Command_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Engine_EntityMode_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Engine_EntityMode_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Engine_EntityMode_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Engine_EntityState_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // player
  //
  if (i.player ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "player",
        "urn:rpg",
        e));

    s << *i.player ();
  }

  // monster
  //
  if (i.monster ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "monster",
        "urn:rpg",
        e));

    s << *i.monster ();
  }

  // position
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "position",
        "urn:rpg",
        e));

    s << i.position ();
  }

  // mode
  //
  for (RPG_Engine_EntityState_XMLTree_Type::mode_const_iterator
       b (i.mode ().begin ()), n (i.mode ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mode",
        "urn:rpg",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Engine_Level_XMLTree_Type& i)
{
  e << static_cast< const ::RPG_Map_Level_XMLTree_Type& > (i);

  // spawn
  //
  for (RPG_Engine_Level_XMLTree_Type::spawn_const_iterator
       b (i.spawn ().begin ()), n (i.spawn ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "spawn",
        "urn:rpg",
        e));

    s << *b;
  }

  // max_num_spawned
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "max_num_spawned",
        "urn:rpg",
        e));

    s << i.max_num_spawned ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Engine_State_XMLTree_Type& i)
{
  e << static_cast< const ::RPG_Map_State_XMLTree_Type& > (i);

  // entities
  //
  for (RPG_Engine_State_XMLTree_Type::entities_const_iterator
       b (i.entities ().begin ()), n (i.entities ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "entities",
        "urn:rpg",
        e));

    s << *b;
  }
}

void
engine_level_t (::std::ostream& o,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_level_t (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
engine_level_t (::std::ostream& o,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_level_t (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_level_t (::std::ostream& o,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_level_t (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_level_t (::xercesc::XMLFormatTarget& t,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_level_t (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
engine_level_t (::xercesc::XMLFormatTarget& t,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_level_t (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_level_t (::xercesc::XMLFormatTarget& t,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_level_t (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_level_t (::xercesc::DOMDocument& d,
                const ::RPG_Engine_Level_XMLTree_Type& s,
                ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "engine_level_t" &&
      n.namespace_ () == "urn:rpg")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "engine_level_t",
      "urn:rpg");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
engine_level_t (const ::RPG_Engine_Level_XMLTree_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "engine_level_t",
      "urn:rpg",
      m, f));

  ::engine_level_t (*d, s, f);
  return d;
}

void
engine_state_t (::std::ostream& o,
                const ::RPG_Engine_State_XMLTree_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_state_t (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
engine_state_t (::std::ostream& o,
                const ::RPG_Engine_State_XMLTree_Type& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_state_t (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_state_t (::std::ostream& o,
                const ::RPG_Engine_State_XMLTree_Type& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_state_t (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_state_t (::xercesc::XMLFormatTarget& t,
                const ::RPG_Engine_State_XMLTree_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_state_t (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
engine_state_t (::xercesc::XMLFormatTarget& t,
                const ::RPG_Engine_State_XMLTree_Type& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_state_t (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_state_t (::xercesc::XMLFormatTarget& t,
                const ::RPG_Engine_State_XMLTree_Type& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::engine_state_t (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
engine_state_t (::xercesc::DOMDocument& d,
                const ::RPG_Engine_State_XMLTree_Type& s,
                ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "engine_state_t" &&
      n.namespace_ () == "urn:rpg")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "engine_state_t",
      "urn:rpg");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
engine_state_t (const ::RPG_Engine_State_XMLTree_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "engine_state_t",
      "urn:rpg",
      m, f));

  ::engine_state_t (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

