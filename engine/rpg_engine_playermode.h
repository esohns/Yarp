
// -------------------------------- * * * -------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.1
// -------------------------------- * * * -------------------------------- //

#pragma once
#ifndef RPG_ENGINE_PLAYERMODE_H
#define RPG_ENGINE_PLAYERMODE_H

enum RPG_Engine_PlayerMode
{
  PLAYERMODE_FIGHTING = 0,
  PLAYERMODE_SEARCHING,
  PLAYERMODE_TRAVELLING,
  //
  RPG_ENGINE_PLAYERMODE_MAX,
  RPG_ENGINE_PLAYERMODE_INVALID
};

#include "rpg_engine_exports.h"

#include <ace/Global_Macros.h>

#include <map>
#include <string>

typedef std::map<RPG_Engine_PlayerMode, std::string> RPG_Engine_PlayerModeToStringTable_t;
typedef RPG_Engine_PlayerModeToStringTable_t::const_iterator RPG_Engine_PlayerModeToStringTableIterator_t;

class RPG_Engine_Export RPG_Engine_PlayerModeHelper
{
 public:
  inline static void init()
  {
    myRPG_Engine_PlayerModeToStringTable.clear();
    myRPG_Engine_PlayerModeToStringTable.insert(std::make_pair(PLAYERMODE_FIGHTING, ACE_TEXT_ALWAYS_CHAR("PLAYERMODE_FIGHTING")));
    myRPG_Engine_PlayerModeToStringTable.insert(std::make_pair(PLAYERMODE_SEARCHING, ACE_TEXT_ALWAYS_CHAR("PLAYERMODE_SEARCHING")));
    myRPG_Engine_PlayerModeToStringTable.insert(std::make_pair(PLAYERMODE_TRAVELLING, ACE_TEXT_ALWAYS_CHAR("PLAYERMODE_TRAVELLING")));
  };

  inline static std::string RPG_Engine_PlayerModeToString(const RPG_Engine_PlayerMode& element_in)
  {
    std::string result;
    RPG_Engine_PlayerModeToStringTableIterator_t iterator = myRPG_Engine_PlayerModeToStringTable.find(element_in);
    if (iterator != myRPG_Engine_PlayerModeToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_ENGINE_PLAYERMODE_INVALID");

    return result;
  };

  inline static RPG_Engine_PlayerMode stringToRPG_Engine_PlayerMode(const std::string& string_in)
  {
    RPG_Engine_PlayerModeToStringTableIterator_t iterator = myRPG_Engine_PlayerModeToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Engine_PlayerModeToStringTable.end());

    return RPG_ENGINE_PLAYERMODE_INVALID;
  };

  static RPG_Engine_PlayerModeToStringTable_t myRPG_Engine_PlayerModeToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Engine_PlayerModeHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Engine_PlayerModeHelper(const RPG_Engine_PlayerModeHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Engine_PlayerModeHelper& operator=(const RPG_Engine_PlayerModeHelper&));
};

#endif
