// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___RPG_CLIENT_XML_TREE_H
#define CXX___RPG_CLIENT_XML_TREE_H

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4009910L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Client_GraphicsMode_XMLTree_Type;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

#include "../engine/rpg_engine_XML_tree.h"

#include "../graphics/rpg_graphics_XML_tree.h"

class RPG_Client_GraphicsMode_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    GRAPHICSMODE_2D_ISOMETRIC,
    GRAPHICSMODE_2D_OPENGL,
    GRAPHICSMODE_3D
  };

  RPG_Client_GraphicsMode_XMLTree_Type (value v);

  RPG_Client_GraphicsMode_XMLTree_Type (const char* v);

  RPG_Client_GraphicsMode_XMLTree_Type (const ::std::string& v);

  RPG_Client_GraphicsMode_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Client_GraphicsMode_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Client_GraphicsMode_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Client_GraphicsMode_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Client_GraphicsMode_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Client_GraphicsMode_XMLTree_Type (const RPG_Client_GraphicsMode_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Client_GraphicsMode_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Client_GraphicsMode_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_[3];
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, RPG_Client_GraphicsMode_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Client_GraphicsMode_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const RPG_Client_GraphicsMode_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Client_GraphicsMode_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Client_GraphicsMode_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Client_GraphicsMode_XMLTree_Type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___RPG_CLIENT_XML_TREE_H
