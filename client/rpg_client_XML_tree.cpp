// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
#include "stdafx.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_client_XML_tree.h"

// RPG_Client_GraphicsMode_XMLTree_Type
//

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[v])
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const RPG_Client_GraphicsMode_XMLTree_Type& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Client_GraphicsMode_XMLTree_Type& RPG_Client_GraphicsMode_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Client_GraphicsMode_XMLTree_Type
//

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
}

RPG_Client_GraphicsMode_XMLTree_Type* RPG_Client_GraphicsMode_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Client_GraphicsMode_XMLTree_Type (*this, f, c);
}

RPG_Client_GraphicsMode_XMLTree_Type::value RPG_Client_GraphicsMode_XMLTree_Type::
_xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_,
                    _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Client_GraphicsMode_XMLTree_Type::
_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[3] =
{
  "GRAPHICSMODE_2D_ISOMETRIC",
  "GRAPHICSMODE_2D_OPENGL",
  "GRAPHICSMODE_3D"
};

const RPG_Client_GraphicsMode_XMLTree_Type::value RPG_Client_GraphicsMode_XMLTree_Type::
_xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_[3] =
{
  ::RPG_Client_GraphicsMode_XMLTree_Type::GRAPHICSMODE_2D_ISOMETRIC,
  ::RPG_Client_GraphicsMode_XMLTree_Type::GRAPHICSMODE_2D_OPENGL,
  ::RPG_Client_GraphicsMode_XMLTree_Type::GRAPHICSMODE_3D
};

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Client_GraphicsMode_XMLTree_Type::value i)
{
  return o << RPG_Client_GraphicsMode_XMLTree_Type::_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

