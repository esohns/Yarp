// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_client_XML_tree.h"

// RPG_Client_GraphicsMode_XMLTree_Type
// 

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[v])
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const RPG_Client_GraphicsMode_XMLTree_Type& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Client_GraphicsMode_XMLTree_Type& RPG_Client_GraphicsMode_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Client_RuntimeState_XMLTree_Type
// 

const RPG_Client_RuntimeState_XMLTree_Type::style_type& RPG_Client_RuntimeState_XMLTree_Type::
style () const
{
  return this->style_.get ();
}

RPG_Client_RuntimeState_XMLTree_Type::style_type& RPG_Client_RuntimeState_XMLTree_Type::
style ()
{
  return this->style_.get ();
}

void RPG_Client_RuntimeState_XMLTree_Type::
style (const style_type& x)
{
  this->style_.set (x);
}

void RPG_Client_RuntimeState_XMLTree_Type::
style (::std::auto_ptr< style_type > x)
{
  this->style_.set (x);
}

const RPG_Client_RuntimeState_XMLTree_Type::entities_sequence& RPG_Client_RuntimeState_XMLTree_Type::
entities () const
{
  return this->entities_;
}

RPG_Client_RuntimeState_XMLTree_Type::entities_sequence& RPG_Client_RuntimeState_XMLTree_Type::
entities ()
{
  return this->entities_;
}

void RPG_Client_RuntimeState_XMLTree_Type::
entities (const entities_sequence& s)
{
  this->entities_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Client_GraphicsMode_XMLTree_Type
//

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
}

RPG_Client_GraphicsMode_XMLTree_Type::
RPG_Client_GraphicsMode_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert ();
}

RPG_Client_GraphicsMode_XMLTree_Type* RPG_Client_GraphicsMode_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Client_GraphicsMode_XMLTree_Type (*this, f, c);
}

RPG_Client_GraphicsMode_XMLTree_Type::value RPG_Client_GraphicsMode_XMLTree_Type::
_xsd_RPG_Client_GraphicsMode_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_,
                    _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Client_GraphicsMode_XMLTree_Type::
_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[3] =
{
  "GRAPHICSMODE_2D_ISOMETRIC",
  "GRAPHICSMODE_2D_OPENGL",
  "GRAPHICSMODE_3D"
};

const RPG_Client_GraphicsMode_XMLTree_Type::value RPG_Client_GraphicsMode_XMLTree_Type::
_xsd_RPG_Client_GraphicsMode_XMLTree_Type_indexes_[3] =
{
  ::RPG_Client_GraphicsMode_XMLTree_Type::GRAPHICSMODE_2D_ISOMETRIC,
  ::RPG_Client_GraphicsMode_XMLTree_Type::GRAPHICSMODE_2D_OPENGL,
  ::RPG_Client_GraphicsMode_XMLTree_Type::GRAPHICSMODE_3D
};

// RPG_Client_RuntimeState_XMLTree_Type
//

RPG_Client_RuntimeState_XMLTree_Type::
RPG_Client_RuntimeState_XMLTree_Type (const style_type& style)
: ::xml_schema::type (),
  style_ (style, ::xml_schema::flags (), this),
  entities_ (::xml_schema::flags (), this)
{
}

RPG_Client_RuntimeState_XMLTree_Type::
RPG_Client_RuntimeState_XMLTree_Type (::std::auto_ptr< style_type >& style)
: ::xml_schema::type (),
  style_ (style, ::xml_schema::flags (), this),
  entities_ (::xml_schema::flags (), this)
{
}

RPG_Client_RuntimeState_XMLTree_Type::
RPG_Client_RuntimeState_XMLTree_Type (const RPG_Client_RuntimeState_XMLTree_Type& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  style_ (x.style_, f, this),
  entities_ (x.entities_, f, this)
{
}

RPG_Client_RuntimeState_XMLTree_Type::
RPG_Client_RuntimeState_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  style_ (f, this),
  entities_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Client_RuntimeState_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // style
    //
    if (n.name () == "style" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< style_type > r (
        style_traits::create (i, f, this));

      if (!style_.present ())
      {
        this->style_.set (r);
        continue;
      }
    }

    // entities
    //
    if (n.name () == "entities" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< entities_type > r (
        entities_traits::create (i, f, this));

      this->entities_.push_back (r);
      continue;
    }

    break;
  }

  if (!style_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "style",
      "urn:rpg");
  }
}

RPG_Client_RuntimeState_XMLTree_Type* RPG_Client_RuntimeState_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Client_RuntimeState_XMLTree_Type (*this, f, c);
}

RPG_Client_RuntimeState_XMLTree_Type::
~RPG_Client_RuntimeState_XMLTree_Type ()
{
}

bool
operator== (const RPG_Client_RuntimeState_XMLTree_Type& x, const RPG_Client_RuntimeState_XMLTree_Type& y)
{
  if (!(x.style () == y.style ()))
    return false;

  if (!(x.entities () == y.entities ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Client_RuntimeState_XMLTree_Type& x, const RPG_Client_RuntimeState_XMLTree_Type& y)
{
  return !(x == y);
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Client_GraphicsMode_XMLTree_Type::value i)
{
  return o << RPG_Client_GraphicsMode_XMLTree_Type::_xsd_RPG_Client_GraphicsMode_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Client_RuntimeState_XMLTree_Type& i)
{
  o << ::std::endl << "style: " << i.style ();
  for (RPG_Client_RuntimeState_XMLTree_Type::entities_const_iterator
       b (i.entities ().begin ()), e (i.entities ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "entities: " << *b;
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Client_GraphicsMode_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Client_RuntimeState_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // style
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "style",
        "urn:rpg",
        e));

    s << i.style ();
  }

  // entities
  //
  for (RPG_Client_RuntimeState_XMLTree_Type::entities_const_iterator
       b (i.entities ().begin ()), n (i.entities ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "entities",
        "urn:rpg",
        e));

    s << *b;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

