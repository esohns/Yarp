// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___RPG_GRAPHICS_XML_TREE_H
#define CXX___RPG_GRAPHICS_XML_TREE_H

// Begin prologue.
//
#include "rpg_graphics_exports.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Graphics_Category_XMLTree_Type;
class RPG_Graphics_Orientation_XMLTree_Type;
class RPG_Graphics_TileType_XMLTree_Type;
class RPG_Graphics_FloorStyle_XMLTree_Type;
class RPG_Graphics_StairsStyle_XMLTree_Type;
class RPG_Graphics_WallStyle_XMLTree_Type;
class RPG_Graphics_EdgeStyle_XMLTree_Type;
class RPG_Graphics_DoorStyle_XMLTree_Type;
class RPG_Graphics_StyleUnion_XMLTree_Type;
class RPG_Graphics_Cursor_XMLTree_Type;
class RPG_Graphics_Font_XMLTree_Type;
class RPG_Graphics_Image_XMLTree_Type;
class RPG_Graphics_Sprite_XMLTree_Type;
class RPG_Graphics_TileGraphic_XMLTree_Type;
class RPG_Graphics_TileSetGraphic_XMLTree_Type;
class RPG_Graphics_GraphicTypeUnion_XMLTree_Type;
class RPG_Graphics_WindowType_XMLTree_Type;
class RPG_Graphics_InterfaceElementType_XMLTree_Type;
class RPG_Graphics_HotspotType_XMLTree_Type;
class RPG_Graphics_ElementTypeUnion_XMLTree_Type;
class RPG_Graphics_Element_XMLTree_Type;
class RPG_Graphics_Tile_XMLTree_Type;
class RPG_Graphics_TileSetType_XMLTree_Type;
class RPG_Graphics_TileSet_XMLTree_Type;
class RPG_Graphics_Graphic_XMLTree_Type;
class RPG_Graphics_Dictionary_XMLTree_Type;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

class RPG_Graphics_Export RPG_Graphics_Category_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    CATEGORY_CURSOR,
    CATEGORY_FONT,
    CATEGORY_INTERFACE,
    CATEGORY_IMAGE,
    CATEGORY_SPRITE,
    CATEGORY_TILE,
    CATEGORY_TILESET
  };

  RPG_Graphics_Category_XMLTree_Type (value v);

  RPG_Graphics_Category_XMLTree_Type (const char* v);

  RPG_Graphics_Category_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_Category_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_Category_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_Category_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_Category_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_Category_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_Category_XMLTree_Type (const RPG_Graphics_Category_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Category_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_Category_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_Category_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_Category_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_Category_XMLTree_Type_literals_[7];
  static const value _xsd_RPG_Graphics_Category_XMLTree_Type_indexes_[7];
};

class RPG_Graphics_Export RPG_Graphics_Orientation_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ORIENTATION_NORTH,
    ORIENTATION_NORTH_EAST,
    ORIENTATION_NORTH_WEST,
    ORIENTATION_SOUTH,
    ORIENTATION_SOUTH_EAST,
    ORIENTATION_SOUTH_WEST,
    ORIENTATION_WEST,
    ORIENTATION_EAST,
    ORIENTATION_HORIZONTAL,
    ORIENTATION_VERTICAL
  };

  RPG_Graphics_Orientation_XMLTree_Type (value v);

  RPG_Graphics_Orientation_XMLTree_Type (const char* v);

  RPG_Graphics_Orientation_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_Orientation_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_Orientation_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_Orientation_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_Orientation_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_Orientation_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_Orientation_XMLTree_Type (const RPG_Graphics_Orientation_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Orientation_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_Orientation_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_Orientation_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_Orientation_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_[10];
  static const value _xsd_RPG_Graphics_Orientation_XMLTree_Type_indexes_[10];
};

class RPG_Graphics_Export RPG_Graphics_TileType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    TILETYPE_DOOR,
    TILETYPE_EDGE_FLOOR,
    TILETYPE_EFFECT,
    TILETYPE_FIGURINE,
    TILETYPE_FLOOR,
    TILETYPE_MONSTER,
    TILETYPE_OBJECT,
    TILETYPE_WALL
  };

  RPG_Graphics_TileType_XMLTree_Type (value v);

  RPG_Graphics_TileType_XMLTree_Type (const char* v);

  RPG_Graphics_TileType_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_TileType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_TileType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_TileType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_TileType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_TileType_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Graphics_TileType_XMLTree_Type (const RPG_Graphics_TileType_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Graphics_TileType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_TileType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_TileType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_TileType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_TileType_XMLTree_Type_literals_[8];
  static const value _xsd_RPG_Graphics_TileType_XMLTree_Type_indexes_[8];
};

class RPG_Graphics_Export RPG_Graphics_FloorStyle_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    FLOORSTYLE_AIR,
    FLOORSTYLE_CARPET,
    FLOORSTYLE_CERAMIC,
    FLOORSTYLE_DARK,
    FLOORSTYLE_ICE,
    FLOORSTYLE_LAVA,
    FLOORSTYLE_MARBLE,
    FLOORSTYLE_MURAL,
    FLOORSTYLE_MURAL2,
    FLOORSTYLE_ROUGH,
    FLOORSTYLE_ROUGH_LIT,
    FLOORSTYLE_STONE_COBBLED,
    FLOORSTYLE_STONE_MOSS_COVERED,
    FLOORSTYLE_WATER
  };

  RPG_Graphics_FloorStyle_XMLTree_Type (value v);

  RPG_Graphics_FloorStyle_XMLTree_Type (const char* v);

  RPG_Graphics_FloorStyle_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_FloorStyle_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_FloorStyle_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_FloorStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_FloorStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_FloorStyle_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_FloorStyle_XMLTree_Type (const RPG_Graphics_FloorStyle_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Graphics_FloorStyle_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_FloorStyle_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_[14];
  static const value _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_indexes_[14];
};

class RPG_Graphics_Export RPG_Graphics_StairsStyle_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    STAIRSSTYLE_LADDER,
    STAIRSSTYLE_STAIRWAY,
    STAIRSSTYLE_PORTAL
  };

  RPG_Graphics_StairsStyle_XMLTree_Type (value v);

  RPG_Graphics_StairsStyle_XMLTree_Type (const char* v);

  RPG_Graphics_StairsStyle_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_StairsStyle_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_StairsStyle_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_StairsStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_StairsStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_StairsStyle_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_StairsStyle_XMLTree_Type (const RPG_Graphics_StairsStyle_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Graphics_StairsStyle_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_StairsStyle_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_indexes_[3];
};

class RPG_Graphics_Export RPG_Graphics_WallStyle_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    WALLSTYLE_BRICK,
    WALLSTYLE_BRICK_BANNER,
    WALLSTYLE_BRICK_PAINTING,
    WALLSTYLE_BRICK_PILLAR,
    WALLSTYLE_BRICK_POCKET,
    WALLSTYLE_DARK,
    WALLSTYLE_LIGHT,
    WALLSTYLE_MARBLE,
    WALLSTYLE_ROUGH,
    WALLSTYLE_STUCCO,
    WALLSTYLE_VINE_COVERED
  };

  RPG_Graphics_WallStyle_XMLTree_Type (value v);

  RPG_Graphics_WallStyle_XMLTree_Type (const char* v);

  RPG_Graphics_WallStyle_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_WallStyle_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_WallStyle_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_WallStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_WallStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_WallStyle_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_WallStyle_XMLTree_Type (const RPG_Graphics_WallStyle_XMLTree_Type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual RPG_Graphics_WallStyle_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_WallStyle_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_WallStyle_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_WallStyle_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_[11];
  static const value _xsd_RPG_Graphics_WallStyle_XMLTree_Type_indexes_[11];
};

class RPG_Graphics_Export RPG_Graphics_EdgeStyle_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    EDGESTYLE_FLOOR_STONE_COBBLED
  };

  RPG_Graphics_EdgeStyle_XMLTree_Type (value v);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const char* v);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_EdgeStyle_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_EdgeStyle_XMLTree_Type (const RPG_Graphics_EdgeStyle_XMLTree_Type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual RPG_Graphics_EdgeStyle_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_EdgeStyle_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_[1];
  static const value _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_indexes_[1];
};

class RPG_Graphics_Export RPG_Graphics_DoorStyle_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    DOORSTYLE_DRAWBRIDGE,
    DOORSTYLE_TELEPORTER,
    DOORSTYLE_WOOD
  };

  RPG_Graphics_DoorStyle_XMLTree_Type (value v);

  RPG_Graphics_DoorStyle_XMLTree_Type (const char* v);

  RPG_Graphics_DoorStyle_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_DoorStyle_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_DoorStyle_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_DoorStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_DoorStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_DoorStyle_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Graphics_DoorStyle_XMLTree_Type (const RPG_Graphics_DoorStyle_XMLTree_Type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual RPG_Graphics_DoorStyle_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_DoorStyle_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_indexes_[3];
};

class RPG_Graphics_Export RPG_Graphics_StyleUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    FLOORSTYLE_AIR,
    FLOORSTYLE_CARPET,
    FLOORSTYLE_CERAMIC,
    FLOORSTYLE_DARK,
    FLOORSTYLE_ICE,
    FLOORSTYLE_LAVA,
    FLOORSTYLE_MARBLE,
    FLOORSTYLE_MURAL,
    FLOORSTYLE_MURAL2,
    FLOORSTYLE_ROUGH,
    FLOORSTYLE_ROUGH_LIT,
    FLOORSTYLE_STONE_COBBLED,
    FLOORSTYLE_STONE_MOSS_COVERED,
    FLOORSTYLE_WATER,
    STAIRSSTYLE_LADDER,
    STAIRSSTYLE_STAIRWAY,
    STAIRSSTYLE_PORTAL,
    WALLSTYLE_BRICK,
    WALLSTYLE_BRICK_BANNER,
    WALLSTYLE_BRICK_PAINTING,
    WALLSTYLE_BRICK_PILLAR,
    WALLSTYLE_BRICK_POCKET,
    WALLSTYLE_DARK,
    WALLSTYLE_LIGHT,
    WALLSTYLE_MARBLE,
    WALLSTYLE_ROUGH,
    WALLSTYLE_STUCCO,
    WALLSTYLE_VINE_COVERED,
    EDGESTYLE_FLOOR_STONE_COBBLED,
    DOORSTYLE_DRAWBRIDGE,
    DOORSTYLE_TELEPORTER,
    DOORSTYLE_WOOD
  };

  RPG_Graphics_StyleUnion_XMLTree_Type (value v);

  RPG_Graphics_StyleUnion_XMLTree_Type (const char* v);

  RPG_Graphics_StyleUnion_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_StyleUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_StyleUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_StyleUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_StyleUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_StyleUnion_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_StyleUnion_XMLTree_Type (const RPG_Graphics_StyleUnion_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Graphics_StyleUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_StyleUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_[32];
  static const value _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_indexes_[32];
};

class RPG_Graphics_Export RPG_Graphics_Cursor_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    CURSOR_DOOR_OPEN,
    CURSOR_NORMAL,
    CURSOR_SCROLL_D,
    CURSOR_SCROLL_DL,
    CURSOR_SCROLL_DR,
    CURSOR_SCROLL_L,
    CURSOR_SCROLL_R,
    CURSOR_SCROLL_U,
    CURSOR_SCROLL_UL,
    CURSOR_SCROLL_UR,
    CURSOR_STAIRS,
    CURSOR_TARGET,
    CURSOR_TARGET_INVALID,
    CURSOR_TRAVEL,
    CURSOR_WAIT
  };

  RPG_Graphics_Cursor_XMLTree_Type (value v);

  RPG_Graphics_Cursor_XMLTree_Type (const char* v);

  RPG_Graphics_Cursor_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_Cursor_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_Cursor_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Cursor_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Cursor_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Cursor_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Cursor_XMLTree_Type (const RPG_Graphics_Cursor_XMLTree_Type& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Cursor_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_Cursor_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_Cursor_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_Cursor_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_[15];
  static const value _xsd_RPG_Graphics_Cursor_XMLTree_Type_indexes_[15];
};

class RPG_Graphics_Export RPG_Graphics_Font_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    FONT_MAIN_SMALL,
    FONT_MAIN_NORMAL,
    FONT_MAIN_LARGE
  };

  RPG_Graphics_Font_XMLTree_Type (value v);

  RPG_Graphics_Font_XMLTree_Type (const char* v);

  RPG_Graphics_Font_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_Font_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_Font_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Graphics_Font_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Graphics_Font_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Graphics_Font_XMLTree_Type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Graphics_Font_XMLTree_Type (const RPG_Graphics_Font_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Font_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_Font_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_Font_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_Font_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_Font_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Graphics_Font_XMLTree_Type_indexes_[3];
};

class RPG_Graphics_Export RPG_Graphics_Image_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    IMAGE_INTERFACE_MAIN,
    IMAGE_INTERFACE_MINIMAP,
    IMAGE_INTRO_MAIN,
    IMAGE_WM_ICON
  };

  RPG_Graphics_Image_XMLTree_Type (value v);

  RPG_Graphics_Image_XMLTree_Type (const char* v);

  RPG_Graphics_Image_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_Image_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_Image_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  RPG_Graphics_Image_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  RPG_Graphics_Image_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  RPG_Graphics_Image_XMLTree_Type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  RPG_Graphics_Image_XMLTree_Type (const RPG_Graphics_Image_XMLTree_Type& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Image_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_Image_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_Image_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_Image_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_Image_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Graphics_Image_XMLTree_Type_indexes_[4];
};

class RPG_Graphics_Export RPG_Graphics_Sprite_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SPRITE_GOBLIN,
    SPRITE_HUMAN,
    SPRITE_PRIEST
  };

  RPG_Graphics_Sprite_XMLTree_Type (value v);

  RPG_Graphics_Sprite_XMLTree_Type (const char* v);

  RPG_Graphics_Sprite_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_Sprite_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_Sprite_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Sprite_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Sprite_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Sprite_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Graphics_Sprite_XMLTree_Type (const RPG_Graphics_Sprite_XMLTree_Type& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Sprite_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_Sprite_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_Sprite_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_Sprite_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Graphics_Sprite_XMLTree_Type_indexes_[3];
};

class RPG_Graphics_Export RPG_Graphics_TileGraphic_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    TILE_CEILING,
    TILE_CURSOR_HIGHLIGHT,
    TILE_FLOOR_INVISIBLE,
    TILE_OFF_MAP
  };

  RPG_Graphics_TileGraphic_XMLTree_Type (value v);

  RPG_Graphics_TileGraphic_XMLTree_Type (const char* v);

  RPG_Graphics_TileGraphic_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_TileGraphic_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_TileGraphic_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileGraphic_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileGraphic_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileGraphic_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileGraphic_XMLTree_Type (const RPG_Graphics_TileGraphic_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Graphics_TileGraphic_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_TileGraphic_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_indexes_[4];
};

class RPG_Graphics_Export RPG_Graphics_TileSetGraphic_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    TILESET_DOOR_WOOD,
    TILESET_FLOOR_AIR,
    TILESET_FLOOR_CARPET,
    TILESET_FLOOR_CERAMIC,
    TILESET_FLOOR_DARK,
    TILESET_FLOOR_ICE,
    TILESET_FLOOR_LAVA,
    TILESET_FLOOR_MARBLE,
    TILESET_FLOOR_MURAL,
    TILESET_FLOOR_MURAL2,
    TILESET_FLOOR_ROUGH,
    TILESET_FLOOR_ROUGH_LIT,
    TILESET_FLOOR_STONE_COBBLED,
    TILESET_FLOOR_STONE_MOSS_COVERED,
    TILESET_FLOOR_WATER,
    TILESET_EDGE_FLOOR_STONE_COBBLED,
    TILESET_WALL_BRICK,
    TILESET_WALL_BRICK_HALF,
    TILESET_WALL_BRICK_BANNER,
    TILESET_WALL_BRICK_BANNER_HALF,
    TILESET_WALL_BRICK_PAINTING,
    TILESET_WALL_BRICK_PAINTING_HALF,
    TILESET_WALL_BRICK_PILLAR,
    TILESET_WALL_BRICK_PILLAR_HALF,
    TILESET_WALL_BRICK_POCKET,
    TILESET_WALL_BRICK_POCKET_HALF,
    TILESET_WALL_DARK,
    TILESET_WALL_DARK_HALF,
    TILESET_WALL_LIGHT,
    TILESET_WALL_LIGHT_HALF,
    TILESET_WALL_MARBLE,
    TILESET_WALL_MARBLE_HALF,
    TILESET_WALL_ROUGH,
    TILESET_WALL_ROUGH_HALF,
    TILESET_WALL_STUCCO,
    TILESET_WALL_STUCCO_HALF,
    TILESET_WALL_VINE_COVERED,
    TILESET_WALL_VINE_COVERED_HALF
  };

  RPG_Graphics_TileSetGraphic_XMLTree_Type (value v);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const char* v);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetGraphic_XMLTree_Type (const RPG_Graphics_TileSetGraphic_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Graphics_TileSetGraphic_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_TileSetGraphic_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_[38];
  static const value _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_indexes_[38];
};

class RPG_Graphics_Export RPG_Graphics_GraphicTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    CURSOR_DOOR_OPEN,
    CURSOR_NORMAL,
    CURSOR_SCROLL_D,
    CURSOR_SCROLL_DL,
    CURSOR_SCROLL_DR,
    CURSOR_SCROLL_L,
    CURSOR_SCROLL_R,
    CURSOR_SCROLL_U,
    CURSOR_SCROLL_UL,
    CURSOR_SCROLL_UR,
    CURSOR_STAIRS,
    CURSOR_TARGET,
    CURSOR_TARGET_INVALID,
    CURSOR_TRAVEL,
    CURSOR_WAIT,
    FONT_MAIN_SMALL,
    FONT_MAIN_NORMAL,
    FONT_MAIN_LARGE,
    IMAGE_INTERFACE_MAIN,
    IMAGE_INTERFACE_MINIMAP,
    IMAGE_INTRO_MAIN,
    IMAGE_WM_ICON,
    SPRITE_GOBLIN,
    SPRITE_HUMAN,
    SPRITE_PRIEST,
    TILE_CEILING,
    TILE_CURSOR_HIGHLIGHT,
    TILE_FLOOR_INVISIBLE,
    TILE_OFF_MAP,
    TILESET_DOOR_WOOD,
    TILESET_FLOOR_AIR,
    TILESET_FLOOR_CARPET,
    TILESET_FLOOR_CERAMIC,
    TILESET_FLOOR_DARK,
    TILESET_FLOOR_ICE,
    TILESET_FLOOR_LAVA,
    TILESET_FLOOR_MARBLE,
    TILESET_FLOOR_MURAL,
    TILESET_FLOOR_MURAL2,
    TILESET_FLOOR_ROUGH,
    TILESET_FLOOR_ROUGH_LIT,
    TILESET_FLOOR_STONE_COBBLED,
    TILESET_FLOOR_STONE_MOSS_COVERED,
    TILESET_FLOOR_WATER,
    TILESET_EDGE_FLOOR_STONE_COBBLED,
    TILESET_WALL_BRICK,
    TILESET_WALL_BRICK_HALF,
    TILESET_WALL_BRICK_BANNER,
    TILESET_WALL_BRICK_BANNER_HALF,
    TILESET_WALL_BRICK_PAINTING,
    TILESET_WALL_BRICK_PAINTING_HALF,
    TILESET_WALL_BRICK_PILLAR,
    TILESET_WALL_BRICK_PILLAR_HALF,
    TILESET_WALL_BRICK_POCKET,
    TILESET_WALL_BRICK_POCKET_HALF,
    TILESET_WALL_DARK,
    TILESET_WALL_DARK_HALF,
    TILESET_WALL_LIGHT,
    TILESET_WALL_LIGHT_HALF,
    TILESET_WALL_MARBLE,
    TILESET_WALL_MARBLE_HALF,
    TILESET_WALL_ROUGH,
    TILESET_WALL_ROUGH_HALF,
    TILESET_WALL_STUCCO,
    TILESET_WALL_STUCCO_HALF,
    TILESET_WALL_VINE_COVERED,
    TILESET_WALL_VINE_COVERED_HALF
  };

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (value v);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const char* v);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const RPG_Graphics_GraphicTypeUnion_XMLTree_Type& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  virtual RPG_Graphics_GraphicTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_GraphicTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_[67];
  static const value _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_indexes_[67];
};

class RPG_Graphics_Export RPG_Graphics_WindowType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    WINDOW_HOTSPOT,
    WINDOW_MAIN,
    WINDOW_MAP,
    WINDOW_MENU,
    WINDOW_MESSAGE,
    WINDOW_MINIMAP
  };

  RPG_Graphics_WindowType_XMLTree_Type (value v);

  RPG_Graphics_WindowType_XMLTree_Type (const char* v);

  RPG_Graphics_WindowType_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_WindowType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_WindowType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_WindowType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_WindowType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_WindowType_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_WindowType_XMLTree_Type (const RPG_Graphics_WindowType_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Graphics_WindowType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_WindowType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_WindowType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_WindowType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_[6];
  static const value _xsd_RPG_Graphics_WindowType_XMLTree_Type_indexes_[6];
};

class RPG_Graphics_Export RPG_Graphics_InterfaceElementType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    INTERFACEELEMENT_BORDER_TOP_LEFT,
    INTERFACEELEMENT_BORDER_TOP_RIGHT,
    INTERFACEELEMENT_BORDER_BOTTOM_LEFT,
    INTERFACEELEMENT_BORDER_BOTTOM_RIGHT,
    INTERFACEELEMENT_BORDER_TOP,
    INTERFACEELEMENT_BORDER_RIGHT,
    INTERFACEELEMENT_BORDER_LEFT,
    INTERFACEELEMENT_BORDER_BOTTOM,
    INTERFACEELEMENT_BORDER_CENTER,
    INTERFACEELEMENT_BACKGROUND
  };

  RPG_Graphics_InterfaceElementType_XMLTree_Type (value v);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const char* v);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::std::string& s,
                                                  const ::xercesc::DOMElement* e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  RPG_Graphics_InterfaceElementType_XMLTree_Type (const RPG_Graphics_InterfaceElementType_XMLTree_Type& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

  virtual RPG_Graphics_InterfaceElementType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_InterfaceElementType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_[10];
  static const value _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_indexes_[10];
};

class RPG_Graphics_Export RPG_Graphics_HotspotType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    HOTSPOT_ABSOLUTE,
    HOTSPOT_RELATIVE
  };

  RPG_Graphics_HotspotType_XMLTree_Type (value v);

  RPG_Graphics_HotspotType_XMLTree_Type (const char* v);

  RPG_Graphics_HotspotType_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_HotspotType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_HotspotType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_HotspotType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_HotspotType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_HotspotType_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_HotspotType_XMLTree_Type (const RPG_Graphics_HotspotType_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Graphics_HotspotType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_HotspotType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_HotspotType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_HotspotType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_[2];
  static const value _xsd_RPG_Graphics_HotspotType_XMLTree_Type_indexes_[2];
};

class RPG_Graphics_Export RPG_Graphics_ElementTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    INTERFACEELEMENT_BORDER_TOP_LEFT,
    INTERFACEELEMENT_BORDER_TOP_RIGHT,
    INTERFACEELEMENT_BORDER_BOTTOM_LEFT,
    INTERFACEELEMENT_BORDER_BOTTOM_RIGHT,
    INTERFACEELEMENT_BORDER_TOP,
    INTERFACEELEMENT_BORDER_RIGHT,
    INTERFACEELEMENT_BORDER_LEFT,
    INTERFACEELEMENT_BORDER_BOTTOM,
    INTERFACEELEMENT_BORDER_CENTER,
    INTERFACEELEMENT_BACKGROUND,
    HOTSPOT_ABSOLUTE,
    HOTSPOT_RELATIVE
  };

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (value v);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const char* v);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Graphics_ElementTypeUnion_XMLTree_Type (const RPG_Graphics_ElementTypeUnion_XMLTree_Type& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  virtual RPG_Graphics_ElementTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_ElementTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_[12];
  static const value _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_indexes_[12];
};

class RPG_Graphics_Export RPG_Graphics_Element_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Graphics_ElementTypeUnion_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // window
  // 
  typedef ::RPG_Graphics_WindowType_XMLTree_Type window_type;
  typedef ::xsd::cxx::tree::optional< window_type > window_optional;
  typedef ::xsd::cxx::tree::traits< window_type, char > window_traits;

  const window_optional&
  window () const;

  window_optional&
  window ();

  void
  window (const window_type& x);

  void
  window (const window_optional& x);

  void
  window (::std::auto_ptr< window_type > p);

  // offsetX
  // 
  typedef ::xml_schema::unsigned_int offsetX_type;
  typedef ::xsd::cxx::tree::optional< offsetX_type > offsetX_optional;
  typedef ::xsd::cxx::tree::traits< offsetX_type, char > offsetX_traits;

  const offsetX_optional&
  offsetX () const;

  offsetX_optional&
  offsetX ();

  void
  offsetX (const offsetX_type& x);

  void
  offsetX (const offsetX_optional& x);

  // offsetY
  // 
  typedef ::xml_schema::unsigned_int offsetY_type;
  typedef ::xsd::cxx::tree::optional< offsetY_type > offsetY_optional;
  typedef ::xsd::cxx::tree::traits< offsetY_type, char > offsetY_traits;

  const offsetY_optional&
  offsetY () const;

  offsetY_optional&
  offsetY ();

  void
  offsetY (const offsetY_type& x);

  void
  offsetY (const offsetY_optional& x);

  // width
  // 
  typedef ::xml_schema::unsigned_int width_type;
  typedef ::xsd::cxx::tree::optional< width_type > width_optional;
  typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

  const width_optional&
  width () const;

  width_optional&
  width ();

  void
  width (const width_type& x);

  void
  width (const width_optional& x);

  // height
  // 
  typedef ::xml_schema::unsigned_int height_type;
  typedef ::xsd::cxx::tree::optional< height_type > height_optional;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_optional&
  height () const;

  height_optional&
  height ();

  void
  height (const height_type& x);

  void
  height (const height_optional& x);

  // Constructors.
  //
  RPG_Graphics_Element_XMLTree_Type (const type_type&);

  RPG_Graphics_Element_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Graphics_Element_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Graphics_Element_XMLTree_Type (const RPG_Graphics_Element_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Element_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Graphics_Element_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  window_optional window_;
  offsetX_optional offsetX_;
  offsetY_optional offsetY_;
  width_optional width_;
  height_optional height_;
};

RPG_Graphics_Export
bool
operator== (const RPG_Graphics_Element_XMLTree_Type&, const RPG_Graphics_Element_XMLTree_Type&);

RPG_Graphics_Export
bool
operator!= (const RPG_Graphics_Element_XMLTree_Type&, const RPG_Graphics_Element_XMLTree_Type&);


class RPG_Graphics_Export RPG_Graphics_Tile_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Graphics_TileType_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // reference
  // 
  typedef ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type reference_type;
  typedef ::xsd::cxx::tree::optional< reference_type > reference_optional;
  typedef ::xsd::cxx::tree::traits< reference_type, char > reference_traits;

  const reference_optional&
  reference () const;

  reference_optional&
  reference ();

  void
  reference (const reference_type& x);

  void
  reference (const reference_optional& x);

  void
  reference (::std::auto_ptr< reference_type > p);

  // style
  // 
  typedef ::RPG_Graphics_StyleUnion_XMLTree_Type style_type;
  typedef ::xsd::cxx::tree::optional< style_type > style_optional;
  typedef ::xsd::cxx::tree::traits< style_type, char > style_traits;

  const style_optional&
  style () const;

  style_optional&
  style ();

  void
  style (const style_type& x);

  void
  style (const style_optional& x);

  void
  style (::std::auto_ptr< style_type > p);

  // orientation
  // 
  typedef ::RPG_Graphics_Orientation_XMLTree_Type orientation_type;
  typedef ::xsd::cxx::tree::optional< orientation_type > orientation_optional;
  typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

  const orientation_optional&
  orientation () const;

  orientation_optional&
  orientation ();

  void
  orientation (const orientation_type& x);

  void
  orientation (const orientation_optional& x);

  void
  orientation (::std::auto_ptr< orientation_type > p);

  // file
  // 
  typedef ::xml_schema::string file_type;
  typedef ::xsd::cxx::tree::optional< file_type > file_optional;
  typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

  const file_optional&
  file () const;

  file_optional&
  file ();

  void
  file (const file_type& x);

  void
  file (const file_optional& x);

  void
  file (::std::auto_ptr< file_type > p);

  // offsetX
  // 
  typedef ::xml_schema::int_ offsetX_type;
  typedef ::xsd::cxx::tree::traits< offsetX_type, char > offsetX_traits;

  const offsetX_type&
  offsetX () const;

  offsetX_type&
  offsetX ();

  void
  offsetX (const offsetX_type& x);

  static offsetX_type
  offsetX_default_value ();

  // offsetY
  // 
  typedef ::xml_schema::int_ offsetY_type;
  typedef ::xsd::cxx::tree::traits< offsetY_type, char > offsetY_traits;

  const offsetY_type&
  offsetY () const;

  offsetY_type&
  offsetY ();

  void
  offsetY (const offsetY_type& x);

  static offsetY_type
  offsetY_default_value ();

  // open
  // 
  typedef ::xml_schema::boolean open_type;
  typedef ::xsd::cxx::tree::traits< open_type, char > open_traits;

  const open_type&
  open () const;

  open_type&
  open ();

  void
  open (const open_type& x);

  static open_type
  open_default_value ();

  // broken
  // 
  typedef ::xml_schema::boolean broken_type;
  typedef ::xsd::cxx::tree::traits< broken_type, char > broken_traits;

  const broken_type&
  broken () const;

  broken_type&
  broken ();

  void
  broken (const broken_type& x);

  static broken_type
  broken_default_value ();

  // Constructors.
  //
  RPG_Graphics_Tile_XMLTree_Type (const type_type&);

  RPG_Graphics_Tile_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Graphics_Tile_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Graphics_Tile_XMLTree_Type (const RPG_Graphics_Tile_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Tile_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Graphics_Tile_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  reference_optional reference_;
  style_optional style_;
  orientation_optional orientation_;
  file_optional file_;
  ::xsd::cxx::tree::one< offsetX_type > offsetX_;
  ::xsd::cxx::tree::one< offsetY_type > offsetY_;
  ::xsd::cxx::tree::one< open_type > open_;
  ::xsd::cxx::tree::one< broken_type > broken_;
};

RPG_Graphics_Export
bool
operator== (const RPG_Graphics_Tile_XMLTree_Type&, const RPG_Graphics_Tile_XMLTree_Type&);

RPG_Graphics_Export
bool
operator!= (const RPG_Graphics_Tile_XMLTree_Type&, const RPG_Graphics_Tile_XMLTree_Type&);


class RPG_Graphics_Export RPG_Graphics_TileSetType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    TILESETTYPE_DOOR,
    TILESETTYPE_EDGE_FLOOR,
    TILESETTYPE_FLOOR,
    TILESETTYPE_WALL
  };

  RPG_Graphics_TileSetType_XMLTree_Type (value v);

  RPG_Graphics_TileSetType_XMLTree_Type (const char* v);

  RPG_Graphics_TileSetType_XMLTree_Type (const ::std::string& v);

  RPG_Graphics_TileSetType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Graphics_TileSetType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetType_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  RPG_Graphics_TileSetType_XMLTree_Type (const RPG_Graphics_TileSetType_XMLTree_Type& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual RPG_Graphics_TileSetType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Graphics_TileSetType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Graphics_TileSetType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Graphics_TileSetType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Graphics_TileSetType_XMLTree_Type_indexes_[4];
};

class RPG_Graphics_Export RPG_Graphics_TileSet_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Graphics_TileSetType_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // style
  // 
  typedef ::RPG_Graphics_StyleUnion_XMLTree_Type style_type;
  typedef ::xsd::cxx::tree::optional< style_type > style_optional;
  typedef ::xsd::cxx::tree::traits< style_type, char > style_traits;

  const style_optional&
  style () const;

  style_optional&
  style ();

  void
  style (const style_type& x);

  void
  style (const style_optional& x);

  void
  style (::std::auto_ptr< style_type > p);

  // tile
  // 
  typedef ::RPG_Graphics_Tile_XMLTree_Type tile_type;
  typedef ::xsd::cxx::tree::sequence< tile_type > tile_sequence;
  typedef tile_sequence::iterator tile_iterator;
  typedef tile_sequence::const_iterator tile_const_iterator;
  typedef ::xsd::cxx::tree::traits< tile_type, char > tile_traits;

  const tile_sequence&
  tile () const;

  tile_sequence&
  tile ();

  void
  tile (const tile_sequence& s);

  // half
  // 
  typedef ::xml_schema::boolean half_type;
  typedef ::xsd::cxx::tree::traits< half_type, char > half_traits;

  const half_type&
  half () const;

  half_type&
  half ();

  void
  half (const half_type& x);

  static half_type
  half_default_value ();

  // Constructors.
  //
  RPG_Graphics_TileSet_XMLTree_Type (const type_type&);

  RPG_Graphics_TileSet_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Graphics_TileSet_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Graphics_TileSet_XMLTree_Type (const RPG_Graphics_TileSet_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Graphics_TileSet_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Graphics_TileSet_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  style_optional style_;
  tile_sequence tile_;
  ::xsd::cxx::tree::one< half_type > half_;
};

RPG_Graphics_Export
bool
operator== (const RPG_Graphics_TileSet_XMLTree_Type&, const RPG_Graphics_TileSet_XMLTree_Type&);

RPG_Graphics_Export
bool
operator!= (const RPG_Graphics_TileSet_XMLTree_Type&, const RPG_Graphics_TileSet_XMLTree_Type&);


class RPG_Graphics_Export RPG_Graphics_Graphic_XMLTree_Type: public ::xml_schema::type
{
  public:
  // category
  // 
  typedef ::RPG_Graphics_Category_XMLTree_Type category_type;
  typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

  const category_type&
  category () const;

  category_type&
  category ();

  void
  category (const category_type& x);

  void
  category (::std::auto_ptr< category_type > p);

  // type
  // 
  typedef ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // tile
  // 
  typedef ::RPG_Graphics_Tile_XMLTree_Type tile_type;
  typedef ::xsd::cxx::tree::optional< tile_type > tile_optional;
  typedef ::xsd::cxx::tree::traits< tile_type, char > tile_traits;

  const tile_optional&
  tile () const;

  tile_optional&
  tile ();

  void
  tile (const tile_type& x);

  void
  tile (const tile_optional& x);

  void
  tile (::std::auto_ptr< tile_type > p);

  // tileset
  // 
  typedef ::RPG_Graphics_TileSet_XMLTree_Type tileset_type;
  typedef ::xsd::cxx::tree::optional< tileset_type > tileset_optional;
  typedef ::xsd::cxx::tree::traits< tileset_type, char > tileset_traits;

  const tileset_optional&
  tileset () const;

  tileset_optional&
  tileset ();

  void
  tileset (const tileset_type& x);

  void
  tileset (const tileset_optional& x);

  void
  tileset (::std::auto_ptr< tileset_type > p);

  // element
  // 
  typedef ::RPG_Graphics_Element_XMLTree_Type element_type;
  typedef ::xsd::cxx::tree::sequence< element_type > element_sequence;
  typedef element_sequence::iterator element_iterator;
  typedef element_sequence::const_iterator element_const_iterator;
  typedef ::xsd::cxx::tree::traits< element_type, char > element_traits;

  const element_sequence&
  element () const;

  element_sequence&
  element ();

  void
  element (const element_sequence& s);

  // file
  // 
  typedef ::xml_schema::string file_type;
  typedef ::xsd::cxx::tree::optional< file_type > file_optional;
  typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

  const file_optional&
  file () const;

  file_optional&
  file ();

  void
  file (const file_type& x);

  void
  file (const file_optional& x);

  void
  file (::std::auto_ptr< file_type > p);

  // size
  // 
  typedef ::xml_schema::unsigned_int size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  static size_type
  size_default_value ();

  // Constructors.
  //
  RPG_Graphics_Graphic_XMLTree_Type (const category_type&,
                                     const type_type&);

  RPG_Graphics_Graphic_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Graphics_Graphic_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Graphics_Graphic_XMLTree_Type (const RPG_Graphics_Graphic_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Graphic_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Graphics_Graphic_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< category_type > category_;
  ::xsd::cxx::tree::one< type_type > type_;
  tile_optional tile_;
  tileset_optional tileset_;
  element_sequence element_;
  file_optional file_;
  ::xsd::cxx::tree::one< size_type > size_;
};

RPG_Graphics_Export
bool
operator== (const RPG_Graphics_Graphic_XMLTree_Type&, const RPG_Graphics_Graphic_XMLTree_Type&);

RPG_Graphics_Export
bool
operator!= (const RPG_Graphics_Graphic_XMLTree_Type&, const RPG_Graphics_Graphic_XMLTree_Type&);


class RPG_Graphics_Export RPG_Graphics_Dictionary_XMLTree_Type: public ::xml_schema::type
{
  public:
  // graphic
  // 
  typedef ::RPG_Graphics_Graphic_XMLTree_Type graphic_type;
  typedef ::xsd::cxx::tree::sequence< graphic_type > graphic_sequence;
  typedef graphic_sequence::iterator graphic_iterator;
  typedef graphic_sequence::const_iterator graphic_const_iterator;
  typedef ::xsd::cxx::tree::traits< graphic_type, char > graphic_traits;

  const graphic_sequence&
  graphic () const;

  graphic_sequence&
  graphic ();

  void
  graphic (const graphic_sequence& s);

  // Constructors.
  //
  RPG_Graphics_Dictionary_XMLTree_Type ();

  RPG_Graphics_Dictionary_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_Dictionary_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Graphics_Dictionary_XMLTree_Type (const RPG_Graphics_Dictionary_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Graphics_Dictionary_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Graphics_Dictionary_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  graphic_sequence graphic_;
};

RPG_Graphics_Export
bool
operator== (const RPG_Graphics_Dictionary_XMLTree_Type&, const RPG_Graphics_Dictionary_XMLTree_Type&);

RPG_Graphics_Export
bool
operator!= (const RPG_Graphics_Dictionary_XMLTree_Type&, const RPG_Graphics_Dictionary_XMLTree_Type&);


#include <iosfwd>

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_Category_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Category_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_Orientation_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Orientation_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_TileType_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_TileType_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_FloorStyle_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_FloorStyle_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_StairsStyle_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_StairsStyle_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_WallStyle_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_WallStyle_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_EdgeStyle_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_EdgeStyle_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_DoorStyle_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_DoorStyle_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_StyleUnion_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_StyleUnion_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_Cursor_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Cursor_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_Font_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Font_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_Image_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Image_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_Sprite_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Sprite_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_TileGraphic_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_TileGraphic_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_TileSetGraphic_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_TileSetGraphic_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_GraphicTypeUnion_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_GraphicTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_WindowType_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_WindowType_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_InterfaceElementType_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_InterfaceElementType_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_HotspotType_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_HotspotType_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_ElementTypeUnion_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_ElementTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Element_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Tile_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Graphics_TileSetType_XMLTree_Type::value);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_TileSetType_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_TileSet_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Graphic_XMLTree_Type&);

RPG_Graphics_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Graphics_Dictionary_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

RPG_Graphics_Export
::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Category_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_Category_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_Category_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Orientation_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_Orientation_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_Orientation_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_TileType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_TileType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_TileType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_FloorStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_FloorStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_FloorStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_StairsStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_StairsStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_StairsStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_WallStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_WallStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_WallStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_EdgeStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_EdgeStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_EdgeStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_DoorStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_DoorStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_DoorStyle_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_StyleUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_StyleUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_StyleUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Cursor_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_Cursor_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_Cursor_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Font_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_Font_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_Font_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Image_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_Image_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_Image_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Sprite_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_Sprite_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_Sprite_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_TileGraphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_TileGraphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_TileGraphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_TileSetGraphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_TileSetGraphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_TileSetGraphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_GraphicTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_GraphicTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_GraphicTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_WindowType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_WindowType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_WindowType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_InterfaceElementType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_InterfaceElementType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_InterfaceElementType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_HotspotType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_HotspotType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_HotspotType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_ElementTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_ElementTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_ElementTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Element_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Tile_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_TileSetType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Graphics_TileSetType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Graphics_TileSetType_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_TileSet_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Graphic_XMLTree_Type&);

RPG_Graphics_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Graphics_Dictionary_XMLTree_Type&);

// Serialize to std::ostream.
//

RPG_Graphics_Export
void
graphicsDictionary (::std::ostream& os,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

RPG_Graphics_Export
void
graphicsDictionary (::std::ostream& os,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

RPG_Graphics_Export
void
graphicsDictionary (::std::ostream& os,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

RPG_Graphics_Export
void
graphicsDictionary (::xercesc::XMLFormatTarget& ft,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

RPG_Graphics_Export
void
graphicsDictionary (::xercesc::XMLFormatTarget& ft,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

RPG_Graphics_Export
void
graphicsDictionary (::xercesc::XMLFormatTarget& ft,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

RPG_Graphics_Export
void
graphicsDictionary (::xercesc::DOMDocument& d,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& x,
                    ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

RPG_Graphics_Export
::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
graphicsDictionary (const ::RPG_Graphics_Dictionary_XMLTree_Type& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Category_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Orientation_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_TileType_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_FloorStyle_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_StairsStyle_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_WallStyle_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_EdgeStyle_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_DoorStyle_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_StyleUnion_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Cursor_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Font_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Image_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Sprite_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_TileGraphic_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_TileSetGraphic_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_GraphicTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_WindowType_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_InterfaceElementType_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_HotspotType_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_ElementTypeUnion_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Element_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Tile_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_TileSetType_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_TileSet_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Graphic_XMLTree_Type&);

RPG_Graphics_Export
::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Graphics_Dictionary_XMLTree_Type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___RPG_GRAPHICS_XML_TREE_H
