// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "stdafx.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_graphics_XML_tree.h"

// RPG_Graphics_Category_XMLTree_Type
// 

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_Category_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const RPG_Graphics_Category_XMLTree_Type& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_Category_XMLTree_Type& RPG_Graphics_Category_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_Category_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_Orientation_XMLTree_Type
// 

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const RPG_Graphics_Orientation_XMLTree_Type& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_Orientation_XMLTree_Type& RPG_Graphics_Orientation_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_TileType_XMLTree_Type
// 

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_TileType_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const RPG_Graphics_TileType_XMLTree_Type& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_TileType_XMLTree_Type& RPG_Graphics_TileType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_TileType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_FloorStyle_XMLTree_Type
// 

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const RPG_Graphics_FloorStyle_XMLTree_Type& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_FloorStyle_XMLTree_Type& RPG_Graphics_FloorStyle_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_StairsStyle_XMLTree_Type
// 

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const RPG_Graphics_StairsStyle_XMLTree_Type& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_StairsStyle_XMLTree_Type& RPG_Graphics_StairsStyle_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_WallStyle_XMLTree_Type
// 

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const RPG_Graphics_WallStyle_XMLTree_Type& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_WallStyle_XMLTree_Type& RPG_Graphics_WallStyle_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_EdgeStyle_XMLTree_Type
// 

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const RPG_Graphics_EdgeStyle_XMLTree_Type& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_EdgeStyle_XMLTree_Type& RPG_Graphics_EdgeStyle_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_DoorStyle_XMLTree_Type
// 

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const RPG_Graphics_DoorStyle_XMLTree_Type& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_DoorStyle_XMLTree_Type& RPG_Graphics_DoorStyle_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_StyleUnion_XMLTree_Type
// 

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const RPG_Graphics_StyleUnion_XMLTree_Type& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_StyleUnion_XMLTree_Type& RPG_Graphics_StyleUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_Cursor_XMLTree_Type
// 

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const RPG_Graphics_Cursor_XMLTree_Type& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_Cursor_XMLTree_Type& RPG_Graphics_Cursor_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_Font_XMLTree_Type
// 

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_Font_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const RPG_Graphics_Font_XMLTree_Type& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_Font_XMLTree_Type& RPG_Graphics_Font_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_Font_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_Image_XMLTree_Type
// 

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_Image_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const RPG_Graphics_Image_XMLTree_Type& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_Image_XMLTree_Type& RPG_Graphics_Image_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_Image_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_Sprite_XMLTree_Type
// 

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const RPG_Graphics_Sprite_XMLTree_Type& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_Sprite_XMLTree_Type& RPG_Graphics_Sprite_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_TileGraphic_XMLTree_Type
// 

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const RPG_Graphics_TileGraphic_XMLTree_Type& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_TileGraphic_XMLTree_Type& RPG_Graphics_TileGraphic_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_TileSetGraphic_XMLTree_Type
// 

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const RPG_Graphics_TileSetGraphic_XMLTree_Type& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_TileSetGraphic_XMLTree_Type& RPG_Graphics_TileSetGraphic_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_GraphicTypeUnion_XMLTree_Type
// 

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const RPG_Graphics_GraphicTypeUnion_XMLTree_Type& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type& RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_WindowType_XMLTree_Type
// 

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const RPG_Graphics_WindowType_XMLTree_Type& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_WindowType_XMLTree_Type& RPG_Graphics_WindowType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_InterfaceElementType_XMLTree_Type
// 

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const RPG_Graphics_InterfaceElementType_XMLTree_Type& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_InterfaceElementType_XMLTree_Type& RPG_Graphics_InterfaceElementType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_HotspotType_XMLTree_Type
// 

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const RPG_Graphics_HotspotType_XMLTree_Type& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_HotspotType_XMLTree_Type& RPG_Graphics_HotspotType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_ElementTypeUnion_XMLTree_Type
// 

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const RPG_Graphics_ElementTypeUnion_XMLTree_Type& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type& RPG_Graphics_ElementTypeUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_Element_XMLTree_Type
// 

const RPG_Graphics_Element_XMLTree_Type::type_type& RPG_Graphics_Element_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Graphics_Element_XMLTree_Type::type_type& RPG_Graphics_Element_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Graphics_Element_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Graphics_Element_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Graphics_Element_XMLTree_Type::window_optional& RPG_Graphics_Element_XMLTree_Type::
window () const
{
  return this->window_;
}

RPG_Graphics_Element_XMLTree_Type::window_optional& RPG_Graphics_Element_XMLTree_Type::
window ()
{
  return this->window_;
}

void RPG_Graphics_Element_XMLTree_Type::
window (const window_type& x)
{
  this->window_.set (x);
}

void RPG_Graphics_Element_XMLTree_Type::
window (const window_optional& x)
{
  this->window_ = x;
}

void RPG_Graphics_Element_XMLTree_Type::
window (::std::auto_ptr< window_type > x)
{
  this->window_.set (x);
}

const RPG_Graphics_Element_XMLTree_Type::offsetX_optional& RPG_Graphics_Element_XMLTree_Type::
offsetX () const
{
  return this->offsetX_;
}

RPG_Graphics_Element_XMLTree_Type::offsetX_optional& RPG_Graphics_Element_XMLTree_Type::
offsetX ()
{
  return this->offsetX_;
}

void RPG_Graphics_Element_XMLTree_Type::
offsetX (const offsetX_type& x)
{
  this->offsetX_.set (x);
}

void RPG_Graphics_Element_XMLTree_Type::
offsetX (const offsetX_optional& x)
{
  this->offsetX_ = x;
}

const RPG_Graphics_Element_XMLTree_Type::offsetY_optional& RPG_Graphics_Element_XMLTree_Type::
offsetY () const
{
  return this->offsetY_;
}

RPG_Graphics_Element_XMLTree_Type::offsetY_optional& RPG_Graphics_Element_XMLTree_Type::
offsetY ()
{
  return this->offsetY_;
}

void RPG_Graphics_Element_XMLTree_Type::
offsetY (const offsetY_type& x)
{
  this->offsetY_.set (x);
}

void RPG_Graphics_Element_XMLTree_Type::
offsetY (const offsetY_optional& x)
{
  this->offsetY_ = x;
}

const RPG_Graphics_Element_XMLTree_Type::width_optional& RPG_Graphics_Element_XMLTree_Type::
width () const
{
  return this->width_;
}

RPG_Graphics_Element_XMLTree_Type::width_optional& RPG_Graphics_Element_XMLTree_Type::
width ()
{
  return this->width_;
}

void RPG_Graphics_Element_XMLTree_Type::
width (const width_type& x)
{
  this->width_.set (x);
}

void RPG_Graphics_Element_XMLTree_Type::
width (const width_optional& x)
{
  this->width_ = x;
}

const RPG_Graphics_Element_XMLTree_Type::height_optional& RPG_Graphics_Element_XMLTree_Type::
height () const
{
  return this->height_;
}

RPG_Graphics_Element_XMLTree_Type::height_optional& RPG_Graphics_Element_XMLTree_Type::
height ()
{
  return this->height_;
}

void RPG_Graphics_Element_XMLTree_Type::
height (const height_type& x)
{
  this->height_.set (x);
}

void RPG_Graphics_Element_XMLTree_Type::
height (const height_optional& x)
{
  this->height_ = x;
}


// RPG_Graphics_Tile_XMLTree_Type
// 

const RPG_Graphics_Tile_XMLTree_Type::type_type& RPG_Graphics_Tile_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Graphics_Tile_XMLTree_Type::type_type& RPG_Graphics_Tile_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Graphics_Tile_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Graphics_Tile_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Graphics_Tile_XMLTree_Type::reference_optional& RPG_Graphics_Tile_XMLTree_Type::
reference () const
{
  return this->reference_;
}

RPG_Graphics_Tile_XMLTree_Type::reference_optional& RPG_Graphics_Tile_XMLTree_Type::
reference ()
{
  return this->reference_;
}

void RPG_Graphics_Tile_XMLTree_Type::
reference (const reference_type& x)
{
  this->reference_.set (x);
}

void RPG_Graphics_Tile_XMLTree_Type::
reference (const reference_optional& x)
{
  this->reference_ = x;
}

void RPG_Graphics_Tile_XMLTree_Type::
reference (::std::auto_ptr< reference_type > x)
{
  this->reference_.set (x);
}

const RPG_Graphics_Tile_XMLTree_Type::style_optional& RPG_Graphics_Tile_XMLTree_Type::
style () const
{
  return this->style_;
}

RPG_Graphics_Tile_XMLTree_Type::style_optional& RPG_Graphics_Tile_XMLTree_Type::
style ()
{
  return this->style_;
}

void RPG_Graphics_Tile_XMLTree_Type::
style (const style_type& x)
{
  this->style_.set (x);
}

void RPG_Graphics_Tile_XMLTree_Type::
style (const style_optional& x)
{
  this->style_ = x;
}

void RPG_Graphics_Tile_XMLTree_Type::
style (::std::auto_ptr< style_type > x)
{
  this->style_.set (x);
}

const RPG_Graphics_Tile_XMLTree_Type::orientation_optional& RPG_Graphics_Tile_XMLTree_Type::
orientation () const
{
  return this->orientation_;
}

RPG_Graphics_Tile_XMLTree_Type::orientation_optional& RPG_Graphics_Tile_XMLTree_Type::
orientation ()
{
  return this->orientation_;
}

void RPG_Graphics_Tile_XMLTree_Type::
orientation (const orientation_type& x)
{
  this->orientation_.set (x);
}

void RPG_Graphics_Tile_XMLTree_Type::
orientation (const orientation_optional& x)
{
  this->orientation_ = x;
}

void RPG_Graphics_Tile_XMLTree_Type::
orientation (::std::auto_ptr< orientation_type > x)
{
  this->orientation_.set (x);
}

const RPG_Graphics_Tile_XMLTree_Type::file_optional& RPG_Graphics_Tile_XMLTree_Type::
file () const
{
  return this->file_;
}

RPG_Graphics_Tile_XMLTree_Type::file_optional& RPG_Graphics_Tile_XMLTree_Type::
file ()
{
  return this->file_;
}

void RPG_Graphics_Tile_XMLTree_Type::
file (const file_type& x)
{
  this->file_.set (x);
}

void RPG_Graphics_Tile_XMLTree_Type::
file (const file_optional& x)
{
  this->file_ = x;
}

void RPG_Graphics_Tile_XMLTree_Type::
file (::std::auto_ptr< file_type > x)
{
  this->file_.set (x);
}

const RPG_Graphics_Tile_XMLTree_Type::offsetX_type& RPG_Graphics_Tile_XMLTree_Type::
offsetX () const
{
  return this->offsetX_.get ();
}

RPG_Graphics_Tile_XMLTree_Type::offsetX_type& RPG_Graphics_Tile_XMLTree_Type::
offsetX ()
{
  return this->offsetX_.get ();
}

void RPG_Graphics_Tile_XMLTree_Type::
offsetX (const offsetX_type& x)
{
  this->offsetX_.set (x);
}

RPG_Graphics_Tile_XMLTree_Type::offsetX_type RPG_Graphics_Tile_XMLTree_Type::
offsetX_default_value ()
{
  return offsetX_type (0);
}

const RPG_Graphics_Tile_XMLTree_Type::offsetY_type& RPG_Graphics_Tile_XMLTree_Type::
offsetY () const
{
  return this->offsetY_.get ();
}

RPG_Graphics_Tile_XMLTree_Type::offsetY_type& RPG_Graphics_Tile_XMLTree_Type::
offsetY ()
{
  return this->offsetY_.get ();
}

void RPG_Graphics_Tile_XMLTree_Type::
offsetY (const offsetY_type& x)
{
  this->offsetY_.set (x);
}

RPG_Graphics_Tile_XMLTree_Type::offsetY_type RPG_Graphics_Tile_XMLTree_Type::
offsetY_default_value ()
{
  return offsetY_type (0);
}

const RPG_Graphics_Tile_XMLTree_Type::open_type& RPG_Graphics_Tile_XMLTree_Type::
open () const
{
  return this->open_.get ();
}

RPG_Graphics_Tile_XMLTree_Type::open_type& RPG_Graphics_Tile_XMLTree_Type::
open ()
{
  return this->open_.get ();
}

void RPG_Graphics_Tile_XMLTree_Type::
open (const open_type& x)
{
  this->open_.set (x);
}

RPG_Graphics_Tile_XMLTree_Type::open_type RPG_Graphics_Tile_XMLTree_Type::
open_default_value ()
{
  return open_type (false);
}

const RPG_Graphics_Tile_XMLTree_Type::broken_type& RPG_Graphics_Tile_XMLTree_Type::
broken () const
{
  return this->broken_.get ();
}

RPG_Graphics_Tile_XMLTree_Type::broken_type& RPG_Graphics_Tile_XMLTree_Type::
broken ()
{
  return this->broken_.get ();
}

void RPG_Graphics_Tile_XMLTree_Type::
broken (const broken_type& x)
{
  this->broken_.set (x);
}

RPG_Graphics_Tile_XMLTree_Type::broken_type RPG_Graphics_Tile_XMLTree_Type::
broken_default_value ()
{
  return broken_type (false);
}


// RPG_Graphics_TileSetType_XMLTree_Type
// 

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const RPG_Graphics_TileSetType_XMLTree_Type& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_TileSetType_XMLTree_Type& RPG_Graphics_TileSetType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_TileSet_XMLTree_Type
// 

const RPG_Graphics_TileSet_XMLTree_Type::type_type& RPG_Graphics_TileSet_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Graphics_TileSet_XMLTree_Type::type_type& RPG_Graphics_TileSet_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Graphics_TileSet_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Graphics_TileSet_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Graphics_TileSet_XMLTree_Type::style_optional& RPG_Graphics_TileSet_XMLTree_Type::
style () const
{
  return this->style_;
}

RPG_Graphics_TileSet_XMLTree_Type::style_optional& RPG_Graphics_TileSet_XMLTree_Type::
style ()
{
  return this->style_;
}

void RPG_Graphics_TileSet_XMLTree_Type::
style (const style_type& x)
{
  this->style_.set (x);
}

void RPG_Graphics_TileSet_XMLTree_Type::
style (const style_optional& x)
{
  this->style_ = x;
}

void RPG_Graphics_TileSet_XMLTree_Type::
style (::std::auto_ptr< style_type > x)
{
  this->style_.set (x);
}

const RPG_Graphics_TileSet_XMLTree_Type::tile_sequence& RPG_Graphics_TileSet_XMLTree_Type::
tile () const
{
  return this->tile_;
}

RPG_Graphics_TileSet_XMLTree_Type::tile_sequence& RPG_Graphics_TileSet_XMLTree_Type::
tile ()
{
  return this->tile_;
}

void RPG_Graphics_TileSet_XMLTree_Type::
tile (const tile_sequence& s)
{
  this->tile_ = s;
}

const RPG_Graphics_TileSet_XMLTree_Type::half_type& RPG_Graphics_TileSet_XMLTree_Type::
half () const
{
  return this->half_.get ();
}

RPG_Graphics_TileSet_XMLTree_Type::half_type& RPG_Graphics_TileSet_XMLTree_Type::
half ()
{
  return this->half_.get ();
}

void RPG_Graphics_TileSet_XMLTree_Type::
half (const half_type& x)
{
  this->half_.set (x);
}

RPG_Graphics_TileSet_XMLTree_Type::half_type RPG_Graphics_TileSet_XMLTree_Type::
half_default_value ()
{
  return half_type (false);
}


// RPG_Graphics_Graphic_XMLTree_Type
// 

const RPG_Graphics_Graphic_XMLTree_Type::category_type& RPG_Graphics_Graphic_XMLTree_Type::
category () const
{
  return this->category_.get ();
}

RPG_Graphics_Graphic_XMLTree_Type::category_type& RPG_Graphics_Graphic_XMLTree_Type::
category ()
{
  return this->category_.get ();
}

void RPG_Graphics_Graphic_XMLTree_Type::
category (const category_type& x)
{
  this->category_.set (x);
}

void RPG_Graphics_Graphic_XMLTree_Type::
category (::std::auto_ptr< category_type > x)
{
  this->category_.set (x);
}

const RPG_Graphics_Graphic_XMLTree_Type::type_type& RPG_Graphics_Graphic_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Graphics_Graphic_XMLTree_Type::type_type& RPG_Graphics_Graphic_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Graphics_Graphic_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Graphics_Graphic_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Graphics_Graphic_XMLTree_Type::tile_optional& RPG_Graphics_Graphic_XMLTree_Type::
tile () const
{
  return this->tile_;
}

RPG_Graphics_Graphic_XMLTree_Type::tile_optional& RPG_Graphics_Graphic_XMLTree_Type::
tile ()
{
  return this->tile_;
}

void RPG_Graphics_Graphic_XMLTree_Type::
tile (const tile_type& x)
{
  this->tile_.set (x);
}

void RPG_Graphics_Graphic_XMLTree_Type::
tile (const tile_optional& x)
{
  this->tile_ = x;
}

void RPG_Graphics_Graphic_XMLTree_Type::
tile (::std::auto_ptr< tile_type > x)
{
  this->tile_.set (x);
}

const RPG_Graphics_Graphic_XMLTree_Type::tileset_optional& RPG_Graphics_Graphic_XMLTree_Type::
tileset () const
{
  return this->tileset_;
}

RPG_Graphics_Graphic_XMLTree_Type::tileset_optional& RPG_Graphics_Graphic_XMLTree_Type::
tileset ()
{
  return this->tileset_;
}

void RPG_Graphics_Graphic_XMLTree_Type::
tileset (const tileset_type& x)
{
  this->tileset_.set (x);
}

void RPG_Graphics_Graphic_XMLTree_Type::
tileset (const tileset_optional& x)
{
  this->tileset_ = x;
}

void RPG_Graphics_Graphic_XMLTree_Type::
tileset (::std::auto_ptr< tileset_type > x)
{
  this->tileset_.set (x);
}

const RPG_Graphics_Graphic_XMLTree_Type::element_sequence& RPG_Graphics_Graphic_XMLTree_Type::
element () const
{
  return this->element_;
}

RPG_Graphics_Graphic_XMLTree_Type::element_sequence& RPG_Graphics_Graphic_XMLTree_Type::
element ()
{
  return this->element_;
}

void RPG_Graphics_Graphic_XMLTree_Type::
element (const element_sequence& s)
{
  this->element_ = s;
}

const RPG_Graphics_Graphic_XMLTree_Type::file_optional& RPG_Graphics_Graphic_XMLTree_Type::
file () const
{
  return this->file_;
}

RPG_Graphics_Graphic_XMLTree_Type::file_optional& RPG_Graphics_Graphic_XMLTree_Type::
file ()
{
  return this->file_;
}

void RPG_Graphics_Graphic_XMLTree_Type::
file (const file_type& x)
{
  this->file_.set (x);
}

void RPG_Graphics_Graphic_XMLTree_Type::
file (const file_optional& x)
{
  this->file_ = x;
}

void RPG_Graphics_Graphic_XMLTree_Type::
file (::std::auto_ptr< file_type > x)
{
  this->file_.set (x);
}

const RPG_Graphics_Graphic_XMLTree_Type::size_type& RPG_Graphics_Graphic_XMLTree_Type::
size () const
{
  return this->size_.get ();
}

RPG_Graphics_Graphic_XMLTree_Type::size_type& RPG_Graphics_Graphic_XMLTree_Type::
size ()
{
  return this->size_.get ();
}

void RPG_Graphics_Graphic_XMLTree_Type::
size (const size_type& x)
{
  this->size_.set (x);
}

RPG_Graphics_Graphic_XMLTree_Type::size_type RPG_Graphics_Graphic_XMLTree_Type::
size_default_value ()
{
  return size_type (0);
}


// RPG_Graphics_Dictionary_XMLTree_Type
// 

const RPG_Graphics_Dictionary_XMLTree_Type::graphic_sequence& RPG_Graphics_Dictionary_XMLTree_Type::
graphic () const
{
  return this->graphic_;
}

RPG_Graphics_Dictionary_XMLTree_Type::graphic_sequence& RPG_Graphics_Dictionary_XMLTree_Type::
graphic ()
{
  return this->graphic_;
}

void RPG_Graphics_Dictionary_XMLTree_Type::
graphic (const graphic_sequence& s)
{
  this->graphic_ = s;
}


// RPG_Graphics_ColorName_XMLTree_Type
// 

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Graphics_ColorName_XMLTree_Type_literals_[v])
{
}

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const RPG_Graphics_ColorName_XMLTree_Type& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Graphics_ColorName_XMLTree_Type& RPG_Graphics_ColorName_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Graphics_ColorName_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Graphics_ColorRGBA_XMLTree_Type
// 

const RPG_Graphics_ColorRGBA_XMLTree_Type::r_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
r () const
{
  return this->r_.get ();
}

RPG_Graphics_ColorRGBA_XMLTree_Type::r_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
r ()
{
  return this->r_.get ();
}

void RPG_Graphics_ColorRGBA_XMLTree_Type::
r (const r_type& x)
{
  this->r_.set (x);
}

const RPG_Graphics_ColorRGBA_XMLTree_Type::g_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
g () const
{
  return this->g_.get ();
}

RPG_Graphics_ColorRGBA_XMLTree_Type::g_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
g ()
{
  return this->g_.get ();
}

void RPG_Graphics_ColorRGBA_XMLTree_Type::
g (const g_type& x)
{
  this->g_.set (x);
}

const RPG_Graphics_ColorRGBA_XMLTree_Type::b_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
b () const
{
  return this->b_.get ();
}

RPG_Graphics_ColorRGBA_XMLTree_Type::b_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
b ()
{
  return this->b_.get ();
}

void RPG_Graphics_ColorRGBA_XMLTree_Type::
b (const b_type& x)
{
  this->b_.set (x);
}

const RPG_Graphics_ColorRGBA_XMLTree_Type::a_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
a () const
{
  return this->a_.get ();
}

RPG_Graphics_ColorRGBA_XMLTree_Type::a_type& RPG_Graphics_ColorRGBA_XMLTree_Type::
a ()
{
  return this->a_.get ();
}

void RPG_Graphics_ColorRGBA_XMLTree_Type::
a (const a_type& x)
{
  this->a_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Graphics_Category_XMLTree_Type
//

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_Category_XMLTree_Type_convert ();
}

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_Category_XMLTree_Type_convert ();
}

RPG_Graphics_Category_XMLTree_Type::
RPG_Graphics_Category_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_Category_XMLTree_Type_convert ();
}

RPG_Graphics_Category_XMLTree_Type* RPG_Graphics_Category_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Category_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Category_XMLTree_Type::value RPG_Graphics_Category_XMLTree_Type::
_xsd_RPG_Graphics_Category_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_Category_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_Category_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_Category_XMLTree_Type_indexes_ + 7,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_Category_XMLTree_Type_indexes_ + 7 || _xsd_RPG_Graphics_Category_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_Category_XMLTree_Type::
_xsd_RPG_Graphics_Category_XMLTree_Type_literals_[7] =
{
  "CATEGORY_CURSOR",
  "CATEGORY_FONT",
  "CATEGORY_INTERFACE",
  "CATEGORY_IMAGE",
  "CATEGORY_SPRITE",
  "CATEGORY_TILE",
  "CATEGORY_TILESET"
};

const RPG_Graphics_Category_XMLTree_Type::value RPG_Graphics_Category_XMLTree_Type::
_xsd_RPG_Graphics_Category_XMLTree_Type_indexes_[7] =
{
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_CURSOR,
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_FONT,
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_IMAGE,
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_INTERFACE,
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_SPRITE,
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_TILE,
  ::RPG_Graphics_Category_XMLTree_Type::CATEGORY_TILESET
};

// RPG_Graphics_Orientation_XMLTree_Type
//

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_Orientation_XMLTree_Type_convert ();
}

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_Orientation_XMLTree_Type_convert ();
}

RPG_Graphics_Orientation_XMLTree_Type::
RPG_Graphics_Orientation_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_Orientation_XMLTree_Type_convert ();
}

RPG_Graphics_Orientation_XMLTree_Type* RPG_Graphics_Orientation_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Orientation_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Orientation_XMLTree_Type::value RPG_Graphics_Orientation_XMLTree_Type::
_xsd_RPG_Graphics_Orientation_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_Orientation_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_Orientation_XMLTree_Type_indexes_ + 10,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_Orientation_XMLTree_Type_indexes_ + 10 || _xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_Orientation_XMLTree_Type::
_xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_[10] =
{
  "ORIENTATION_NORTH",
  "ORIENTATION_NORTH_EAST",
  "ORIENTATION_NORTH_WEST",
  "ORIENTATION_SOUTH",
  "ORIENTATION_SOUTH_EAST",
  "ORIENTATION_SOUTH_WEST",
  "ORIENTATION_WEST",
  "ORIENTATION_EAST",
  "ORIENTATION_HORIZONTAL",
  "ORIENTATION_VERTICAL"
};

const RPG_Graphics_Orientation_XMLTree_Type::value RPG_Graphics_Orientation_XMLTree_Type::
_xsd_RPG_Graphics_Orientation_XMLTree_Type_indexes_[10] =
{
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_EAST,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_HORIZONTAL,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_NORTH,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_NORTH_EAST,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_NORTH_WEST,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_SOUTH,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_SOUTH_EAST,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_SOUTH_WEST,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_VERTICAL,
  ::RPG_Graphics_Orientation_XMLTree_Type::ORIENTATION_WEST
};

// RPG_Graphics_TileType_XMLTree_Type
//

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_TileType_XMLTree_Type_convert ();
}

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_TileType_XMLTree_Type_convert ();
}

RPG_Graphics_TileType_XMLTree_Type::
RPG_Graphics_TileType_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_TileType_XMLTree_Type_convert ();
}

RPG_Graphics_TileType_XMLTree_Type* RPG_Graphics_TileType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_TileType_XMLTree_Type (*this, f, c);
}

RPG_Graphics_TileType_XMLTree_Type::value RPG_Graphics_TileType_XMLTree_Type::
_xsd_RPG_Graphics_TileType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_TileType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_TileType_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_TileType_XMLTree_Type_indexes_ + 8,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_TileType_XMLTree_Type_indexes_ + 8 || _xsd_RPG_Graphics_TileType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_TileType_XMLTree_Type::
_xsd_RPG_Graphics_TileType_XMLTree_Type_literals_[8] =
{
  "TILETYPE_DOOR",
  "TILETYPE_EDGE_FLOOR",
  "TILETYPE_EFFECT",
  "TILETYPE_FIGURINE",
  "TILETYPE_FLOOR",
  "TILETYPE_MONSTER",
  "TILETYPE_OBJECT",
  "TILETYPE_WALL"
};

const RPG_Graphics_TileType_XMLTree_Type::value RPG_Graphics_TileType_XMLTree_Type::
_xsd_RPG_Graphics_TileType_XMLTree_Type_indexes_[8] =
{
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_DOOR,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_EDGE_FLOOR,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_EFFECT,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_FIGURINE,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_FLOOR,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_MONSTER,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_OBJECT,
  ::RPG_Graphics_TileType_XMLTree_Type::TILETYPE_WALL
};

// RPG_Graphics_FloorStyle_XMLTree_Type
//

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_convert ();
}

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_convert ();
}

RPG_Graphics_FloorStyle_XMLTree_Type::
RPG_Graphics_FloorStyle_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_convert ();
}

RPG_Graphics_FloorStyle_XMLTree_Type* RPG_Graphics_FloorStyle_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_FloorStyle_XMLTree_Type (*this, f, c);
}

RPG_Graphics_FloorStyle_XMLTree_Type::value RPG_Graphics_FloorStyle_XMLTree_Type::
_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_indexes_ + 14,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_indexes_ + 14 || _xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_FloorStyle_XMLTree_Type::
_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_[14] =
{
  "FLOORSTYLE_AIR",
  "FLOORSTYLE_CARPET",
  "FLOORSTYLE_CERAMIC",
  "FLOORSTYLE_DARK",
  "FLOORSTYLE_ICE",
  "FLOORSTYLE_LAVA",
  "FLOORSTYLE_MARBLE",
  "FLOORSTYLE_MURAL",
  "FLOORSTYLE_MURAL2",
  "FLOORSTYLE_ROUGH",
  "FLOORSTYLE_ROUGH_LIT",
  "FLOORSTYLE_STONE_COBBLED",
  "FLOORSTYLE_STONE_MOSS_COVERED",
  "FLOORSTYLE_WATER"
};

const RPG_Graphics_FloorStyle_XMLTree_Type::value RPG_Graphics_FloorStyle_XMLTree_Type::
_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_indexes_[14] =
{
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_AIR,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_CARPET,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_CERAMIC,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_DARK,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_ICE,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_LAVA,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_MARBLE,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_MURAL,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_MURAL2,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_ROUGH,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_ROUGH_LIT,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_STONE_COBBLED,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_STONE_MOSS_COVERED,
  ::RPG_Graphics_FloorStyle_XMLTree_Type::FLOORSTYLE_WATER
};

// RPG_Graphics_StairsStyle_XMLTree_Type
//

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_convert ();
}

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_convert ();
}

RPG_Graphics_StairsStyle_XMLTree_Type::
RPG_Graphics_StairsStyle_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_convert ();
}

RPG_Graphics_StairsStyle_XMLTree_Type* RPG_Graphics_StairsStyle_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_StairsStyle_XMLTree_Type (*this, f, c);
}

RPG_Graphics_StairsStyle_XMLTree_Type::value RPG_Graphics_StairsStyle_XMLTree_Type::
_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_StairsStyle_XMLTree_Type::
_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_[3] =
{
  "STAIRSSTYLE_LADDER",
  "STAIRSSTYLE_STAIRWAY",
  "STAIRSSTYLE_PORTAL"
};

const RPG_Graphics_StairsStyle_XMLTree_Type::value RPG_Graphics_StairsStyle_XMLTree_Type::
_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_indexes_[3] =
{
  ::RPG_Graphics_StairsStyle_XMLTree_Type::STAIRSSTYLE_LADDER,
  ::RPG_Graphics_StairsStyle_XMLTree_Type::STAIRSSTYLE_PORTAL,
  ::RPG_Graphics_StairsStyle_XMLTree_Type::STAIRSSTYLE_STAIRWAY
};

// RPG_Graphics_WallStyle_XMLTree_Type
//

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_WallStyle_XMLTree_Type_convert ();
}

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_WallStyle_XMLTree_Type_convert ();
}

RPG_Graphics_WallStyle_XMLTree_Type::
RPG_Graphics_WallStyle_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_WallStyle_XMLTree_Type_convert ();
}

RPG_Graphics_WallStyle_XMLTree_Type* RPG_Graphics_WallStyle_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_WallStyle_XMLTree_Type (*this, f, c);
}

RPG_Graphics_WallStyle_XMLTree_Type::value RPG_Graphics_WallStyle_XMLTree_Type::
_xsd_RPG_Graphics_WallStyle_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_WallStyle_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_WallStyle_XMLTree_Type_indexes_ + 11,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_WallStyle_XMLTree_Type_indexes_ + 11 || _xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_WallStyle_XMLTree_Type::
_xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_[11] =
{
  "WALLSTYLE_BRICK",
  "WALLSTYLE_BRICK_BANNER",
  "WALLSTYLE_BRICK_PAINTING",
  "WALLSTYLE_BRICK_PILLAR",
  "WALLSTYLE_BRICK_POCKET",
  "WALLSTYLE_DARK",
  "WALLSTYLE_LIGHT",
  "WALLSTYLE_MARBLE",
  "WALLSTYLE_ROUGH",
  "WALLSTYLE_STUCCO",
  "WALLSTYLE_VINE_COVERED"
};

const RPG_Graphics_WallStyle_XMLTree_Type::value RPG_Graphics_WallStyle_XMLTree_Type::
_xsd_RPG_Graphics_WallStyle_XMLTree_Type_indexes_[11] =
{
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_BRICK,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_BRICK_BANNER,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_BRICK_PAINTING,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_BRICK_PILLAR,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_BRICK_POCKET,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_DARK,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_LIGHT,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_MARBLE,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_ROUGH,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_STUCCO,
  ::RPG_Graphics_WallStyle_XMLTree_Type::WALLSTYLE_VINE_COVERED
};

// RPG_Graphics_EdgeStyle_XMLTree_Type
//

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_convert ();
}

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_convert ();
}

RPG_Graphics_EdgeStyle_XMLTree_Type::
RPG_Graphics_EdgeStyle_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_convert ();
}

RPG_Graphics_EdgeStyle_XMLTree_Type* RPG_Graphics_EdgeStyle_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_EdgeStyle_XMLTree_Type (*this, f, c);
}

RPG_Graphics_EdgeStyle_XMLTree_Type::value RPG_Graphics_EdgeStyle_XMLTree_Type::
_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_indexes_ + 1,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_indexes_ + 1 || _xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_EdgeStyle_XMLTree_Type::
_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_[1] =
{
  "EDGESTYLE_FLOOR_STONE_COBBLED"
};

const RPG_Graphics_EdgeStyle_XMLTree_Type::value RPG_Graphics_EdgeStyle_XMLTree_Type::
_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_indexes_[1] =
{
  ::RPG_Graphics_EdgeStyle_XMLTree_Type::EDGESTYLE_FLOOR_STONE_COBBLED
};

// RPG_Graphics_DoorStyle_XMLTree_Type
//

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_convert ();
}

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_convert ();
}

RPG_Graphics_DoorStyle_XMLTree_Type::
RPG_Graphics_DoorStyle_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_convert ();
}

RPG_Graphics_DoorStyle_XMLTree_Type* RPG_Graphics_DoorStyle_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_DoorStyle_XMLTree_Type (*this, f, c);
}

RPG_Graphics_DoorStyle_XMLTree_Type::value RPG_Graphics_DoorStyle_XMLTree_Type::
_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_DoorStyle_XMLTree_Type::
_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_[3] =
{
  "DOORSTYLE_DRAWBRIDGE",
  "DOORSTYLE_TELEPORTER",
  "DOORSTYLE_WOOD"
};

const RPG_Graphics_DoorStyle_XMLTree_Type::value RPG_Graphics_DoorStyle_XMLTree_Type::
_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_indexes_[3] =
{
  ::RPG_Graphics_DoorStyle_XMLTree_Type::DOORSTYLE_DRAWBRIDGE,
  ::RPG_Graphics_DoorStyle_XMLTree_Type::DOORSTYLE_TELEPORTER,
  ::RPG_Graphics_DoorStyle_XMLTree_Type::DOORSTYLE_WOOD
};

// RPG_Graphics_StyleUnion_XMLTree_Type
//

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_convert ();
}

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_convert ();
}

RPG_Graphics_StyleUnion_XMLTree_Type::
RPG_Graphics_StyleUnion_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_convert ();
}

RPG_Graphics_StyleUnion_XMLTree_Type* RPG_Graphics_StyleUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_StyleUnion_XMLTree_Type (*this, f, c);
}

RPG_Graphics_StyleUnion_XMLTree_Type::value RPG_Graphics_StyleUnion_XMLTree_Type::
_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_indexes_ + 32,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_indexes_ + 32 || _xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_StyleUnion_XMLTree_Type::
_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_[32] =
{
  "FLOORSTYLE_AIR",
  "FLOORSTYLE_CARPET",
  "FLOORSTYLE_CERAMIC",
  "FLOORSTYLE_DARK",
  "FLOORSTYLE_ICE",
  "FLOORSTYLE_LAVA",
  "FLOORSTYLE_MARBLE",
  "FLOORSTYLE_MURAL",
  "FLOORSTYLE_MURAL2",
  "FLOORSTYLE_ROUGH",
  "FLOORSTYLE_ROUGH_LIT",
  "FLOORSTYLE_STONE_COBBLED",
  "FLOORSTYLE_STONE_MOSS_COVERED",
  "FLOORSTYLE_WATER",
  "STAIRSSTYLE_LADDER",
  "STAIRSSTYLE_STAIRWAY",
  "STAIRSSTYLE_PORTAL",
  "WALLSTYLE_BRICK",
  "WALLSTYLE_BRICK_BANNER",
  "WALLSTYLE_BRICK_PAINTING",
  "WALLSTYLE_BRICK_PILLAR",
  "WALLSTYLE_BRICK_POCKET",
  "WALLSTYLE_DARK",
  "WALLSTYLE_LIGHT",
  "WALLSTYLE_MARBLE",
  "WALLSTYLE_ROUGH",
  "WALLSTYLE_STUCCO",
  "WALLSTYLE_VINE_COVERED",
  "EDGESTYLE_FLOOR_STONE_COBBLED",
  "DOORSTYLE_DRAWBRIDGE",
  "DOORSTYLE_TELEPORTER",
  "DOORSTYLE_WOOD"
};

const RPG_Graphics_StyleUnion_XMLTree_Type::value RPG_Graphics_StyleUnion_XMLTree_Type::
_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_indexes_[32] =
{
  ::RPG_Graphics_StyleUnion_XMLTree_Type::DOORSTYLE_DRAWBRIDGE,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::DOORSTYLE_TELEPORTER,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::DOORSTYLE_WOOD,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::EDGESTYLE_FLOOR_STONE_COBBLED,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_AIR,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_CARPET,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_CERAMIC,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_DARK,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_ICE,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_LAVA,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_MARBLE,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_MURAL,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_MURAL2,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_ROUGH,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_ROUGH_LIT,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_STONE_COBBLED,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_STONE_MOSS_COVERED,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::FLOORSTYLE_WATER,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::STAIRSSTYLE_LADDER,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::STAIRSSTYLE_PORTAL,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::STAIRSSTYLE_STAIRWAY,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_BRICK,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_BRICK_BANNER,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_BRICK_PAINTING,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_BRICK_PILLAR,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_BRICK_POCKET,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_DARK,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_LIGHT,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_MARBLE,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_ROUGH,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_STUCCO,
  ::RPG_Graphics_StyleUnion_XMLTree_Type::WALLSTYLE_VINE_COVERED
};

// RPG_Graphics_Cursor_XMLTree_Type
//

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_Cursor_XMLTree_Type_convert ();
}

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_Cursor_XMLTree_Type_convert ();
}

RPG_Graphics_Cursor_XMLTree_Type::
RPG_Graphics_Cursor_XMLTree_Type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_Cursor_XMLTree_Type_convert ();
}

RPG_Graphics_Cursor_XMLTree_Type* RPG_Graphics_Cursor_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Cursor_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Cursor_XMLTree_Type::value RPG_Graphics_Cursor_XMLTree_Type::
_xsd_RPG_Graphics_Cursor_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_Cursor_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_Cursor_XMLTree_Type_indexes_ + 15,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_Cursor_XMLTree_Type_indexes_ + 15 || _xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_Cursor_XMLTree_Type::
_xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_[15] =
{
  "CURSOR_DOOR_OPEN",
  "CURSOR_NORMAL",
  "CURSOR_SCROLL_D",
  "CURSOR_SCROLL_DL",
  "CURSOR_SCROLL_DR",
  "CURSOR_SCROLL_L",
  "CURSOR_SCROLL_R",
  "CURSOR_SCROLL_U",
  "CURSOR_SCROLL_UL",
  "CURSOR_SCROLL_UR",
  "CURSOR_STAIRS",
  "CURSOR_TARGET",
  "CURSOR_TARGET_INVALID",
  "CURSOR_TRAVEL",
  "CURSOR_WAIT"
};

const RPG_Graphics_Cursor_XMLTree_Type::value RPG_Graphics_Cursor_XMLTree_Type::
_xsd_RPG_Graphics_Cursor_XMLTree_Type_indexes_[15] =
{
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_DOOR_OPEN,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_NORMAL,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_D,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_DL,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_DR,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_L,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_R,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_U,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_UL,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_SCROLL_UR,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_STAIRS,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_TARGET,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_TARGET_INVALID,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_TRAVEL,
  ::RPG_Graphics_Cursor_XMLTree_Type::CURSOR_WAIT
};

// RPG_Graphics_Font_XMLTree_Type
//

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_Font_XMLTree_Type_convert ();
}

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_Font_XMLTree_Type_convert ();
}

RPG_Graphics_Font_XMLTree_Type::
RPG_Graphics_Font_XMLTree_Type (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_Font_XMLTree_Type_convert ();
}

RPG_Graphics_Font_XMLTree_Type* RPG_Graphics_Font_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Font_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Font_XMLTree_Type::value RPG_Graphics_Font_XMLTree_Type::
_xsd_RPG_Graphics_Font_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_Font_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_Font_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_Font_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_Font_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Graphics_Font_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_Font_XMLTree_Type::
_xsd_RPG_Graphics_Font_XMLTree_Type_literals_[3] =
{
  "FONT_MAIN_SMALL",
  "FONT_MAIN_NORMAL",
  "FONT_MAIN_LARGE"
};

const RPG_Graphics_Font_XMLTree_Type::value RPG_Graphics_Font_XMLTree_Type::
_xsd_RPG_Graphics_Font_XMLTree_Type_indexes_[3] =
{
  ::RPG_Graphics_Font_XMLTree_Type::FONT_MAIN_LARGE,
  ::RPG_Graphics_Font_XMLTree_Type::FONT_MAIN_NORMAL,
  ::RPG_Graphics_Font_XMLTree_Type::FONT_MAIN_SMALL
};

// RPG_Graphics_Image_XMLTree_Type
//

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_Image_XMLTree_Type_convert ();
}

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_Image_XMLTree_Type_convert ();
}

RPG_Graphics_Image_XMLTree_Type::
RPG_Graphics_Image_XMLTree_Type (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_Image_XMLTree_Type_convert ();
}

RPG_Graphics_Image_XMLTree_Type* RPG_Graphics_Image_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Image_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Image_XMLTree_Type::value RPG_Graphics_Image_XMLTree_Type::
_xsd_RPG_Graphics_Image_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_Image_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_Image_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_Image_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_Image_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Graphics_Image_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_Image_XMLTree_Type::
_xsd_RPG_Graphics_Image_XMLTree_Type_literals_[4] =
{
  "IMAGE_INTERFACE_MAIN",
  "IMAGE_INTERFACE_MINIMAP",
  "IMAGE_INTRO_MAIN",
  "IMAGE_WM_ICON"
};

const RPG_Graphics_Image_XMLTree_Type::value RPG_Graphics_Image_XMLTree_Type::
_xsd_RPG_Graphics_Image_XMLTree_Type_indexes_[4] =
{
  ::RPG_Graphics_Image_XMLTree_Type::IMAGE_INTERFACE_MAIN,
  ::RPG_Graphics_Image_XMLTree_Type::IMAGE_INTERFACE_MINIMAP,
  ::RPG_Graphics_Image_XMLTree_Type::IMAGE_INTRO_MAIN,
  ::RPG_Graphics_Image_XMLTree_Type::IMAGE_WM_ICON
};

// RPG_Graphics_Sprite_XMLTree_Type
//

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_Sprite_XMLTree_Type_convert ();
}

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_Sprite_XMLTree_Type_convert ();
}

RPG_Graphics_Sprite_XMLTree_Type::
RPG_Graphics_Sprite_XMLTree_Type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_Sprite_XMLTree_Type_convert ();
}

RPG_Graphics_Sprite_XMLTree_Type* RPG_Graphics_Sprite_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Sprite_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Sprite_XMLTree_Type::value RPG_Graphics_Sprite_XMLTree_Type::
_xsd_RPG_Graphics_Sprite_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_Sprite_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_Sprite_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_Sprite_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_Sprite_XMLTree_Type::
_xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_[3] =
{
  "SPRITE_GOBLIN",
  "SPRITE_HUMAN",
  "SPRITE_PRIEST"
};

const RPG_Graphics_Sprite_XMLTree_Type::value RPG_Graphics_Sprite_XMLTree_Type::
_xsd_RPG_Graphics_Sprite_XMLTree_Type_indexes_[3] =
{
  ::RPG_Graphics_Sprite_XMLTree_Type::SPRITE_GOBLIN,
  ::RPG_Graphics_Sprite_XMLTree_Type::SPRITE_HUMAN,
  ::RPG_Graphics_Sprite_XMLTree_Type::SPRITE_PRIEST
};

// RPG_Graphics_TileGraphic_XMLTree_Type
//

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_convert ();
}

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_convert ();
}

RPG_Graphics_TileGraphic_XMLTree_Type::
RPG_Graphics_TileGraphic_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_convert ();
}

RPG_Graphics_TileGraphic_XMLTree_Type* RPG_Graphics_TileGraphic_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_TileGraphic_XMLTree_Type (*this, f, c);
}

RPG_Graphics_TileGraphic_XMLTree_Type::value RPG_Graphics_TileGraphic_XMLTree_Type::
_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_TileGraphic_XMLTree_Type::
_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_[4] =
{
  "TILE_CEILING",
  "TILE_CURSOR_HIGHLIGHT",
  "TILE_FLOOR_INVISIBLE",
  "TILE_OFF_MAP"
};

const RPG_Graphics_TileGraphic_XMLTree_Type::value RPG_Graphics_TileGraphic_XMLTree_Type::
_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_indexes_[4] =
{
  ::RPG_Graphics_TileGraphic_XMLTree_Type::TILE_CEILING,
  ::RPG_Graphics_TileGraphic_XMLTree_Type::TILE_CURSOR_HIGHLIGHT,
  ::RPG_Graphics_TileGraphic_XMLTree_Type::TILE_FLOOR_INVISIBLE,
  ::RPG_Graphics_TileGraphic_XMLTree_Type::TILE_OFF_MAP
};

// RPG_Graphics_TileSetGraphic_XMLTree_Type
//

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_convert ();
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_convert ();
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::
RPG_Graphics_TileSetGraphic_XMLTree_Type (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_convert ();
}

RPG_Graphics_TileSetGraphic_XMLTree_Type* RPG_Graphics_TileSetGraphic_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_TileSetGraphic_XMLTree_Type (*this, f, c);
}

RPG_Graphics_TileSetGraphic_XMLTree_Type::value RPG_Graphics_TileSetGraphic_XMLTree_Type::
_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_indexes_ + 38,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_indexes_ + 38 || _xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_TileSetGraphic_XMLTree_Type::
_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_[38] =
{
  "TILESET_DOOR_WOOD",
  "TILESET_FLOOR_AIR",
  "TILESET_FLOOR_CARPET",
  "TILESET_FLOOR_CERAMIC",
  "TILESET_FLOOR_DARK",
  "TILESET_FLOOR_ICE",
  "TILESET_FLOOR_LAVA",
  "TILESET_FLOOR_MARBLE",
  "TILESET_FLOOR_MURAL",
  "TILESET_FLOOR_MURAL2",
  "TILESET_FLOOR_ROUGH",
  "TILESET_FLOOR_ROUGH_LIT",
  "TILESET_FLOOR_STONE_COBBLED",
  "TILESET_FLOOR_STONE_MOSS_COVERED",
  "TILESET_FLOOR_WATER",
  "TILESET_EDGE_FLOOR_STONE_COBBLED",
  "TILESET_WALL_BRICK",
  "TILESET_WALL_BRICK_HALF",
  "TILESET_WALL_BRICK_BANNER",
  "TILESET_WALL_BRICK_BANNER_HALF",
  "TILESET_WALL_BRICK_PAINTING",
  "TILESET_WALL_BRICK_PAINTING_HALF",
  "TILESET_WALL_BRICK_PILLAR",
  "TILESET_WALL_BRICK_PILLAR_HALF",
  "TILESET_WALL_BRICK_POCKET",
  "TILESET_WALL_BRICK_POCKET_HALF",
  "TILESET_WALL_DARK",
  "TILESET_WALL_DARK_HALF",
  "TILESET_WALL_LIGHT",
  "TILESET_WALL_LIGHT_HALF",
  "TILESET_WALL_MARBLE",
  "TILESET_WALL_MARBLE_HALF",
  "TILESET_WALL_ROUGH",
  "TILESET_WALL_ROUGH_HALF",
  "TILESET_WALL_STUCCO",
  "TILESET_WALL_STUCCO_HALF",
  "TILESET_WALL_VINE_COVERED",
  "TILESET_WALL_VINE_COVERED_HALF"
};

const RPG_Graphics_TileSetGraphic_XMLTree_Type::value RPG_Graphics_TileSetGraphic_XMLTree_Type::
_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_indexes_[38] =
{
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_DOOR_WOOD,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_EDGE_FLOOR_STONE_COBBLED,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_AIR,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_CARPET,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_CERAMIC,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_DARK,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_ICE,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_LAVA,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_MARBLE,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_MURAL,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_MURAL2,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_ROUGH,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_ROUGH_LIT,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_STONE_COBBLED,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_STONE_MOSS_COVERED,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_FLOOR_WATER,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_BANNER,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_BANNER_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_PAINTING,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_PAINTING_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_PILLAR,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_PILLAR_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_POCKET,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_BRICK_POCKET_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_DARK,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_DARK_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_LIGHT,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_LIGHT_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_MARBLE,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_MARBLE_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_ROUGH,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_ROUGH_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_STUCCO,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_STUCCO_HALF,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_VINE_COVERED,
  ::RPG_Graphics_TileSetGraphic_XMLTree_Type::TILESET_WALL_VINE_COVERED_HALF
};

// RPG_Graphics_GraphicTypeUnion_XMLTree_Type
//

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_convert ();
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_convert ();
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
RPG_Graphics_GraphicTypeUnion_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_convert ();
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type* RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_GraphicTypeUnion_XMLTree_Type (*this, f, c);
}

RPG_Graphics_GraphicTypeUnion_XMLTree_Type::value RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_indexes_ + 67,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_indexes_ + 67 || _xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_[67] =
{
  "CURSOR_DOOR_OPEN",
  "CURSOR_NORMAL",
  "CURSOR_SCROLL_D",
  "CURSOR_SCROLL_DL",
  "CURSOR_SCROLL_DR",
  "CURSOR_SCROLL_L",
  "CURSOR_SCROLL_R",
  "CURSOR_SCROLL_U",
  "CURSOR_SCROLL_UL",
  "CURSOR_SCROLL_UR",
  "CURSOR_STAIRS",
  "CURSOR_TARGET",
  "CURSOR_TARGET_INVALID",
  "CURSOR_TRAVEL",
  "CURSOR_WAIT",
  "FONT_MAIN_SMALL",
  "FONT_MAIN_NORMAL",
  "FONT_MAIN_LARGE",
  "IMAGE_INTERFACE_MAIN",
  "IMAGE_INTERFACE_MINIMAP",
  "IMAGE_INTRO_MAIN",
  "IMAGE_WM_ICON",
  "SPRITE_GOBLIN",
  "SPRITE_HUMAN",
  "SPRITE_PRIEST",
  "TILE_CEILING",
  "TILE_CURSOR_HIGHLIGHT",
  "TILE_FLOOR_INVISIBLE",
  "TILE_OFF_MAP",
  "TILESET_DOOR_WOOD",
  "TILESET_FLOOR_AIR",
  "TILESET_FLOOR_CARPET",
  "TILESET_FLOOR_CERAMIC",
  "TILESET_FLOOR_DARK",
  "TILESET_FLOOR_ICE",
  "TILESET_FLOOR_LAVA",
  "TILESET_FLOOR_MARBLE",
  "TILESET_FLOOR_MURAL",
  "TILESET_FLOOR_MURAL2",
  "TILESET_FLOOR_ROUGH",
  "TILESET_FLOOR_ROUGH_LIT",
  "TILESET_FLOOR_STONE_COBBLED",
  "TILESET_FLOOR_STONE_MOSS_COVERED",
  "TILESET_FLOOR_WATER",
  "TILESET_EDGE_FLOOR_STONE_COBBLED",
  "TILESET_WALL_BRICK",
  "TILESET_WALL_BRICK_HALF",
  "TILESET_WALL_BRICK_BANNER",
  "TILESET_WALL_BRICK_BANNER_HALF",
  "TILESET_WALL_BRICK_PAINTING",
  "TILESET_WALL_BRICK_PAINTING_HALF",
  "TILESET_WALL_BRICK_PILLAR",
  "TILESET_WALL_BRICK_PILLAR_HALF",
  "TILESET_WALL_BRICK_POCKET",
  "TILESET_WALL_BRICK_POCKET_HALF",
  "TILESET_WALL_DARK",
  "TILESET_WALL_DARK_HALF",
  "TILESET_WALL_LIGHT",
  "TILESET_WALL_LIGHT_HALF",
  "TILESET_WALL_MARBLE",
  "TILESET_WALL_MARBLE_HALF",
  "TILESET_WALL_ROUGH",
  "TILESET_WALL_ROUGH_HALF",
  "TILESET_WALL_STUCCO",
  "TILESET_WALL_STUCCO_HALF",
  "TILESET_WALL_VINE_COVERED",
  "TILESET_WALL_VINE_COVERED_HALF"
};

const RPG_Graphics_GraphicTypeUnion_XMLTree_Type::value RPG_Graphics_GraphicTypeUnion_XMLTree_Type::
_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_indexes_[67] =
{
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_DOOR_OPEN,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_NORMAL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_D,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_DL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_DR,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_L,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_R,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_U,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_UL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_SCROLL_UR,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_STAIRS,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_TARGET,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_TARGET_INVALID,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_TRAVEL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::CURSOR_WAIT,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::FONT_MAIN_LARGE,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::FONT_MAIN_NORMAL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::FONT_MAIN_SMALL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::IMAGE_INTERFACE_MAIN,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::IMAGE_INTERFACE_MINIMAP,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::IMAGE_INTRO_MAIN,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::IMAGE_WM_ICON,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::SPRITE_GOBLIN,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::SPRITE_HUMAN,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::SPRITE_PRIEST,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_DOOR_WOOD,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_EDGE_FLOOR_STONE_COBBLED,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_AIR,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_CARPET,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_CERAMIC,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_DARK,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_ICE,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_LAVA,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_MARBLE,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_MURAL,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_MURAL2,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_ROUGH,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_ROUGH_LIT,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_STONE_COBBLED,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_STONE_MOSS_COVERED,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_FLOOR_WATER,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_BANNER,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_BANNER_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_PAINTING,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_PAINTING_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_PILLAR,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_PILLAR_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_POCKET,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_BRICK_POCKET_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_DARK,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_DARK_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_LIGHT,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_LIGHT_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_MARBLE,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_MARBLE_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_ROUGH,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_ROUGH_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_STUCCO,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_STUCCO_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_VINE_COVERED,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILESET_WALL_VINE_COVERED_HALF,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILE_CEILING,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILE_CURSOR_HIGHLIGHT,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILE_FLOOR_INVISIBLE,
  ::RPG_Graphics_GraphicTypeUnion_XMLTree_Type::TILE_OFF_MAP
};

// RPG_Graphics_WindowType_XMLTree_Type
//

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_WindowType_XMLTree_Type_convert ();
}

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_WindowType_XMLTree_Type_convert ();
}

RPG_Graphics_WindowType_XMLTree_Type::
RPG_Graphics_WindowType_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_WindowType_XMLTree_Type_convert ();
}

RPG_Graphics_WindowType_XMLTree_Type* RPG_Graphics_WindowType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_WindowType_XMLTree_Type (*this, f, c);
}

RPG_Graphics_WindowType_XMLTree_Type::value RPG_Graphics_WindowType_XMLTree_Type::
_xsd_RPG_Graphics_WindowType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_WindowType_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_WindowType_XMLTree_Type_indexes_ + 6,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_WindowType_XMLTree_Type_indexes_ + 6 || _xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_WindowType_XMLTree_Type::
_xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_[6] =
{
  "WINDOW_HOTSPOT",
  "WINDOW_MAIN",
  "WINDOW_MAP",
  "WINDOW_MENU",
  "WINDOW_MESSAGE",
  "WINDOW_MINIMAP"
};

const RPG_Graphics_WindowType_XMLTree_Type::value RPG_Graphics_WindowType_XMLTree_Type::
_xsd_RPG_Graphics_WindowType_XMLTree_Type_indexes_[6] =
{
  ::RPG_Graphics_WindowType_XMLTree_Type::WINDOW_HOTSPOT,
  ::RPG_Graphics_WindowType_XMLTree_Type::WINDOW_MAIN,
  ::RPG_Graphics_WindowType_XMLTree_Type::WINDOW_MAP,
  ::RPG_Graphics_WindowType_XMLTree_Type::WINDOW_MENU,
  ::RPG_Graphics_WindowType_XMLTree_Type::WINDOW_MESSAGE,
  ::RPG_Graphics_WindowType_XMLTree_Type::WINDOW_MINIMAP
};

// RPG_Graphics_InterfaceElementType_XMLTree_Type
//

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_convert ();
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_convert ();
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::
RPG_Graphics_InterfaceElementType_XMLTree_Type (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_convert ();
}

RPG_Graphics_InterfaceElementType_XMLTree_Type* RPG_Graphics_InterfaceElementType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_InterfaceElementType_XMLTree_Type (*this, f, c);
}

RPG_Graphics_InterfaceElementType_XMLTree_Type::value RPG_Graphics_InterfaceElementType_XMLTree_Type::
_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_indexes_ + 10,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_indexes_ + 10 || _xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_InterfaceElementType_XMLTree_Type::
_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_[10] =
{
  "INTERFACEELEMENT_BORDER_TOP_LEFT",
  "INTERFACEELEMENT_BORDER_TOP_RIGHT",
  "INTERFACEELEMENT_BORDER_BOTTOM_LEFT",
  "INTERFACEELEMENT_BORDER_BOTTOM_RIGHT",
  "INTERFACEELEMENT_BORDER_TOP",
  "INTERFACEELEMENT_BORDER_RIGHT",
  "INTERFACEELEMENT_BORDER_LEFT",
  "INTERFACEELEMENT_BORDER_BOTTOM",
  "INTERFACEELEMENT_BORDER_CENTER",
  "INTERFACEELEMENT_BACKGROUND"
};

const RPG_Graphics_InterfaceElementType_XMLTree_Type::value RPG_Graphics_InterfaceElementType_XMLTree_Type::
_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_indexes_[10] =
{
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BACKGROUND,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_BOTTOM,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_BOTTOM_LEFT,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_BOTTOM_RIGHT,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_CENTER,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_LEFT,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_RIGHT,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_TOP,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_TOP_LEFT,
  ::RPG_Graphics_InterfaceElementType_XMLTree_Type::INTERFACEELEMENT_BORDER_TOP_RIGHT
};

// RPG_Graphics_HotspotType_XMLTree_Type
//

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_HotspotType_XMLTree_Type_convert ();
}

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_HotspotType_XMLTree_Type_convert ();
}

RPG_Graphics_HotspotType_XMLTree_Type::
RPG_Graphics_HotspotType_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_HotspotType_XMLTree_Type_convert ();
}

RPG_Graphics_HotspotType_XMLTree_Type* RPG_Graphics_HotspotType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_HotspotType_XMLTree_Type (*this, f, c);
}

RPG_Graphics_HotspotType_XMLTree_Type::value RPG_Graphics_HotspotType_XMLTree_Type::
_xsd_RPG_Graphics_HotspotType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_HotspotType_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_HotspotType_XMLTree_Type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_HotspotType_XMLTree_Type_indexes_ + 2 || _xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_HotspotType_XMLTree_Type::
_xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_[2] =
{
  "HOTSPOT_ABSOLUTE",
  "HOTSPOT_RELATIVE"
};

const RPG_Graphics_HotspotType_XMLTree_Type::value RPG_Graphics_HotspotType_XMLTree_Type::
_xsd_RPG_Graphics_HotspotType_XMLTree_Type_indexes_[2] =
{
  ::RPG_Graphics_HotspotType_XMLTree_Type::HOTSPOT_ABSOLUTE,
  ::RPG_Graphics_HotspotType_XMLTree_Type::HOTSPOT_RELATIVE
};

// RPG_Graphics_ElementTypeUnion_XMLTree_Type
//

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_convert ();
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_convert ();
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::
RPG_Graphics_ElementTypeUnion_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_convert ();
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type* RPG_Graphics_ElementTypeUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_ElementTypeUnion_XMLTree_Type (*this, f, c);
}

RPG_Graphics_ElementTypeUnion_XMLTree_Type::value RPG_Graphics_ElementTypeUnion_XMLTree_Type::
_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_indexes_ + 12,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_indexes_ + 12 || _xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_ElementTypeUnion_XMLTree_Type::
_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_[12] =
{
  "INTERFACEELEMENT_BORDER_TOP_LEFT",
  "INTERFACEELEMENT_BORDER_TOP_RIGHT",
  "INTERFACEELEMENT_BORDER_BOTTOM_LEFT",
  "INTERFACEELEMENT_BORDER_BOTTOM_RIGHT",
  "INTERFACEELEMENT_BORDER_TOP",
  "INTERFACEELEMENT_BORDER_RIGHT",
  "INTERFACEELEMENT_BORDER_LEFT",
  "INTERFACEELEMENT_BORDER_BOTTOM",
  "INTERFACEELEMENT_BORDER_CENTER",
  "INTERFACEELEMENT_BACKGROUND",
  "HOTSPOT_ABSOLUTE",
  "HOTSPOT_RELATIVE"
};

const RPG_Graphics_ElementTypeUnion_XMLTree_Type::value RPG_Graphics_ElementTypeUnion_XMLTree_Type::
_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_indexes_[12] =
{
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::HOTSPOT_ABSOLUTE,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::HOTSPOT_RELATIVE,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BACKGROUND,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_BOTTOM,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_BOTTOM_LEFT,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_BOTTOM_RIGHT,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_CENTER,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_LEFT,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_RIGHT,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_TOP,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_TOP_LEFT,
  ::RPG_Graphics_ElementTypeUnion_XMLTree_Type::INTERFACEELEMENT_BORDER_TOP_RIGHT
};

// RPG_Graphics_Element_XMLTree_Type
//

RPG_Graphics_Element_XMLTree_Type::
RPG_Graphics_Element_XMLTree_Type (const type_type& type)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  window_ (::xml_schema::flags (), this),
  offsetX_ (::xml_schema::flags (), this),
  offsetY_ (::xml_schema::flags (), this),
  width_ (::xml_schema::flags (), this),
  height_ (::xml_schema::flags (), this)
{
}

RPG_Graphics_Element_XMLTree_Type::
RPG_Graphics_Element_XMLTree_Type (const RPG_Graphics_Element_XMLTree_Type& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  window_ (x.window_, f, this),
  offsetX_ (x.offsetX_, f, this),
  offsetY_ (x.offsetY_, f, this),
  width_ (x.width_, f, this),
  height_ (x.height_, f, this)
{
}

RPG_Graphics_Element_XMLTree_Type::
RPG_Graphics_Element_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  window_ (f, this),
  offsetX_ (f, this),
  offsetY_ (f, this),
  width_ (f, this),
  height_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Graphics_Element_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // window
    //
    if (n.name () == "window" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< window_type > r (
        window_traits::create (i, f, this));

      if (!this->window_)
      {
        this->window_.set (r);
        continue;
      }
    }

    // offsetX
    //
    if (n.name () == "offsetX" && n.namespace_ () == "urn:rpg")
    {
      if (!this->offsetX_)
      {
        this->offsetX_.set (offsetX_traits::create (i, f, this));
        continue;
      }
    }

    // offsetY
    //
    if (n.name () == "offsetY" && n.namespace_ () == "urn:rpg")
    {
      if (!this->offsetY_)
      {
        this->offsetY_.set (offsetY_traits::create (i, f, this));
        continue;
      }
    }

    // width
    //
    if (n.name () == "width" && n.namespace_ () == "urn:rpg")
    {
      if (!this->width_)
      {
        this->width_.set (width_traits::create (i, f, this));
        continue;
      }
    }

    // height
    //
    if (n.name () == "height" && n.namespace_ () == "urn:rpg")
    {
      if (!this->height_)
      {
        this->height_.set (height_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }
}

RPG_Graphics_Element_XMLTree_Type* RPG_Graphics_Element_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Element_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Element_XMLTree_Type::
~RPG_Graphics_Element_XMLTree_Type ()
{
}

bool
operator== (const RPG_Graphics_Element_XMLTree_Type& x, const RPG_Graphics_Element_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.window () == y.window ()))
    return false;

  if (!(x.offsetX () == y.offsetX ()))
    return false;

  if (!(x.offsetY () == y.offsetY ()))
    return false;

  if (!(x.width () == y.width ()))
    return false;

  if (!(x.height () == y.height ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Graphics_Element_XMLTree_Type& x, const RPG_Graphics_Element_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Graphics_Tile_XMLTree_Type
//

RPG_Graphics_Tile_XMLTree_Type::
RPG_Graphics_Tile_XMLTree_Type (const type_type& type)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  reference_ (::xml_schema::flags (), this),
  style_ (::xml_schema::flags (), this),
  orientation_ (::xml_schema::flags (), this),
  file_ (::xml_schema::flags (), this),
  offsetX_ (offsetX_default_value (), ::xml_schema::flags (), this),
  offsetY_ (offsetY_default_value (), ::xml_schema::flags (), this),
  open_ (open_default_value (), ::xml_schema::flags (), this),
  broken_ (broken_default_value (), ::xml_schema::flags (), this)
{
}

RPG_Graphics_Tile_XMLTree_Type::
RPG_Graphics_Tile_XMLTree_Type (const RPG_Graphics_Tile_XMLTree_Type& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  reference_ (x.reference_, f, this),
  style_ (x.style_, f, this),
  orientation_ (x.orientation_, f, this),
  file_ (x.file_, f, this),
  offsetX_ (x.offsetX_, f, this),
  offsetY_ (x.offsetY_, f, this),
  open_ (x.open_, f, this),
  broken_ (x.broken_, f, this)
{
}

RPG_Graphics_Tile_XMLTree_Type::
RPG_Graphics_Tile_XMLTree_Type (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  reference_ (f, this),
  style_ (f, this),
  orientation_ (f, this),
  file_ (f, this),
  offsetX_ (f, this),
  offsetY_ (f, this),
  open_ (f, this),
  broken_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void RPG_Graphics_Tile_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // reference
    //
    if (n.name () == "reference" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< reference_type > r (
        reference_traits::create (i, f, this));

      if (!this->reference_)
      {
        this->reference_.set (r);
        continue;
      }
    }

    // style
    //
    if (n.name () == "style" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< style_type > r (
        style_traits::create (i, f, this));

      if (!this->style_)
      {
        this->style_.set (r);
        continue;
      }
    }

    // orientation
    //
    if (n.name () == "orientation" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< orientation_type > r (
        orientation_traits::create (i, f, this));

      if (!this->orientation_)
      {
        this->orientation_.set (r);
        continue;
      }
    }

    // file
    //
    if (n.name () == "file" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< file_type > r (
        file_traits::create (i, f, this));

      if (!this->file_)
      {
        this->file_.set (r);
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "offsetX" && n.namespace_ ().empty ())
    {
      this->offsetX_.set (offsetX_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "offsetY" && n.namespace_ ().empty ())
    {
      this->offsetY_.set (offsetY_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "open" && n.namespace_ ().empty ())
    {
      this->open_.set (open_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "broken" && n.namespace_ ().empty ())
    {
      this->broken_.set (broken_traits::create (i, f, this));
      continue;
    }
  }

  if (!offsetX_.present ())
  {
    this->offsetX_.set (offsetX_default_value ());
  }

  if (!offsetY_.present ())
  {
    this->offsetY_.set (offsetY_default_value ());
  }

  if (!open_.present ())
  {
    this->open_.set (open_default_value ());
  }

  if (!broken_.present ())
  {
    this->broken_.set (broken_default_value ());
  }
}

RPG_Graphics_Tile_XMLTree_Type* RPG_Graphics_Tile_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Tile_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Tile_XMLTree_Type::
~RPG_Graphics_Tile_XMLTree_Type ()
{
}

bool
operator== (const RPG_Graphics_Tile_XMLTree_Type& x, const RPG_Graphics_Tile_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.reference () == y.reference ()))
    return false;

  if (!(x.style () == y.style ()))
    return false;

  if (!(x.orientation () == y.orientation ()))
    return false;

  if (!(x.file () == y.file ()))
    return false;

  if (!(x.offsetX () == y.offsetX ()))
    return false;

  if (!(x.offsetY () == y.offsetY ()))
    return false;

  if (!(x.open () == y.open ()))
    return false;

  if (!(x.broken () == y.broken ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Graphics_Tile_XMLTree_Type& x, const RPG_Graphics_Tile_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Graphics_TileSetType_XMLTree_Type
//

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_TileSetType_XMLTree_Type_convert ();
}

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_TileSetType_XMLTree_Type_convert ();
}

RPG_Graphics_TileSetType_XMLTree_Type::
RPG_Graphics_TileSetType_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_TileSetType_XMLTree_Type_convert ();
}

RPG_Graphics_TileSetType_XMLTree_Type* RPG_Graphics_TileSetType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_TileSetType_XMLTree_Type (*this, f, c);
}

RPG_Graphics_TileSetType_XMLTree_Type::value RPG_Graphics_TileSetType_XMLTree_Type::
_xsd_RPG_Graphics_TileSetType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_TileSetType_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_TileSetType_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_TileSetType_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_TileSetType_XMLTree_Type::
_xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_[4] =
{
  "TILESETTYPE_DOOR",
  "TILESETTYPE_EDGE_FLOOR",
  "TILESETTYPE_FLOOR",
  "TILESETTYPE_WALL"
};

const RPG_Graphics_TileSetType_XMLTree_Type::value RPG_Graphics_TileSetType_XMLTree_Type::
_xsd_RPG_Graphics_TileSetType_XMLTree_Type_indexes_[4] =
{
  ::RPG_Graphics_TileSetType_XMLTree_Type::TILESETTYPE_DOOR,
  ::RPG_Graphics_TileSetType_XMLTree_Type::TILESETTYPE_EDGE_FLOOR,
  ::RPG_Graphics_TileSetType_XMLTree_Type::TILESETTYPE_FLOOR,
  ::RPG_Graphics_TileSetType_XMLTree_Type::TILESETTYPE_WALL
};

// RPG_Graphics_TileSet_XMLTree_Type
//

RPG_Graphics_TileSet_XMLTree_Type::
RPG_Graphics_TileSet_XMLTree_Type (const type_type& type)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  style_ (::xml_schema::flags (), this),
  tile_ (::xml_schema::flags (), this),
  half_ (half_default_value (), ::xml_schema::flags (), this)
{
}

RPG_Graphics_TileSet_XMLTree_Type::
RPG_Graphics_TileSet_XMLTree_Type (const RPG_Graphics_TileSet_XMLTree_Type& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  style_ (x.style_, f, this),
  tile_ (x.tile_, f, this),
  half_ (x.half_, f, this)
{
}

RPG_Graphics_TileSet_XMLTree_Type::
RPG_Graphics_TileSet_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  style_ (f, this),
  tile_ (f, this),
  half_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void RPG_Graphics_TileSet_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // style
    //
    if (n.name () == "style" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< style_type > r (
        style_traits::create (i, f, this));

      if (!this->style_)
      {
        this->style_.set (r);
        continue;
      }
    }

    // tile
    //
    if (n.name () == "tile" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< tile_type > r (
        tile_traits::create (i, f, this));

      this->tile_.push_back (r);
      continue;
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "half" && n.namespace_ ().empty ())
    {
      this->half_.set (half_traits::create (i, f, this));
      continue;
    }
  }

  if (!half_.present ())
  {
    this->half_.set (half_default_value ());
  }
}

RPG_Graphics_TileSet_XMLTree_Type* RPG_Graphics_TileSet_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_TileSet_XMLTree_Type (*this, f, c);
}

RPG_Graphics_TileSet_XMLTree_Type::
~RPG_Graphics_TileSet_XMLTree_Type ()
{
}

bool
operator== (const RPG_Graphics_TileSet_XMLTree_Type& x, const RPG_Graphics_TileSet_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.style () == y.style ()))
    return false;

  if (!(x.tile () == y.tile ()))
    return false;

  if (!(x.half () == y.half ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Graphics_TileSet_XMLTree_Type& x, const RPG_Graphics_TileSet_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Graphics_Graphic_XMLTree_Type
//

RPG_Graphics_Graphic_XMLTree_Type::
RPG_Graphics_Graphic_XMLTree_Type (const category_type& category,
                                   const type_type& type)
: ::xml_schema::type (),
  category_ (category, ::xml_schema::flags (), this),
  type_ (type, ::xml_schema::flags (), this),
  tile_ (::xml_schema::flags (), this),
  tileset_ (::xml_schema::flags (), this),
  element_ (::xml_schema::flags (), this),
  file_ (::xml_schema::flags (), this),
  size_ (size_default_value (), ::xml_schema::flags (), this)
{
}

RPG_Graphics_Graphic_XMLTree_Type::
RPG_Graphics_Graphic_XMLTree_Type (const RPG_Graphics_Graphic_XMLTree_Type& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  category_ (x.category_, f, this),
  type_ (x.type_, f, this),
  tile_ (x.tile_, f, this),
  tileset_ (x.tileset_, f, this),
  element_ (x.element_, f, this),
  file_ (x.file_, f, this),
  size_ (x.size_, f, this)
{
}

RPG_Graphics_Graphic_XMLTree_Type::
RPG_Graphics_Graphic_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  category_ (f, this),
  type_ (f, this),
  tile_ (f, this),
  tileset_ (f, this),
  element_ (f, this),
  file_ (f, this),
  size_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void RPG_Graphics_Graphic_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // category
    //
    if (n.name () == "category" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< category_type > r (
        category_traits::create (i, f, this));

      if (!category_.present ())
      {
        this->category_.set (r);
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // tile
    //
    if (n.name () == "tile" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< tile_type > r (
        tile_traits::create (i, f, this));

      if (!this->tile_)
      {
        this->tile_.set (r);
        continue;
      }
    }

    // tileset
    //
    if (n.name () == "tileset" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< tileset_type > r (
        tileset_traits::create (i, f, this));

      if (!this->tileset_)
      {
        this->tileset_.set (r);
        continue;
      }
    }

    // element
    //
    if (n.name () == "element" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< element_type > r (
        element_traits::create (i, f, this));

      this->element_.push_back (r);
      continue;
    }

    // file
    //
    if (n.name () == "file" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< file_type > r (
        file_traits::create (i, f, this));

      if (!this->file_)
      {
        this->file_.set (r);
        continue;
      }
    }

    break;
  }

  if (!category_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "category",
      "urn:rpg");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "size" && n.namespace_ ().empty ())
    {
      this->size_.set (size_traits::create (i, f, this));
      continue;
    }
  }

  if (!size_.present ())
  {
    this->size_.set (size_default_value ());
  }
}

RPG_Graphics_Graphic_XMLTree_Type* RPG_Graphics_Graphic_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Graphic_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Graphic_XMLTree_Type::
~RPG_Graphics_Graphic_XMLTree_Type ()
{
}

bool
operator== (const RPG_Graphics_Graphic_XMLTree_Type& x, const RPG_Graphics_Graphic_XMLTree_Type& y)
{
  if (!(x.category () == y.category ()))
    return false;

  if (!(x.type () == y.type ()))
    return false;

  if (!(x.tile () == y.tile ()))
    return false;

  if (!(x.tileset () == y.tileset ()))
    return false;

  if (!(x.element () == y.element ()))
    return false;

  if (!(x.file () == y.file ()))
    return false;

  if (!(x.size () == y.size ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Graphics_Graphic_XMLTree_Type& x, const RPG_Graphics_Graphic_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Graphics_Dictionary_XMLTree_Type
//

RPG_Graphics_Dictionary_XMLTree_Type::
RPG_Graphics_Dictionary_XMLTree_Type ()
: ::xml_schema::type (),
  graphic_ (::xml_schema::flags (), this)
{
}

RPG_Graphics_Dictionary_XMLTree_Type::
RPG_Graphics_Dictionary_XMLTree_Type (const RPG_Graphics_Dictionary_XMLTree_Type& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  graphic_ (x.graphic_, f, this)
{
}

RPG_Graphics_Dictionary_XMLTree_Type::
RPG_Graphics_Dictionary_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  graphic_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Graphics_Dictionary_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // graphic
    //
    if (n.name () == "graphic" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< graphic_type > r (
        graphic_traits::create (i, f, this));

      this->graphic_.push_back (r);
      continue;
    }

    break;
  }
}

RPG_Graphics_Dictionary_XMLTree_Type* RPG_Graphics_Dictionary_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_Dictionary_XMLTree_Type (*this, f, c);
}

RPG_Graphics_Dictionary_XMLTree_Type::
~RPG_Graphics_Dictionary_XMLTree_Type ()
{
}

bool
operator== (const RPG_Graphics_Dictionary_XMLTree_Type& x, const RPG_Graphics_Dictionary_XMLTree_Type& y)
{
  if (!(x.graphic () == y.graphic ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Graphics_Dictionary_XMLTree_Type& x, const RPG_Graphics_Dictionary_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Graphics_ColorName_XMLTree_Type
//

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Graphics_ColorName_XMLTree_Type_convert ();
}

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Graphics_ColorName_XMLTree_Type_convert ();
}

RPG_Graphics_ColorName_XMLTree_Type::
RPG_Graphics_ColorName_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Graphics_ColorName_XMLTree_Type_convert ();
}

RPG_Graphics_ColorName_XMLTree_Type* RPG_Graphics_ColorName_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_ColorName_XMLTree_Type (*this, f, c);
}

RPG_Graphics_ColorName_XMLTree_Type::value RPG_Graphics_ColorName_XMLTree_Type::
_xsd_RPG_Graphics_ColorName_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Graphics_ColorName_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Graphics_ColorName_XMLTree_Type_indexes_,
                    _xsd_RPG_Graphics_ColorName_XMLTree_Type_indexes_ + 23,
                    *this,
                    c));

  if (i == _xsd_RPG_Graphics_ColorName_XMLTree_Type_indexes_ + 23 || _xsd_RPG_Graphics_ColorName_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Graphics_ColorName_XMLTree_Type::
_xsd_RPG_Graphics_ColorName_XMLTree_Type_literals_[23] =
{
  "COLOR_BLACK_A0",
  "COLOR_BLACK_A10",
  "COLOR_BLACK_A30",
  "COLOR_BLACK_A50",
  "COLOR_BLACK_A70",
  "COLOR_BLACK_A90",
  "COLOR_BLACK",
  "COLOR_GREEN",
  "COLOR_YELLOW",
  "COLOR_ORANGE",
  "COLOR_RED",
  "COLOR_GRAY20",
  "COLOR_GRAY20_A10",
  "COLOR_GRAY70",
  "COLOR_GRAY77",
  "COLOR_PURPLE44",
  "COLOR_LIGHTPINK",
  "COLOR_LIGHTGREEN",
  "COLOR_BROWN",
  "COLOR_WHITE",
  "COLOR_BLESS_BLUE",
  "COLOR_CURSE_RED",
  "COLOR_GOLD_SHADE"
};

const RPG_Graphics_ColorName_XMLTree_Type::value RPG_Graphics_ColorName_XMLTree_Type::
_xsd_RPG_Graphics_ColorName_XMLTree_Type_indexes_[23] =
{
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK_A0,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK_A10,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK_A30,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK_A50,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK_A70,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLACK_A90,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BLESS_BLUE,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_BROWN,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_CURSE_RED,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_GOLD_SHADE,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_GRAY20,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_GRAY20_A10,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_GRAY70,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_GRAY77,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_GREEN,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_LIGHTGREEN,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_LIGHTPINK,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_ORANGE,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_PURPLE44,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_RED,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_WHITE,
  ::RPG_Graphics_ColorName_XMLTree_Type::COLOR_YELLOW
};

// RPG_Graphics_ColorRGBA_XMLTree_Type
//

RPG_Graphics_ColorRGBA_XMLTree_Type::
RPG_Graphics_ColorRGBA_XMLTree_Type (const r_type& r,
                                     const g_type& g,
                                     const b_type& b,
                                     const a_type& a)
: ::xml_schema::type (),
  r_ (r, ::xml_schema::flags (), this),
  g_ (g, ::xml_schema::flags (), this),
  b_ (b, ::xml_schema::flags (), this),
  a_ (a, ::xml_schema::flags (), this)
{
}

RPG_Graphics_ColorRGBA_XMLTree_Type::
RPG_Graphics_ColorRGBA_XMLTree_Type (const RPG_Graphics_ColorRGBA_XMLTree_Type& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  r_ (x.r_, f, this),
  g_ (x.g_, f, this),
  b_ (x.b_, f, this),
  a_ (x.a_, f, this)
{
}

RPG_Graphics_ColorRGBA_XMLTree_Type::
RPG_Graphics_ColorRGBA_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  r_ (f, this),
  g_ (f, this),
  b_ (f, this),
  a_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Graphics_ColorRGBA_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // r
    //
    if (n.name () == "r" && n.namespace_ () == "urn:rpg")
    {
      if (!r_.present ())
      {
        this->r_.set (r_traits::create (i, f, this));
        continue;
      }
    }

    // g
    //
    if (n.name () == "g" && n.namespace_ () == "urn:rpg")
    {
      if (!g_.present ())
      {
        this->g_.set (g_traits::create (i, f, this));
        continue;
      }
    }

    // b
    //
    if (n.name () == "b" && n.namespace_ () == "urn:rpg")
    {
      if (!b_.present ())
      {
        this->b_.set (b_traits::create (i, f, this));
        continue;
      }
    }

    // a
    //
    if (n.name () == "a" && n.namespace_ () == "urn:rpg")
    {
      if (!a_.present ())
      {
        this->a_.set (a_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!r_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "r",
      "urn:rpg");
  }

  if (!g_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "g",
      "urn:rpg");
  }

  if (!b_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "b",
      "urn:rpg");
  }

  if (!a_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "a",
      "urn:rpg");
  }
}

RPG_Graphics_ColorRGBA_XMLTree_Type* RPG_Graphics_ColorRGBA_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Graphics_ColorRGBA_XMLTree_Type (*this, f, c);
}

RPG_Graphics_ColorRGBA_XMLTree_Type::
~RPG_Graphics_ColorRGBA_XMLTree_Type ()
{
}

bool
operator== (const RPG_Graphics_ColorRGBA_XMLTree_Type& x, const RPG_Graphics_ColorRGBA_XMLTree_Type& y)
{
  if (!(x.r () == y.r ()))
    return false;

  if (!(x.g () == y.g ()))
    return false;

  if (!(x.b () == y.b ()))
    return false;

  if (!(x.a () == y.a ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Graphics_ColorRGBA_XMLTree_Type& x, const RPG_Graphics_ColorRGBA_XMLTree_Type& y)
{
  return !(x == y);
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_Category_XMLTree_Type::value i)
{
  return o << RPG_Graphics_Category_XMLTree_Type::_xsd_RPG_Graphics_Category_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Category_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_Orientation_XMLTree_Type::value i)
{
  return o << RPG_Graphics_Orientation_XMLTree_Type::_xsd_RPG_Graphics_Orientation_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Orientation_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_TileType_XMLTree_Type::value i)
{
  return o << RPG_Graphics_TileType_XMLTree_Type::_xsd_RPG_Graphics_TileType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_TileType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_FloorStyle_XMLTree_Type::value i)
{
  return o << RPG_Graphics_FloorStyle_XMLTree_Type::_xsd_RPG_Graphics_FloorStyle_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_FloorStyle_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_StairsStyle_XMLTree_Type::value i)
{
  return o << RPG_Graphics_StairsStyle_XMLTree_Type::_xsd_RPG_Graphics_StairsStyle_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_StairsStyle_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_WallStyle_XMLTree_Type::value i)
{
  return o << RPG_Graphics_WallStyle_XMLTree_Type::_xsd_RPG_Graphics_WallStyle_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_WallStyle_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_EdgeStyle_XMLTree_Type::value i)
{
  return o << RPG_Graphics_EdgeStyle_XMLTree_Type::_xsd_RPG_Graphics_EdgeStyle_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_EdgeStyle_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_DoorStyle_XMLTree_Type::value i)
{
  return o << RPG_Graphics_DoorStyle_XMLTree_Type::_xsd_RPG_Graphics_DoorStyle_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_DoorStyle_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_StyleUnion_XMLTree_Type::value i)
{
  return o << RPG_Graphics_StyleUnion_XMLTree_Type::_xsd_RPG_Graphics_StyleUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_StyleUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_Cursor_XMLTree_Type::value i)
{
  return o << RPG_Graphics_Cursor_XMLTree_Type::_xsd_RPG_Graphics_Cursor_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Cursor_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_Font_XMLTree_Type::value i)
{
  return o << RPG_Graphics_Font_XMLTree_Type::_xsd_RPG_Graphics_Font_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Font_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_Image_XMLTree_Type::value i)
{
  return o << RPG_Graphics_Image_XMLTree_Type::_xsd_RPG_Graphics_Image_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Image_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_Sprite_XMLTree_Type::value i)
{
  return o << RPG_Graphics_Sprite_XMLTree_Type::_xsd_RPG_Graphics_Sprite_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Sprite_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_TileGraphic_XMLTree_Type::value i)
{
  return o << RPG_Graphics_TileGraphic_XMLTree_Type::_xsd_RPG_Graphics_TileGraphic_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_TileGraphic_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_TileSetGraphic_XMLTree_Type::value i)
{
  return o << RPG_Graphics_TileSetGraphic_XMLTree_Type::_xsd_RPG_Graphics_TileSetGraphic_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_TileSetGraphic_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_GraphicTypeUnion_XMLTree_Type::value i)
{
  return o << RPG_Graphics_GraphicTypeUnion_XMLTree_Type::_xsd_RPG_Graphics_GraphicTypeUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_GraphicTypeUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_WindowType_XMLTree_Type::value i)
{
  return o << RPG_Graphics_WindowType_XMLTree_Type::_xsd_RPG_Graphics_WindowType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_WindowType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_InterfaceElementType_XMLTree_Type::value i)
{
  return o << RPG_Graphics_InterfaceElementType_XMLTree_Type::_xsd_RPG_Graphics_InterfaceElementType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_InterfaceElementType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_HotspotType_XMLTree_Type::value i)
{
  return o << RPG_Graphics_HotspotType_XMLTree_Type::_xsd_RPG_Graphics_HotspotType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_HotspotType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_ElementTypeUnion_XMLTree_Type::value i)
{
  return o << RPG_Graphics_ElementTypeUnion_XMLTree_Type::_xsd_RPG_Graphics_ElementTypeUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_ElementTypeUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Element_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.window ())
  {
    o << ::std::endl << "window: " << *i.window ();
  }

  if (i.offsetX ())
  {
    o << ::std::endl << "offsetX: " << *i.offsetX ();
  }

  if (i.offsetY ())
  {
    o << ::std::endl << "offsetY: " << *i.offsetY ();
  }

  if (i.width ())
  {
    o << ::std::endl << "width: " << *i.width ();
  }

  if (i.height ())
  {
    o << ::std::endl << "height: " << *i.height ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Tile_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.reference ())
  {
    o << ::std::endl << "reference: " << *i.reference ();
  }

  if (i.style ())
  {
    o << ::std::endl << "style: " << *i.style ();
  }

  if (i.orientation ())
  {
    o << ::std::endl << "orientation: " << *i.orientation ();
  }

  if (i.file ())
  {
    o << ::std::endl << "file: " << *i.file ();
  }

  o << ::std::endl << "offsetX: " << i.offsetX ();
  o << ::std::endl << "offsetY: " << i.offsetY ();
  o << ::std::endl << "open: " << i.open ();
  o << ::std::endl << "broken: " << i.broken ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_TileSetType_XMLTree_Type::value i)
{
  return o << RPG_Graphics_TileSetType_XMLTree_Type::_xsd_RPG_Graphics_TileSetType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_TileSetType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_TileSet_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.style ())
  {
    o << ::std::endl << "style: " << *i.style ();
  }

  for (RPG_Graphics_TileSet_XMLTree_Type::tile_const_iterator
       b (i.tile ().begin ()), e (i.tile ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "tile: " << *b;
  }

  o << ::std::endl << "half: " << i.half ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Graphic_XMLTree_Type& i)
{
  o << ::std::endl << "category: " << i.category ();
  o << ::std::endl << "type: " << i.type ();
  if (i.tile ())
  {
    o << ::std::endl << "tile: " << *i.tile ();
  }

  if (i.tileset ())
  {
    o << ::std::endl << "tileset: " << *i.tileset ();
  }

  for (RPG_Graphics_Graphic_XMLTree_Type::element_const_iterator
       b (i.element ().begin ()), e (i.element ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "element: " << *b;
  }

  if (i.file ())
  {
    o << ::std::endl << "file: " << *i.file ();
  }

  o << ::std::endl << "size: " << i.size ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_Dictionary_XMLTree_Type& i)
{
  for (RPG_Graphics_Dictionary_XMLTree_Type::graphic_const_iterator
       b (i.graphic ().begin ()), e (i.graphic ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "graphic: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Graphics_ColorName_XMLTree_Type::value i)
{
  return o << RPG_Graphics_ColorName_XMLTree_Type::_xsd_RPG_Graphics_ColorName_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_ColorName_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Graphics_ColorRGBA_XMLTree_Type& i)
{
  o << ::std::endl << "r: " << i.r ();
  o << ::std::endl << "g: " << i.g ();
  o << ::std::endl << "b: " << i.b ();
  o << ::std::endl << "a: " << i.a ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
    ::graphicsDictionary (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
    ::graphicsDictionary (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
    ::graphicsDictionary (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::graphicsDictionary (isrc, f, p);
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::graphicsDictionary (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::graphicsDictionary (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::graphicsDictionary (isrc, f, p);
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::graphicsDictionary (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::graphicsDictionary (isrc, h, f, p);
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
    ::graphicsDictionary (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
    ::graphicsDictionary (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
    ::graphicsDictionary (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
      ::graphicsDictionary (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "graphicsDictionary" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Graphics_Dictionary_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "graphicsDictionary",
    "urn:rpg");
}

::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type >
graphicsDictionary (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "graphicsDictionary" &&
      n.namespace_ () == "urn:rpg")
  {
    ::std::auto_ptr< ::RPG_Graphics_Dictionary_XMLTree_Type > r (
      ::xsd::cxx::tree::traits< ::RPG_Graphics_Dictionary_XMLTree_Type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "graphicsDictionary",
    "urn:rpg");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Category_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_Category_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_Category_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Orientation_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_Orientation_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_Orientation_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_TileType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_TileType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_TileType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_FloorStyle_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_FloorStyle_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_FloorStyle_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_StairsStyle_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_StairsStyle_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_StairsStyle_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_WallStyle_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_WallStyle_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_WallStyle_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_EdgeStyle_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_EdgeStyle_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_EdgeStyle_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_DoorStyle_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_DoorStyle_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_DoorStyle_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_StyleUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_StyleUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_StyleUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Cursor_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_Cursor_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_Cursor_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Font_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_Font_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_Font_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Image_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_Image_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_Image_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Sprite_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_Sprite_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_Sprite_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_TileGraphic_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_TileGraphic_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_TileGraphic_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_TileSetGraphic_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_TileSetGraphic_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_TileSetGraphic_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_GraphicTypeUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_GraphicTypeUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_GraphicTypeUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_WindowType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_WindowType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_WindowType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_InterfaceElementType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_InterfaceElementType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_InterfaceElementType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_HotspotType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_HotspotType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_HotspotType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_ElementTypeUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_ElementTypeUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_ElementTypeUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Element_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // window
  //
  if (i.window ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "window",
        "urn:rpg",
        e));

    s << *i.window ();
  }

  // offsetX
  //
  if (i.offsetX ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "offsetX",
        "urn:rpg",
        e));

    s << *i.offsetX ();
  }

  // offsetY
  //
  if (i.offsetY ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "offsetY",
        "urn:rpg",
        e));

    s << *i.offsetY ();
  }

  // width
  //
  if (i.width ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "width",
        "urn:rpg",
        e));

    s << *i.width ();
  }

  // height
  //
  if (i.height ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "height",
        "urn:rpg",
        e));

    s << *i.height ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Tile_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // reference
  //
  if (i.reference ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "reference",
        "urn:rpg",
        e));

    s << *i.reference ();
  }

  // style
  //
  if (i.style ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "style",
        "urn:rpg",
        e));

    s << *i.style ();
  }

  // orientation
  //
  if (i.orientation ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "orientation",
        "urn:rpg",
        e));

    s << *i.orientation ();
  }

  // file
  //
  if (i.file ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "file",
        "urn:rpg",
        e));

    s << *i.file ();
  }

  // offsetX
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "offsetX",
        e));

    a << i.offsetX ();
  }

  // offsetY
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "offsetY",
        e));

    a << i.offsetY ();
  }

  // open
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "open",
        e));

    a << i.open ();
  }

  // broken
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "broken",
        e));

    a << i.broken ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_TileSetType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_TileSetType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_TileSetType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_TileSet_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // style
  //
  if (i.style ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "style",
        "urn:rpg",
        e));

    s << *i.style ();
  }

  // tile
  //
  for (RPG_Graphics_TileSet_XMLTree_Type::tile_const_iterator
       b (i.tile ().begin ()), n (i.tile ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "tile",
        "urn:rpg",
        e));

    s << *b;
  }

  // half
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "half",
        e));

    a << i.half ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Graphic_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // category
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "category",
        "urn:rpg",
        e));

    s << i.category ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // tile
  //
  if (i.tile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "tile",
        "urn:rpg",
        e));

    s << *i.tile ();
  }

  // tileset
  //
  if (i.tileset ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "tileset",
        "urn:rpg",
        e));

    s << *i.tileset ();
  }

  // element
  //
  for (RPG_Graphics_Graphic_XMLTree_Type::element_const_iterator
       b (i.element ().begin ()), n (i.element ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "element",
        "urn:rpg",
        e));

    s << *b;
  }

  // file
  //
  if (i.file ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "file",
        "urn:rpg",
        e));

    s << *i.file ();
  }

  // size
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "size",
        e));

    a << i.size ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_Dictionary_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // graphic
  //
  for (RPG_Graphics_Dictionary_XMLTree_Type::graphic_const_iterator
       b (i.graphic ().begin ()), n (i.graphic ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "graphic",
        "urn:rpg",
        e));

    s << *b;
  }
}

void
graphicsDictionary (::std::ostream& o,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::graphicsDictionary (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
graphicsDictionary (::std::ostream& o,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::graphicsDictionary (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
graphicsDictionary (::std::ostream& o,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::graphicsDictionary (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
graphicsDictionary (::xercesc::XMLFormatTarget& t,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::graphicsDictionary (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
graphicsDictionary (::xercesc::XMLFormatTarget& t,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::graphicsDictionary (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
graphicsDictionary (::xercesc::XMLFormatTarget& t,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::graphicsDictionary (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
graphicsDictionary (::xercesc::DOMDocument& d,
                    const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "graphicsDictionary" &&
      n.namespace_ () == "urn:rpg")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "graphicsDictionary",
      "urn:rpg");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
graphicsDictionary (const ::RPG_Graphics_Dictionary_XMLTree_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "graphicsDictionary",
      "urn:rpg",
      m, f));

  ::graphicsDictionary (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_ColorName_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Graphics_ColorName_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Graphics_ColorName_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Graphics_ColorRGBA_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // r
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "r",
        "urn:rpg",
        e));

    s << i.r ();
  }

  // g
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "g",
        "urn:rpg",
        e));

    s << i.g ();
  }

  // b
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "b",
        "urn:rpg",
        e));

    s << i.b ();
  }

  // a
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "a",
        "urn:rpg",
        e));

    s << i.a ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

