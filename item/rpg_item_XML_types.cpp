// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <rpg_item_XML_types.h>

// RPG_Item_StorePrice_Type_pskel
//

void RPG_Item_StorePrice_Type_pskel::
numGoldPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numGoldPieces_parser_ = &p;
}

void RPG_Item_StorePrice_Type_pskel::
numSilverPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numSilverPieces_parser_ = &p;
}

void RPG_Item_StorePrice_Type_pskel::
parsers (::xml_schema::unsigned_int_pskel& numGoldPieces,
         ::xml_schema::unsigned_int_pskel& numSilverPieces)
{
  this->numGoldPieces_parser_ = &numGoldPieces;
  this->numSilverPieces_parser_ = &numSilverPieces;
}

RPG_Item_StorePrice_Type_pskel::
RPG_Item_StorePrice_Type_pskel ()
: numGoldPieces_parser_ (0),
  numSilverPieces_parser_ (0)
{
}

// RPG_Item_CriticalHitModifier_Type_pskel
//

void RPG_Item_CriticalHitModifier_Type_pskel::
minToHitRoll_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->minToHitRoll_parser_ = &p;
}

void RPG_Item_CriticalHitModifier_Type_pskel::
damageModifier_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->damageModifier_parser_ = &p;
}

void RPG_Item_CriticalHitModifier_Type_pskel::
parsers (::xml_schema::unsigned_byte_pskel& minToHitRoll,
         ::xml_schema::unsigned_byte_pskel& damageModifier)
{
  this->minToHitRoll_parser_ = &minToHitRoll;
  this->damageModifier_parser_ = &damageModifier;
}

RPG_Item_CriticalHitModifier_Type_pskel::
RPG_Item_CriticalHitModifier_Type_pskel ()
: minToHitRoll_parser_ (0),
  damageModifier_parser_ (0)
{
}

// RPG_Item_WeaponPropertiesXML_Type_pskel
//

void RPG_Item_WeaponPropertiesXML_Type_pskel::
weaponType_parser (::RPG_Item_WeaponType_Type_pskel& p)
{
  this->weaponType_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
weaponCategory_parser (::RPG_Item_WeaponCategory_Type_pskel& p)
{
  this->weaponCategory_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
weaponClass_parser (::RPG_Item_WeaponClass_Type_pskel& p)
{
  this->weaponClass_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
baseStorePrice_parser (::RPG_Item_StorePrice_Type_pskel& p)
{
  this->baseStorePrice_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
baseDamage_parser (::RPG_Chance_DiceRoll_Type_pskel& p)
{
  this->baseDamage_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
criticalHitModifier_parser (::RPG_Item_CriticalHitModifier_Type_pskel& p)
{
  this->criticalHitModifier_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
rangeIncrement_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->rangeIncrement_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
baseWeight_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->baseWeight_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
typeOfDamage_parser (::RPG_Item_PhysicalDamageType_Type_pskel& p)
{
  this->typeOfDamage_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
parsers (::RPG_Item_WeaponType_Type_pskel& weaponType,
         ::RPG_Item_WeaponCategory_Type_pskel& weaponCategory,
         ::RPG_Item_WeaponClass_Type_pskel& weaponClass,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Chance_DiceRoll_Type_pskel& baseDamage,
         ::RPG_Item_CriticalHitModifier_Type_pskel& criticalHitModifier,
         ::xml_schema::unsigned_byte_pskel& rangeIncrement,
         ::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_PhysicalDamageType_Type_pskel& typeOfDamage)
{
  this->weaponType_parser_ = &weaponType;
  this->weaponCategory_parser_ = &weaponCategory;
  this->weaponClass_parser_ = &weaponClass;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->baseDamage_parser_ = &baseDamage;
  this->criticalHitModifier_parser_ = &criticalHitModifier;
  this->rangeIncrement_parser_ = &rangeIncrement;
  this->baseWeight_parser_ = &baseWeight;
  this->typeOfDamage_parser_ = &typeOfDamage;
}

RPG_Item_WeaponPropertiesXML_Type_pskel::
RPG_Item_WeaponPropertiesXML_Type_pskel ()
: weaponType_parser_ (0),
  weaponCategory_parser_ (0),
  weaponClass_parser_ (0),
  baseStorePrice_parser_ (0),
  baseDamage_parser_ (0),
  criticalHitModifier_parser_ (0),
  rangeIncrement_parser_ (0),
  baseWeight_parser_ (0),
  typeOfDamage_parser_ (0)
{
}

// RPG_Item_MagicWeaponPropertiesXML_Type_pskel
//

void RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
toHitModifier_parser (::xml_schema::byte_pskel& p)
{
  this->toHitModifier_parser_ = &p;
}

void RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
parsers (::RPG_Item_WeaponType_Type_pskel& weaponType,
         ::RPG_Item_WeaponCategory_Type_pskel& weaponCategory,
         ::RPG_Item_WeaponClass_Type_pskel& weaponClass,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Chance_DiceRoll_Type_pskel& baseDamage,
         ::RPG_Item_CriticalHitModifier_Type_pskel& criticalHitModifier,
         ::xml_schema::unsigned_byte_pskel& rangeIncrement,
         ::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_PhysicalDamageType_Type_pskel& typeOfDamage,
         ::xml_schema::byte_pskel& toHitModifier)
{
  this->weaponType_parser_ = &weaponType;
  this->weaponCategory_parser_ = &weaponCategory;
  this->weaponClass_parser_ = &weaponClass;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->baseDamage_parser_ = &baseDamage;
  this->criticalHitModifier_parser_ = &criticalHitModifier;
  this->rangeIncrement_parser_ = &rangeIncrement;
  this->baseWeight_parser_ = &baseWeight;
  this->typeOfDamage_parser_ = &typeOfDamage;
  this->toHitModifier_parser_ = &toHitModifier;
}

RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
RPG_Item_MagicWeaponPropertiesXML_Type_pskel ()
: toHitModifier_parser_ (0)
{
}

// RPG_Item_WeaponDictionary_Type_pskel
//

void RPG_Item_WeaponDictionary_Type_pskel::
weapon_parser (::RPG_Item_WeaponPropertiesXML_Type_pskel& p)
{
  this->weapon_parser_ = &p;
}

void RPG_Item_WeaponDictionary_Type_pskel::
parsers (::RPG_Item_WeaponPropertiesXML_Type_pskel& weapon)
{
  this->weapon_parser_ = &weapon;
}

RPG_Item_WeaponDictionary_Type_pskel::
RPG_Item_WeaponDictionary_Type_pskel ()
: weapon_parser_ (0)
{
}

// RPG_Item_ArmorPropertiesXML_Type_pskel
//

void RPG_Item_ArmorPropertiesXML_Type_pskel::
armorType_parser (::RPG_Item_ArmorType_Type_pskel& p)
{
  this->armorType_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
armorCategory_parser (::RPG_Item_ArmorCategory_Type_pskel& p)
{
  this->armorCategory_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseStorePrice_parser (::RPG_Item_StorePrice_Type_pskel& p)
{
  this->baseStorePrice_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseArmorBonus_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->baseArmorBonus_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
maxDexterityBonus_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->maxDexterityBonus_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
armorCheckPenalty_parser (::xml_schema::byte_pskel& p)
{
  this->armorCheckPenalty_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
arcaneSpellFailure_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->arcaneSpellFailure_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseSpeed_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->baseSpeed_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseWeight_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->baseWeight_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
parsers (::RPG_Item_ArmorType_Type_pskel& armorType,
         ::RPG_Item_ArmorCategory_Type_pskel& armorCategory,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::xml_schema::unsigned_byte_pskel& baseArmorBonus,
         ::xml_schema::unsigned_byte_pskel& maxDexterityBonus,
         ::xml_schema::byte_pskel& armorCheckPenalty,
         ::xml_schema::unsigned_byte_pskel& arcaneSpellFailure,
         ::xml_schema::unsigned_short_pskel& baseSpeed,
         ::xml_schema::unsigned_short_pskel& baseWeight)
{
  this->armorType_parser_ = &armorType;
  this->armorCategory_parser_ = &armorCategory;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->baseArmorBonus_parser_ = &baseArmorBonus;
  this->maxDexterityBonus_parser_ = &maxDexterityBonus;
  this->armorCheckPenalty_parser_ = &armorCheckPenalty;
  this->arcaneSpellFailure_parser_ = &arcaneSpellFailure;
  this->baseSpeed_parser_ = &baseSpeed;
  this->baseWeight_parser_ = &baseWeight;
}

RPG_Item_ArmorPropertiesXML_Type_pskel::
RPG_Item_ArmorPropertiesXML_Type_pskel ()
: armorType_parser_ (0),
  armorCategory_parser_ (0),
  baseStorePrice_parser_ (0),
  baseArmorBonus_parser_ (0),
  maxDexterityBonus_parser_ (0),
  armorCheckPenalty_parser_ (0),
  arcaneSpellFailure_parser_ (0),
  baseSpeed_parser_ (0),
  baseWeight_parser_ (0)
{
}

// RPG_Item_MagicArmorPropertiesXML_Type_pskel
//

void RPG_Item_MagicArmorPropertiesXML_Type_pskel::
defenseModifier_parser (::xml_schema::byte_pskel& p)
{
  this->defenseModifier_parser_ = &p;
}

void RPG_Item_MagicArmorPropertiesXML_Type_pskel::
parsers (::RPG_Item_ArmorType_Type_pskel& armorType,
         ::RPG_Item_ArmorCategory_Type_pskel& armorCategory,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::xml_schema::unsigned_byte_pskel& baseArmorBonus,
         ::xml_schema::unsigned_byte_pskel& maxDexterityBonus,
         ::xml_schema::byte_pskel& armorCheckPenalty,
         ::xml_schema::unsigned_byte_pskel& arcaneSpellFailure,
         ::xml_schema::unsigned_short_pskel& baseSpeed,
         ::xml_schema::unsigned_short_pskel& baseWeight,
         ::xml_schema::byte_pskel& defenseModifier)
{
  this->armorType_parser_ = &armorType;
  this->armorCategory_parser_ = &armorCategory;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->baseArmorBonus_parser_ = &baseArmorBonus;
  this->maxDexterityBonus_parser_ = &maxDexterityBonus;
  this->armorCheckPenalty_parser_ = &armorCheckPenalty;
  this->arcaneSpellFailure_parser_ = &arcaneSpellFailure;
  this->baseSpeed_parser_ = &baseSpeed;
  this->baseWeight_parser_ = &baseWeight;
  this->defenseModifier_parser_ = &defenseModifier;
}

RPG_Item_MagicArmorPropertiesXML_Type_pskel::
RPG_Item_MagicArmorPropertiesXML_Type_pskel ()
: defenseModifier_parser_ (0)
{
}

// RPG_Item_ArmorDictionary_Type_pskel
//

void RPG_Item_ArmorDictionary_Type_pskel::
armor_parser (::RPG_Item_ArmorPropertiesXML_Type_pskel& p)
{
  this->armor_parser_ = &p;
}

void RPG_Item_ArmorDictionary_Type_pskel::
parsers (::RPG_Item_ArmorPropertiesXML_Type_pskel& armor)
{
  this->armor_parser_ = &armor;
}

RPG_Item_ArmorDictionary_Type_pskel::
RPG_Item_ArmorDictionary_Type_pskel ()
: armor_parser_ (0)
{
}

// RPG_Item_Dictionary_Type_pskel
//

void RPG_Item_Dictionary_Type_pskel::
weaponDictionary_parser (::RPG_Item_WeaponDictionary_Type_pskel& p)
{
  this->weaponDictionary_parser_ = &p;
}

void RPG_Item_Dictionary_Type_pskel::
armorDictionary_parser (::RPG_Item_ArmorDictionary_Type_pskel& p)
{
  this->armorDictionary_parser_ = &p;
}

void RPG_Item_Dictionary_Type_pskel::
parsers (::RPG_Item_WeaponDictionary_Type_pskel& weaponDictionary,
         ::RPG_Item_ArmorDictionary_Type_pskel& armorDictionary)
{
  this->weaponDictionary_parser_ = &weaponDictionary;
  this->armorDictionary_parser_ = &armorDictionary;
}

RPG_Item_Dictionary_Type_pskel::
RPG_Item_Dictionary_Type_pskel ()
: weaponDictionary_parser_ (0),
  armorDictionary_parser_ (0)
{
}

// RPG_Item_Type_Type_pskel
//

void RPG_Item_Type_Type_pskel::
post_RPG_Item_Type_Type ()
{
}

// RPG_Item_Money_Type_pskel
//

void RPG_Item_Money_Type_pskel::
post_RPG_Item_Money_Type ()
{
}

// RPG_Item_StorePrice_Type_pskel
//

void RPG_Item_StorePrice_Type_pskel::
numGoldPieces (unsigned int)
{
}

void RPG_Item_StorePrice_Type_pskel::
numSilverPieces (unsigned int)
{
}

bool RPG_Item_StorePrice_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "numGoldPieces" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->numGoldPieces_parser_;

    if (this->numGoldPieces_parser_)
      this->numGoldPieces_parser_->pre ();

    return true;
  }

  if (n == "numSilverPieces" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->numSilverPieces_parser_;

    if (this->numSilverPieces_parser_)
      this->numSilverPieces_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_StorePrice_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "numGoldPieces" && ns == "urn:rpg")
  {
    if (this->numGoldPieces_parser_)
      this->numGoldPieces (this->numGoldPieces_parser_->post_unsigned_int ());

    return true;
  }

  if (n == "numSilverPieces" && ns == "urn:rpg")
  {
    if (this->numSilverPieces_parser_)
      this->numSilverPieces (this->numSilverPieces_parser_->post_unsigned_int ());

    return true;
  }

  return false;
}

// RPG_Item_CriticalHitModifier_Type_pskel
//

void RPG_Item_CriticalHitModifier_Type_pskel::
minToHitRoll (unsigned char)
{
}

void RPG_Item_CriticalHitModifier_Type_pskel::
damageModifier (unsigned char)
{
}

bool RPG_Item_CriticalHitModifier_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "minToHitRoll" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->minToHitRoll_parser_;

    if (this->minToHitRoll_parser_)
      this->minToHitRoll_parser_->pre ();

    return true;
  }

  if (n == "damageModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->damageModifier_parser_;

    if (this->damageModifier_parser_)
      this->damageModifier_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_CriticalHitModifier_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "minToHitRoll" && ns == "urn:rpg")
  {
    if (this->minToHitRoll_parser_)
      this->minToHitRoll (this->minToHitRoll_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "damageModifier" && ns == "urn:rpg")
  {
    if (this->damageModifier_parser_)
      this->damageModifier (this->damageModifier_parser_->post_unsigned_byte ());

    return true;
  }

  return false;
}

// RPG_Item_WeaponPropertiesXML_Type_pskel
//

void RPG_Item_WeaponPropertiesXML_Type_pskel::
weaponType (const RPG_Item_WeaponType&)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
weaponCategory (const RPG_Item_WeaponCategory&)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
weaponClass (const RPG_Item_WeaponClass&)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
baseStorePrice (const RPG_Item_StorePrice&)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
baseDamage (const RPG_Item_Damage&)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
criticalHitModifier (const RPG_Item_CriticalHitModifier&)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
rangeIncrement (unsigned char)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
baseWeight (unsigned short)
{
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
typeOfDamage (const RPG_Item_PhysicalDamageType&)
{
}

bool RPG_Item_WeaponPropertiesXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "weaponType" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponType_parser_;

    if (this->weaponType_parser_)
      this->weaponType_parser_->pre ();

    return true;
  }

  if (n == "weaponCategory" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponCategory_parser_;

    if (this->weaponCategory_parser_)
      this->weaponCategory_parser_->pre ();

    return true;
  }

  if (n == "weaponClass" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponClass_parser_;

    if (this->weaponClass_parser_)
      this->weaponClass_parser_->pre ();

    return true;
  }

  if (n == "baseStorePrice" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseStorePrice_parser_;

    if (this->baseStorePrice_parser_)
      this->baseStorePrice_parser_->pre ();

    return true;
  }

  if (n == "baseDamage" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseDamage_parser_;

    if (this->baseDamage_parser_)
      this->baseDamage_parser_->pre ();

    return true;
  }

  if (n == "criticalHitModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->criticalHitModifier_parser_;

    if (this->criticalHitModifier_parser_)
      this->criticalHitModifier_parser_->pre ();

    return true;
  }

  if (n == "rangeIncrement" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->rangeIncrement_parser_;

    if (this->rangeIncrement_parser_)
      this->rangeIncrement_parser_->pre ();

    return true;
  }

  if (n == "baseWeight" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseWeight_parser_;

    if (this->baseWeight_parser_)
      this->baseWeight_parser_->pre ();

    return true;
  }

  if (n == "typeOfDamage" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->typeOfDamage_parser_;

    if (this->typeOfDamage_parser_)
      this->typeOfDamage_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_WeaponPropertiesXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "weaponType" && ns == "urn:rpg")
  {
    if (this->weaponType_parser_)
      this->weaponType (this->weaponType_parser_->post_RPG_Item_WeaponType_Type ());

    return true;
  }

  if (n == "weaponCategory" && ns == "urn:rpg")
  {
    if (this->weaponCategory_parser_)
      this->weaponCategory (this->weaponCategory_parser_->post_RPG_Item_WeaponCategory_Type ());

    return true;
  }

  if (n == "weaponClass" && ns == "urn:rpg")
  {
    if (this->weaponClass_parser_)
      this->weaponClass (this->weaponClass_parser_->post_RPG_Item_WeaponClass_Type ());

    return true;
  }

  if (n == "baseStorePrice" && ns == "urn:rpg")
  {
    if (this->baseStorePrice_parser_)
      this->baseStorePrice (this->baseStorePrice_parser_->post_RPG_Item_StorePrice_Type ());

    return true;
  }

  if (n == "baseDamage" && ns == "urn:rpg")
  {
    if (this->baseDamage_parser_)
      this->baseDamage (this->baseDamage_parser_->post_RPG_Chance_DiceRoll_Type ());

    return true;
  }

  if (n == "criticalHitModifier" && ns == "urn:rpg")
  {
    if (this->criticalHitModifier_parser_)
      this->criticalHitModifier (this->criticalHitModifier_parser_->post_RPG_Item_CriticalHitModifier_Type ());

    return true;
  }

  if (n == "rangeIncrement" && ns == "urn:rpg")
  {
    if (this->rangeIncrement_parser_)
      this->rangeIncrement (this->rangeIncrement_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "baseWeight" && ns == "urn:rpg")
  {
    if (this->baseWeight_parser_)
      this->baseWeight (this->baseWeight_parser_->post_unsigned_short ());

    return true;
  }

  if (n == "typeOfDamage" && ns == "urn:rpg")
  {
    if (this->typeOfDamage_parser_)
      this->typeOfDamage (this->typeOfDamage_parser_->post_RPG_Item_PhysicalDamageType_Type ());

    return true;
  }

  return false;
}

// RPG_Item_MagicWeaponPropertiesXML_Type_pskel
//

void RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
toHitModifier (signed char)
{
}

void RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
post_RPG_Item_MagicWeaponPropertiesXML_Type ()
{
}

bool RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_WeaponPropertiesXML_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "toHitModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->toHitModifier_parser_;

    if (this->toHitModifier_parser_)
      this->toHitModifier_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_MagicWeaponPropertiesXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_WeaponPropertiesXML_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "toHitModifier" && ns == "urn:rpg")
  {
    if (this->toHitModifier_parser_)
      this->toHitModifier (this->toHitModifier_parser_->post_byte ());

    return true;
  }

  return false;
}

// RPG_Item_WeaponDictionary_Type_pskel
//

void RPG_Item_WeaponDictionary_Type_pskel::
weapon (const RPG_Item_WeaponPropertiesXML&)
{
}

void RPG_Item_WeaponDictionary_Type_pskel::
post_RPG_Item_WeaponDictionary_Type ()
{
}

bool RPG_Item_WeaponDictionary_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "weapon" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weapon_parser_;

    if (this->weapon_parser_)
      this->weapon_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_WeaponDictionary_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "weapon" && ns == "urn:rpg")
  {
    if (this->weapon_parser_)
      this->weapon (this->weapon_parser_->post_RPG_Item_WeaponPropertiesXML_Type ());

    return true;
  }

  return false;
}

// RPG_Item_ArmorPropertiesXML_Type_pskel
//

void RPG_Item_ArmorPropertiesXML_Type_pskel::
armorType (const RPG_Item_ArmorType&)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
armorCategory (const RPG_Item_ArmorCategory&)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseStorePrice (const RPG_Item_StorePrice&)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseArmorBonus (unsigned char)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
maxDexterityBonus (unsigned char)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
armorCheckPenalty (signed char)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
arcaneSpellFailure (unsigned char)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseSpeed (unsigned short)
{
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
baseWeight (unsigned short)
{
}

bool RPG_Item_ArmorPropertiesXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "armorType" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armorType_parser_;

    if (this->armorType_parser_)
      this->armorType_parser_->pre ();

    return true;
  }

  if (n == "armorCategory" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armorCategory_parser_;

    if (this->armorCategory_parser_)
      this->armorCategory_parser_->pre ();

    return true;
  }

  if (n == "baseStorePrice" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseStorePrice_parser_;

    if (this->baseStorePrice_parser_)
      this->baseStorePrice_parser_->pre ();

    return true;
  }

  if (n == "baseArmorBonus" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseArmorBonus_parser_;

    if (this->baseArmorBonus_parser_)
      this->baseArmorBonus_parser_->pre ();

    return true;
  }

  if (n == "maxDexterityBonus" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->maxDexterityBonus_parser_;

    if (this->maxDexterityBonus_parser_)
      this->maxDexterityBonus_parser_->pre ();

    return true;
  }

  if (n == "armorCheckPenalty" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armorCheckPenalty_parser_;

    if (this->armorCheckPenalty_parser_)
      this->armorCheckPenalty_parser_->pre ();

    return true;
  }

  if (n == "arcaneSpellFailure" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->arcaneSpellFailure_parser_;

    if (this->arcaneSpellFailure_parser_)
      this->arcaneSpellFailure_parser_->pre ();

    return true;
  }

  if (n == "baseSpeed" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseSpeed_parser_;

    if (this->baseSpeed_parser_)
      this->baseSpeed_parser_->pre ();

    return true;
  }

  if (n == "baseWeight" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseWeight_parser_;

    if (this->baseWeight_parser_)
      this->baseWeight_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_ArmorPropertiesXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "armorType" && ns == "urn:rpg")
  {
    if (this->armorType_parser_)
      this->armorType (this->armorType_parser_->post_RPG_Item_ArmorType_Type ());

    return true;
  }

  if (n == "armorCategory" && ns == "urn:rpg")
  {
    if (this->armorCategory_parser_)
      this->armorCategory (this->armorCategory_parser_->post_RPG_Item_ArmorCategory_Type ());

    return true;
  }

  if (n == "baseStorePrice" && ns == "urn:rpg")
  {
    if (this->baseStorePrice_parser_)
      this->baseStorePrice (this->baseStorePrice_parser_->post_RPG_Item_StorePrice_Type ());

    return true;
  }

  if (n == "baseArmorBonus" && ns == "urn:rpg")
  {
    if (this->baseArmorBonus_parser_)
      this->baseArmorBonus (this->baseArmorBonus_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "maxDexterityBonus" && ns == "urn:rpg")
  {
    if (this->maxDexterityBonus_parser_)
      this->maxDexterityBonus (this->maxDexterityBonus_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "armorCheckPenalty" && ns == "urn:rpg")
  {
    if (this->armorCheckPenalty_parser_)
      this->armorCheckPenalty (this->armorCheckPenalty_parser_->post_byte ());

    return true;
  }

  if (n == "arcaneSpellFailure" && ns == "urn:rpg")
  {
    if (this->arcaneSpellFailure_parser_)
      this->arcaneSpellFailure (this->arcaneSpellFailure_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "baseSpeed" && ns == "urn:rpg")
  {
    if (this->baseSpeed_parser_)
      this->baseSpeed (this->baseSpeed_parser_->post_unsigned_short ());

    return true;
  }

  if (n == "baseWeight" && ns == "urn:rpg")
  {
    if (this->baseWeight_parser_)
      this->baseWeight (this->baseWeight_parser_->post_unsigned_short ());

    return true;
  }

  return false;
}

// RPG_Item_MagicArmorPropertiesXML_Type_pskel
//

void RPG_Item_MagicArmorPropertiesXML_Type_pskel::
defenseModifier (signed char)
{
}

void RPG_Item_MagicArmorPropertiesXML_Type_pskel::
post_RPG_Item_MagicArmorPropertiesXML_Type ()
{
}

bool RPG_Item_MagicArmorPropertiesXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_ArmorPropertiesXML_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "defenseModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->defenseModifier_parser_;

    if (this->defenseModifier_parser_)
      this->defenseModifier_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_MagicArmorPropertiesXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_ArmorPropertiesXML_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "defenseModifier" && ns == "urn:rpg")
  {
    if (this->defenseModifier_parser_)
      this->defenseModifier (this->defenseModifier_parser_->post_byte ());

    return true;
  }

  return false;
}

// RPG_Item_ArmorDictionary_Type_pskel
//

void RPG_Item_ArmorDictionary_Type_pskel::
armor (const RPG_Item_ArmorPropertiesXML&)
{
}

void RPG_Item_ArmorDictionary_Type_pskel::
post_RPG_Item_ArmorDictionary_Type ()
{
}

bool RPG_Item_ArmorDictionary_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "armor" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armor_parser_;

    if (this->armor_parser_)
      this->armor_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_ArmorDictionary_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "armor" && ns == "urn:rpg")
  {
    if (this->armor_parser_)
      this->armor (this->armor_parser_->post_RPG_Item_ArmorPropertiesXML_Type ());

    return true;
  }

  return false;
}

// RPG_Item_Dictionary_Type_pskel
//

void RPG_Item_Dictionary_Type_pskel::
weaponDictionary ()
{
}

void RPG_Item_Dictionary_Type_pskel::
armorDictionary ()
{
}

void RPG_Item_Dictionary_Type_pskel::
post_RPG_Item_Dictionary_Type ()
{
}

bool RPG_Item_Dictionary_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "weaponDictionary" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponDictionary_parser_;

    if (this->weaponDictionary_parser_)
      this->weaponDictionary_parser_->pre ();

    return true;
  }

  if (n == "armorDictionary" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armorDictionary_parser_;

    if (this->armorDictionary_parser_)
      this->armorDictionary_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_Dictionary_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "weaponDictionary" && ns == "urn:rpg")
  {
    if (this->weaponDictionary_parser_)
    {
      this->weaponDictionary_parser_->post_RPG_Item_WeaponDictionary_Type ();
      this->weaponDictionary ();
    }

    return true;
  }

  if (n == "armorDictionary" && ns == "urn:rpg")
  {
    if (this->armorDictionary_parser_)
    {
      this->armorDictionary_parser_->post_RPG_Item_ArmorDictionary_Type ();
      this->armorDictionary ();
    }

    return true;
  }

  return false;
}

// Begin epilogue.
//
//
// End epilogue.

