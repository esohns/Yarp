// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "stdafx.h"
//
// End prologue.

#include "rpg_item_XML_types.h"

// RPG_Item_StorePrice_Type_pskel
//

void RPG_Item_StorePrice_Type_pskel::
numGoldPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numGoldPieces_parser_ = &p;
}

void RPG_Item_StorePrice_Type_pskel::
numSilverPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numSilverPieces_parser_ = &p;
}

void RPG_Item_StorePrice_Type_pskel::
parsers (::xml_schema::unsigned_int_pskel& numGoldPieces,
         ::xml_schema::unsigned_int_pskel& numSilverPieces)
{
  this->numGoldPieces_parser_ = &numGoldPieces;
  this->numSilverPieces_parser_ = &numSilverPieces;
}

RPG_Item_StorePrice_Type_pskel::
RPG_Item_StorePrice_Type_pskel ()
: numGoldPieces_parser_ (0),
  numSilverPieces_parser_ (0)
{
}

// RPG_Item_CriticalHitProperties_Type_pskel
//

void RPG_Item_CriticalHitProperties_Type_pskel::
minToHitRoll_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->minToHitRoll_parser_ = &p;
}

void RPG_Item_CriticalHitProperties_Type_pskel::
damageModifier_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->damageModifier_parser_ = &p;
}

void RPG_Item_CriticalHitProperties_Type_pskel::
parsers (::xml_schema::unsigned_byte_pskel& minToHitRoll,
         ::xml_schema::unsigned_byte_pskel& damageModifier)
{
  this->minToHitRoll_parser_ = &minToHitRoll;
  this->damageModifier_parser_ = &damageModifier;
}

RPG_Item_CriticalHitProperties_Type_pskel::
RPG_Item_CriticalHitProperties_Type_pskel ()
: minToHitRoll_parser_ (0),
  damageModifier_parser_ (0)
{
}

// RPG_Item_CreationCost_Type_pskel
//

void RPG_Item_CreationCost_Type_pskel::
numGoldPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numGoldPieces_parser_ = &p;
}

void RPG_Item_CreationCost_Type_pskel::
numExperiencePoints_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numExperiencePoints_parser_ = &p;
}

void RPG_Item_CreationCost_Type_pskel::
parsers (::xml_schema::unsigned_int_pskel& numGoldPieces,
         ::xml_schema::unsigned_int_pskel& numExperiencePoints)
{
  this->numGoldPieces_parser_ = &numGoldPieces;
  this->numExperiencePoints_parser_ = &numExperiencePoints;
}

RPG_Item_CreationCost_Type_pskel::
RPG_Item_CreationCost_Type_pskel ()
: numGoldPieces_parser_ (0),
  numExperiencePoints_parser_ (0)
{
}

// RPG_Item_BaseProperties_Type_pskel
//

void RPG_Item_BaseProperties_Type_pskel::
baseWeight_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->baseWeight_parser_ = &p;
}

void RPG_Item_BaseProperties_Type_pskel::
baseStorePrice_parser (::RPG_Item_StorePrice_Type_pskel& p)
{
  this->baseStorePrice_parser_ = &p;
}

void RPG_Item_BaseProperties_Type_pskel::
costToCreate_parser (::RPG_Item_CreationCost_Type_pskel& p)
{
  this->costToCreate_parser_ = &p;
}

void RPG_Item_BaseProperties_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
}

RPG_Item_BaseProperties_Type_pskel::
RPG_Item_BaseProperties_Type_pskel ()
: baseWeight_parser_ (0),
  baseStorePrice_parser_ (0),
  costToCreate_parser_ (0)
{
}

// RPG_Item_MagicalPrerequisites_Type_pskel
//

void RPG_Item_MagicalPrerequisites_Type_pskel::
minCasterLevel_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->minCasterLevel_parser_ = &p;
}

void RPG_Item_MagicalPrerequisites_Type_pskel::
parsers (::xml_schema::unsigned_byte_pskel& minCasterLevel)
{
  this->minCasterLevel_parser_ = &minCasterLevel;
}

RPG_Item_MagicalPrerequisites_Type_pskel::
RPG_Item_MagicalPrerequisites_Type_pskel ()
: minCasterLevel_parser_ (0)
{
}

// RPG_Item_PropertiesBase_Type_pskel
//

void RPG_Item_PropertiesBase_Type_pskel::
aura_parser (::RPG_Magic_School_Type_pskel& p)
{
  this->aura_parser_ = &p;
}

void RPG_Item_PropertiesBase_Type_pskel::
prerequisites_parser (::RPG_Item_MagicalPrerequisites_Type_pskel& p)
{
  this->prerequisites_parser_ = &p;
}

void RPG_Item_PropertiesBase_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate,
         ::RPG_Magic_School_Type_pskel& aura,
         ::RPG_Item_MagicalPrerequisites_Type_pskel& prerequisites)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
  this->aura_parser_ = &aura;
  this->prerequisites_parser_ = &prerequisites;
}

RPG_Item_PropertiesBase_Type_pskel::
RPG_Item_PropertiesBase_Type_pskel ()
: aura_parser_ (0),
  prerequisites_parser_ (0)
{
}

// RPG_Item_CommodityPropertiesBase_Type_pskel
//

void RPG_Item_CommodityPropertiesBase_Type_pskel::
type_parser (::RPG_Item_CommodityType_Type_pskel& p)
{
  this->type_parser_ = &p;
}

void RPG_Item_CommodityPropertiesBase_Type_pskel::
subType_parser (::RPG_Item_CommodityUnion_Type_pskel& p)
{
  this->subType_parser_ = &p;
}

void RPG_Item_CommodityPropertiesBase_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate,
         ::RPG_Magic_School_Type_pskel& aura,
         ::RPG_Item_MagicalPrerequisites_Type_pskel& prerequisites,
         ::RPG_Item_CommodityType_Type_pskel& type,
         ::RPG_Item_CommodityUnion_Type_pskel& subType)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
  this->aura_parser_ = &aura;
  this->prerequisites_parser_ = &prerequisites;
  this->type_parser_ = &type;
  this->subType_parser_ = &subType;
}

RPG_Item_CommodityPropertiesBase_Type_pskel::
RPG_Item_CommodityPropertiesBase_Type_pskel ()
: type_parser_ (0),
  subType_parser_ (0)
{
}

// RPG_Item_WeaponPropertiesBase_Type_pskel
//

void RPG_Item_WeaponPropertiesBase_Type_pskel::
type_parser (::RPG_Item_WeaponType_Type_pskel& p)
{
  this->type_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
category_parser (::RPG_Item_WeaponCategory_Type_pskel& p)
{
  this->category_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
weaponClass_parser (::RPG_Item_WeaponClass_Type_pskel& p)
{
  this->weaponClass_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
baseDamage_parser (::RPG_Dice_Roll_Type_pskel& p)
{
  this->baseDamage_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
criticalHit_parser (::RPG_Item_CriticalHitProperties_Type_pskel& p)
{
  this->criticalHit_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
rangeIncrement_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->rangeIncrement_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
typeOfDamage_parser (::RPG_Common_PhysicalDamageType_Type_pskel& p)
{
  this->typeOfDamage_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
isNonLethal_parser (::xml_schema::boolean_pskel& p)
{
  this->isNonLethal_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
isReachWeapon_parser (::xml_schema::boolean_pskel& p)
{
  this->isReachWeapon_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
isDoubleWeapon_parser (::xml_schema::boolean_pskel& p)
{
  this->isDoubleWeapon_parser_ = &p;
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate,
         ::RPG_Magic_School_Type_pskel& aura,
         ::RPG_Item_MagicalPrerequisites_Type_pskel& prerequisites,
         ::RPG_Item_WeaponType_Type_pskel& type,
         ::RPG_Item_WeaponCategory_Type_pskel& category,
         ::RPG_Item_WeaponClass_Type_pskel& weaponClass,
         ::RPG_Dice_Roll_Type_pskel& baseDamage,
         ::RPG_Item_CriticalHitProperties_Type_pskel& criticalHit,
         ::xml_schema::unsigned_byte_pskel& rangeIncrement,
         ::RPG_Common_PhysicalDamageType_Type_pskel& typeOfDamage,
         ::xml_schema::boolean_pskel& isNonLethal,
         ::xml_schema::boolean_pskel& isReachWeapon,
         ::xml_schema::boolean_pskel& isDoubleWeapon)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
  this->aura_parser_ = &aura;
  this->prerequisites_parser_ = &prerequisites;
  this->type_parser_ = &type;
  this->category_parser_ = &category;
  this->weaponClass_parser_ = &weaponClass;
  this->baseDamage_parser_ = &baseDamage;
  this->criticalHit_parser_ = &criticalHit;
  this->rangeIncrement_parser_ = &rangeIncrement;
  this->typeOfDamage_parser_ = &typeOfDamage;
  this->isNonLethal_parser_ = &isNonLethal;
  this->isReachWeapon_parser_ = &isReachWeapon;
  this->isDoubleWeapon_parser_ = &isDoubleWeapon;
}

RPG_Item_WeaponPropertiesBase_Type_pskel::
RPG_Item_WeaponPropertiesBase_Type_pskel ()
: type_parser_ (0),
  category_parser_ (0),
  weaponClass_parser_ (0),
  baseDamage_parser_ (0),
  criticalHit_parser_ (0),
  rangeIncrement_parser_ (0),
  typeOfDamage_parser_ (0),
  isNonLethal_parser_ (0),
  isReachWeapon_parser_ (0),
  isDoubleWeapon_parser_ (0)
{
}

// RPG_Item_WeaponPropertiesXML_Type_pskel
//

void RPG_Item_WeaponPropertiesXML_Type_pskel::
toHitModifier_parser (::xml_schema::byte_pskel& p)
{
  this->toHitModifier_parser_ = &p;
}

void RPG_Item_WeaponPropertiesXML_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate,
         ::RPG_Magic_School_Type_pskel& aura,
         ::RPG_Item_MagicalPrerequisites_Type_pskel& prerequisites,
         ::RPG_Item_WeaponType_Type_pskel& type,
         ::RPG_Item_WeaponCategory_Type_pskel& category,
         ::RPG_Item_WeaponClass_Type_pskel& weaponClass,
         ::RPG_Dice_Roll_Type_pskel& baseDamage,
         ::RPG_Item_CriticalHitProperties_Type_pskel& criticalHit,
         ::xml_schema::unsigned_byte_pskel& rangeIncrement,
         ::RPG_Common_PhysicalDamageType_Type_pskel& typeOfDamage,
         ::xml_schema::boolean_pskel& isNonLethal,
         ::xml_schema::boolean_pskel& isReachWeapon,
         ::xml_schema::boolean_pskel& isDoubleWeapon,
         ::xml_schema::byte_pskel& toHitModifier)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
  this->aura_parser_ = &aura;
  this->prerequisites_parser_ = &prerequisites;
  this->type_parser_ = &type;
  this->category_parser_ = &category;
  this->weaponClass_parser_ = &weaponClass;
  this->baseDamage_parser_ = &baseDamage;
  this->criticalHit_parser_ = &criticalHit;
  this->rangeIncrement_parser_ = &rangeIncrement;
  this->typeOfDamage_parser_ = &typeOfDamage;
  this->isNonLethal_parser_ = &isNonLethal;
  this->isReachWeapon_parser_ = &isReachWeapon;
  this->isDoubleWeapon_parser_ = &isDoubleWeapon;
  this->toHitModifier_parser_ = &toHitModifier;
}

RPG_Item_WeaponPropertiesXML_Type_pskel::
RPG_Item_WeaponPropertiesXML_Type_pskel ()
: toHitModifier_parser_ (0)
{
}

// RPG_Item_ArmorPropertiesBase_Type_pskel
//

void RPG_Item_ArmorPropertiesBase_Type_pskel::
type_parser (::RPG_Item_ArmorType_Type_pskel& p)
{
  this->type_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
category_parser (::RPG_Item_ArmorCategory_Type_pskel& p)
{
  this->category_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
baseBonus_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->baseBonus_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
maxDexterityBonus_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->maxDexterityBonus_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
checkPenalty_parser (::xml_schema::byte_pskel& p)
{
  this->checkPenalty_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
arcaneSpellFailure_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->arcaneSpellFailure_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
baseSpeed_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->baseSpeed_parser_ = &p;
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate,
         ::RPG_Magic_School_Type_pskel& aura,
         ::RPG_Item_MagicalPrerequisites_Type_pskel& prerequisites,
         ::RPG_Item_ArmorType_Type_pskel& type,
         ::RPG_Item_ArmorCategory_Type_pskel& category,
         ::xml_schema::unsigned_byte_pskel& baseBonus,
         ::xml_schema::unsigned_byte_pskel& maxDexterityBonus,
         ::xml_schema::byte_pskel& checkPenalty,
         ::xml_schema::unsigned_byte_pskel& arcaneSpellFailure,
         ::xml_schema::unsigned_byte_pskel& baseSpeed)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
  this->aura_parser_ = &aura;
  this->prerequisites_parser_ = &prerequisites;
  this->type_parser_ = &type;
  this->category_parser_ = &category;
  this->baseBonus_parser_ = &baseBonus;
  this->maxDexterityBonus_parser_ = &maxDexterityBonus;
  this->checkPenalty_parser_ = &checkPenalty;
  this->arcaneSpellFailure_parser_ = &arcaneSpellFailure;
  this->baseSpeed_parser_ = &baseSpeed;
}

RPG_Item_ArmorPropertiesBase_Type_pskel::
RPG_Item_ArmorPropertiesBase_Type_pskel ()
: type_parser_ (0),
  category_parser_ (0),
  baseBonus_parser_ (0),
  maxDexterityBonus_parser_ (0),
  checkPenalty_parser_ (0),
  arcaneSpellFailure_parser_ (0),
  baseSpeed_parser_ (0)
{
}

// RPG_Item_ArmorPropertiesXML_Type_pskel
//

void RPG_Item_ArmorPropertiesXML_Type_pskel::
defenseModifier_parser (::xml_schema::byte_pskel& p)
{
  this->defenseModifier_parser_ = &p;
}

void RPG_Item_ArmorPropertiesXML_Type_pskel::
parsers (::xml_schema::unsigned_short_pskel& baseWeight,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Item_CreationCost_Type_pskel& costToCreate,
         ::RPG_Magic_School_Type_pskel& aura,
         ::RPG_Item_MagicalPrerequisites_Type_pskel& prerequisites,
         ::RPG_Item_ArmorType_Type_pskel& type,
         ::RPG_Item_ArmorCategory_Type_pskel& category,
         ::xml_schema::unsigned_byte_pskel& baseBonus,
         ::xml_schema::unsigned_byte_pskel& maxDexterityBonus,
         ::xml_schema::byte_pskel& checkPenalty,
         ::xml_schema::unsigned_byte_pskel& arcaneSpellFailure,
         ::xml_schema::unsigned_byte_pskel& baseSpeed,
         ::xml_schema::byte_pskel& defenseModifier)
{
  this->baseWeight_parser_ = &baseWeight;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->costToCreate_parser_ = &costToCreate;
  this->aura_parser_ = &aura;
  this->prerequisites_parser_ = &prerequisites;
  this->type_parser_ = &type;
  this->category_parser_ = &category;
  this->baseBonus_parser_ = &baseBonus;
  this->maxDexterityBonus_parser_ = &maxDexterityBonus;
  this->checkPenalty_parser_ = &checkPenalty;
  this->arcaneSpellFailure_parser_ = &arcaneSpellFailure;
  this->baseSpeed_parser_ = &baseSpeed;
  this->defenseModifier_parser_ = &defenseModifier;
}

RPG_Item_ArmorPropertiesXML_Type_pskel::
RPG_Item_ArmorPropertiesXML_Type_pskel ()
: defenseModifier_parser_ (0)
{
}

// RPG_Item_XML_Type_pskel
//

void RPG_Item_XML_Type_pskel::
type_parser (::RPG_Item_Type_Type_pskel& p)
{
  this->type_parser_ = &p;
}

void RPG_Item_XML_Type_pskel::
armor_parser (::RPG_Item_ArmorPropertiesXML_Type_pskel& p)
{
  this->armor_parser_ = &p;
}

void RPG_Item_XML_Type_pskel::
commodity_parser (::RPG_Item_CommodityPropertiesBase_Type_pskel& p)
{
  this->commodity_parser_ = &p;
}

void RPG_Item_XML_Type_pskel::
weapon_parser (::RPG_Item_WeaponPropertiesXML_Type_pskel& p)
{
  this->weapon_parser_ = &p;
}

void RPG_Item_XML_Type_pskel::
parsers (::RPG_Item_Type_Type_pskel& type,
         ::RPG_Item_ArmorPropertiesXML_Type_pskel& armor,
         ::RPG_Item_CommodityPropertiesBase_Type_pskel& commodity,
         ::RPG_Item_WeaponPropertiesXML_Type_pskel& weapon)
{
  this->type_parser_ = &type;
  this->armor_parser_ = &armor;
  this->commodity_parser_ = &commodity;
  this->weapon_parser_ = &weapon;
}

RPG_Item_XML_Type_pskel::
RPG_Item_XML_Type_pskel ()
: type_parser_ (0),
  armor_parser_ (0),
  commodity_parser_ (0),
  weapon_parser_ (0)
{
}

// RPG_Item_InventoryXML_Type_pskel
//

void RPG_Item_InventoryXML_Type_pskel::
item_parser (::RPG_Item_XML_Type_pskel& p)
{
  this->item_parser_ = &p;
}

void RPG_Item_InventoryXML_Type_pskel::
parsers (::RPG_Item_XML_Type_pskel& item)
{
  this->item_parser_ = &item;
}

RPG_Item_InventoryXML_Type_pskel::
RPG_Item_InventoryXML_Type_pskel ()
: item_parser_ (0)
{
}

// RPG_Item_DictionaryXML_Type_pskel
//

void RPG_Item_DictionaryXML_Type_pskel::
armor_parser (::RPG_Item_ArmorPropertiesXML_Type_pskel& p)
{
  this->armor_parser_ = &p;
}

void RPG_Item_DictionaryXML_Type_pskel::
commodity_parser (::RPG_Item_CommodityPropertiesBase_Type_pskel& p)
{
  this->commodity_parser_ = &p;
}

void RPG_Item_DictionaryXML_Type_pskel::
weapon_parser (::RPG_Item_WeaponPropertiesXML_Type_pskel& p)
{
  this->weapon_parser_ = &p;
}

void RPG_Item_DictionaryXML_Type_pskel::
parsers (::RPG_Item_ArmorPropertiesXML_Type_pskel& armor,
         ::RPG_Item_CommodityPropertiesBase_Type_pskel& commodity,
         ::RPG_Item_WeaponPropertiesXML_Type_pskel& weapon)
{
  this->armor_parser_ = &armor;
  this->commodity_parser_ = &commodity;
  this->weapon_parser_ = &weapon;
}

RPG_Item_DictionaryXML_Type_pskel::
RPG_Item_DictionaryXML_Type_pskel ()
: armor_parser_ (0),
  commodity_parser_ (0),
  weapon_parser_ (0)
{
}

// RPG_Item_StorePrice_Type_pskel
//

void RPG_Item_StorePrice_Type_pskel::
numGoldPieces (unsigned int)
{
}

void RPG_Item_StorePrice_Type_pskel::
numSilverPieces (unsigned int)
{
}

bool RPG_Item_StorePrice_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "numGoldPieces" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->numGoldPieces_parser_;

    if (this->numGoldPieces_parser_)
      this->numGoldPieces_parser_->pre ();

    return true;
  }

  if (n == "numSilverPieces" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->numSilverPieces_parser_;

    if (this->numSilverPieces_parser_)
      this->numSilverPieces_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_StorePrice_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "numGoldPieces" && ns == "urn:rpg")
  {
    if (this->numGoldPieces_parser_)
      this->numGoldPieces (this->numGoldPieces_parser_->post_unsigned_int ());

    return true;
  }

  if (n == "numSilverPieces" && ns == "urn:rpg")
  {
    if (this->numSilverPieces_parser_)
      this->numSilverPieces (this->numSilverPieces_parser_->post_unsigned_int ());

    return true;
  }

  return false;
}

// RPG_Item_CriticalHitProperties_Type_pskel
//

void RPG_Item_CriticalHitProperties_Type_pskel::
minToHitRoll (unsigned char)
{
}

void RPG_Item_CriticalHitProperties_Type_pskel::
damageModifier (unsigned char)
{
}

bool RPG_Item_CriticalHitProperties_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "minToHitRoll" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->minToHitRoll_parser_;

    if (this->minToHitRoll_parser_)
      this->minToHitRoll_parser_->pre ();

    return true;
  }

  if (n == "damageModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->damageModifier_parser_;

    if (this->damageModifier_parser_)
      this->damageModifier_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_CriticalHitProperties_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "minToHitRoll" && ns == "urn:rpg")
  {
    if (this->minToHitRoll_parser_)
      this->minToHitRoll (this->minToHitRoll_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "damageModifier" && ns == "urn:rpg")
  {
    if (this->damageModifier_parser_)
      this->damageModifier (this->damageModifier_parser_->post_unsigned_byte ());

    return true;
  }

  return false;
}

// RPG_Item_CreationCost_Type_pskel
//

void RPG_Item_CreationCost_Type_pskel::
numGoldPieces (unsigned int)
{
}

void RPG_Item_CreationCost_Type_pskel::
numExperiencePoints (unsigned int)
{
}

bool RPG_Item_CreationCost_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "numGoldPieces" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->numGoldPieces_parser_;

    if (this->numGoldPieces_parser_)
      this->numGoldPieces_parser_->pre ();

    return true;
  }

  if (n == "numExperiencePoints" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->numExperiencePoints_parser_;

    if (this->numExperiencePoints_parser_)
      this->numExperiencePoints_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_CreationCost_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "numGoldPieces" && ns == "urn:rpg")
  {
    if (this->numGoldPieces_parser_)
      this->numGoldPieces (this->numGoldPieces_parser_->post_unsigned_int ());

    return true;
  }

  if (n == "numExperiencePoints" && ns == "urn:rpg")
  {
    if (this->numExperiencePoints_parser_)
      this->numExperiencePoints (this->numExperiencePoints_parser_->post_unsigned_int ());

    return true;
  }

  return false;
}

// RPG_Item_BaseProperties_Type_pskel
//

void RPG_Item_BaseProperties_Type_pskel::
baseWeight (unsigned short)
{
}

void RPG_Item_BaseProperties_Type_pskel::
baseStorePrice (const RPG_Item_StorePrice&)
{
}

void RPG_Item_BaseProperties_Type_pskel::
costToCreate (const RPG_Item_CreationCost&)
{
}

bool RPG_Item_BaseProperties_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "baseWeight" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseWeight_parser_;

    if (this->baseWeight_parser_)
      this->baseWeight_parser_->pre ();

    return true;
  }

  if (n == "baseStorePrice" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseStorePrice_parser_;

    if (this->baseStorePrice_parser_)
      this->baseStorePrice_parser_->pre ();

    return true;
  }

  if (n == "costToCreate" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->costToCreate_parser_;

    if (this->costToCreate_parser_)
      this->costToCreate_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_BaseProperties_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "baseWeight" && ns == "urn:rpg")
  {
    if (this->baseWeight_parser_)
      this->baseWeight (this->baseWeight_parser_->post_unsigned_short ());

    return true;
  }

  if (n == "baseStorePrice" && ns == "urn:rpg")
  {
    if (this->baseStorePrice_parser_)
      this->baseStorePrice (this->baseStorePrice_parser_->post_RPG_Item_StorePrice_Type ());

    return true;
  }

  if (n == "costToCreate" && ns == "urn:rpg")
  {
    if (this->costToCreate_parser_)
      this->costToCreate (this->costToCreate_parser_->post_RPG_Item_CreationCost_Type ());

    return true;
  }

  return false;
}

// RPG_Item_MagicalPrerequisites_Type_pskel
//

void RPG_Item_MagicalPrerequisites_Type_pskel::
minCasterLevel (unsigned char)
{
}

bool RPG_Item_MagicalPrerequisites_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "minCasterLevel" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->minCasterLevel_parser_;

    if (this->minCasterLevel_parser_)
      this->minCasterLevel_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_MagicalPrerequisites_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "minCasterLevel" && ns == "urn:rpg")
  {
    if (this->minCasterLevel_parser_)
      this->minCasterLevel (this->minCasterLevel_parser_->post_unsigned_byte ());

    return true;
  }

  return false;
}

// RPG_Item_PropertiesBase_Type_pskel
//

void RPG_Item_PropertiesBase_Type_pskel::
aura (const RPG_Magic_School&)
{
}

void RPG_Item_PropertiesBase_Type_pskel::
prerequisites (const RPG_Item_MagicalPrerequisites&)
{
}

bool RPG_Item_PropertiesBase_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_BaseProperties_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "aura" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->aura_parser_;

    if (this->aura_parser_)
      this->aura_parser_->pre ();

    return true;
  }

  if (n == "prerequisites" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->prerequisites_parser_;

    if (this->prerequisites_parser_)
      this->prerequisites_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_PropertiesBase_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_BaseProperties_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "aura" && ns == "urn:rpg")
  {
    if (this->aura_parser_)
      this->aura (this->aura_parser_->post_RPG_Magic_School_Type ());

    return true;
  }

  if (n == "prerequisites" && ns == "urn:rpg")
  {
    if (this->prerequisites_parser_)
      this->prerequisites (this->prerequisites_parser_->post_RPG_Item_MagicalPrerequisites_Type ());

    return true;
  }

  return false;
}

// RPG_Item_CommodityPropertiesBase_Type_pskel
//

void RPG_Item_CommodityPropertiesBase_Type_pskel::
type (const RPG_Item_CommodityType&)
{
}

void RPG_Item_CommodityPropertiesBase_Type_pskel::
subType (const RPG_Item_CommodityUnion&)
{
}

bool RPG_Item_CommodityPropertiesBase_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_PropertiesBase_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->type_parser_;

    if (this->type_parser_)
      this->type_parser_->pre ();

    return true;
  }

  if (n == "subType" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->subType_parser_;

    if (this->subType_parser_)
      this->subType_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_CommodityPropertiesBase_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_PropertiesBase_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    if (this->type_parser_)
      this->type (this->type_parser_->post_RPG_Item_CommodityType_Type ());

    return true;
  }

  if (n == "subType" && ns == "urn:rpg")
  {
    if (this->subType_parser_)
      this->subType (this->subType_parser_->post_RPG_Item_CommodityUnion_Type ());

    return true;
  }

  return false;
}

// RPG_Item_WeaponPropertiesBase_Type_pskel
//

void RPG_Item_WeaponPropertiesBase_Type_pskel::
type (const RPG_Item_WeaponType&)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
category (const RPG_Item_WeaponCategory&)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
weaponClass (const RPG_Item_WeaponClass&)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
baseDamage (const RPG_Item_Damage&)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
criticalHit (const RPG_Item_CriticalHitProperties&)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
rangeIncrement (unsigned char)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
typeOfDamage (const RPG_Common_PhysicalDamageType&)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
isNonLethal (bool)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
isReachWeapon (bool)
{
}

void RPG_Item_WeaponPropertiesBase_Type_pskel::
isDoubleWeapon (bool)
{
}

bool RPG_Item_WeaponPropertiesBase_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_PropertiesBase_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->type_parser_;

    if (this->type_parser_)
      this->type_parser_->pre ();

    return true;
  }

  if (n == "category" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->category_parser_;

    if (this->category_parser_)
      this->category_parser_->pre ();

    return true;
  }

  if (n == "weaponClass" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponClass_parser_;

    if (this->weaponClass_parser_)
      this->weaponClass_parser_->pre ();

    return true;
  }

  if (n == "baseDamage" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseDamage_parser_;

    if (this->baseDamage_parser_)
      this->baseDamage_parser_->pre ();

    return true;
  }

  if (n == "criticalHit" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->criticalHit_parser_;

    if (this->criticalHit_parser_)
      this->criticalHit_parser_->pre ();

    return true;
  }

  if (n == "rangeIncrement" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->rangeIncrement_parser_;

    if (this->rangeIncrement_parser_)
      this->rangeIncrement_parser_->pre ();

    return true;
  }

  if (n == "typeOfDamage" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->typeOfDamage_parser_;

    if (this->typeOfDamage_parser_)
      this->typeOfDamage_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_WeaponPropertiesBase_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_PropertiesBase_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    if (this->type_parser_)
      this->type (this->type_parser_->post_RPG_Item_WeaponType_Type ());

    return true;
  }

  if (n == "category" && ns == "urn:rpg")
  {
    if (this->category_parser_)
      this->category (this->category_parser_->post_RPG_Item_WeaponCategory_Type ());

    return true;
  }

  if (n == "weaponClass" && ns == "urn:rpg")
  {
    if (this->weaponClass_parser_)
      this->weaponClass (this->weaponClass_parser_->post_RPG_Item_WeaponClass_Type ());

    return true;
  }

  if (n == "baseDamage" && ns == "urn:rpg")
  {
    if (this->baseDamage_parser_)
      this->baseDamage (this->baseDamage_parser_->post_RPG_Dice_Roll_Type ());

    return true;
  }

  if (n == "criticalHit" && ns == "urn:rpg")
  {
    if (this->criticalHit_parser_)
      this->criticalHit (this->criticalHit_parser_->post_RPG_Item_CriticalHitProperties_Type ());

    return true;
  }

  if (n == "rangeIncrement" && ns == "urn:rpg")
  {
    if (this->rangeIncrement_parser_)
      this->rangeIncrement (this->rangeIncrement_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "typeOfDamage" && ns == "urn:rpg")
  {
    if (this->typeOfDamage_parser_)
      this->typeOfDamage (this->typeOfDamage_parser_->post_RPG_Common_PhysicalDamageType_Type ());

    return true;
  }

  return false;
}

bool RPG_Item_WeaponPropertiesBase_Type_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::RPG_Item_PropertiesBase_Type_pskel::_attribute_impl (ns, n, v))
    return true;

  if (n == "isNonLethal" && ns.empty ())
  {
    if (this->isNonLethal_parser_)
    {
      this->isNonLethal_parser_->pre ();
      this->isNonLethal_parser_->_pre_impl ();
      this->isNonLethal_parser_->_characters (v);
      this->isNonLethal_parser_->_post_impl ();
      this->isNonLethal (this->isNonLethal_parser_->post_boolean ());
    }

    return true;
  }

  if (n == "isReachWeapon" && ns.empty ())
  {
    if (this->isReachWeapon_parser_)
    {
      this->isReachWeapon_parser_->pre ();
      this->isReachWeapon_parser_->_pre_impl ();
      this->isReachWeapon_parser_->_characters (v);
      this->isReachWeapon_parser_->_post_impl ();
      this->isReachWeapon (this->isReachWeapon_parser_->post_boolean ());
    }

    return true;
  }

  if (n == "isDoubleWeapon" && ns.empty ())
  {
    if (this->isDoubleWeapon_parser_)
    {
      this->isDoubleWeapon_parser_->pre ();
      this->isDoubleWeapon_parser_->_pre_impl ();
      this->isDoubleWeapon_parser_->_characters (v);
      this->isDoubleWeapon_parser_->_post_impl ();
      this->isDoubleWeapon (this->isDoubleWeapon_parser_->post_boolean ());
    }

    return true;
  }

  return false;
}

// RPG_Item_WeaponPropertiesXML_Type_pskel
//

void RPG_Item_WeaponPropertiesXML_Type_pskel::
toHitModifier (signed char)
{
}

bool RPG_Item_WeaponPropertiesXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_WeaponPropertiesBase_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "toHitModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->toHitModifier_parser_;

    if (this->toHitModifier_parser_)
      this->toHitModifier_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_WeaponPropertiesXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_WeaponPropertiesBase_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "toHitModifier" && ns == "urn:rpg")
  {
    if (this->toHitModifier_parser_)
      this->toHitModifier (this->toHitModifier_parser_->post_byte ());

    return true;
  }

  return false;
}

// RPG_Item_ArmorPropertiesBase_Type_pskel
//

void RPG_Item_ArmorPropertiesBase_Type_pskel::
type (const RPG_Item_ArmorType&)
{
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
category (const RPG_Item_ArmorCategory&)
{
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
baseBonus (unsigned char)
{
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
maxDexterityBonus (unsigned char)
{
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
checkPenalty (signed char)
{
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
arcaneSpellFailure (unsigned char)
{
}

void RPG_Item_ArmorPropertiesBase_Type_pskel::
baseSpeed (unsigned char)
{
}

bool RPG_Item_ArmorPropertiesBase_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_PropertiesBase_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->type_parser_;

    if (this->type_parser_)
      this->type_parser_->pre ();

    return true;
  }

  if (n == "category" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->category_parser_;

    if (this->category_parser_)
      this->category_parser_->pre ();

    return true;
  }

  if (n == "baseBonus" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseBonus_parser_;

    if (this->baseBonus_parser_)
      this->baseBonus_parser_->pre ();

    return true;
  }

  if (n == "maxDexterityBonus" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->maxDexterityBonus_parser_;

    if (this->maxDexterityBonus_parser_)
      this->maxDexterityBonus_parser_->pre ();

    return true;
  }

  if (n == "checkPenalty" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->checkPenalty_parser_;

    if (this->checkPenalty_parser_)
      this->checkPenalty_parser_->pre ();

    return true;
  }

  if (n == "arcaneSpellFailure" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->arcaneSpellFailure_parser_;

    if (this->arcaneSpellFailure_parser_)
      this->arcaneSpellFailure_parser_->pre ();

    return true;
  }

  if (n == "baseSpeed" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseSpeed_parser_;

    if (this->baseSpeed_parser_)
      this->baseSpeed_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_ArmorPropertiesBase_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_PropertiesBase_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    if (this->type_parser_)
      this->type (this->type_parser_->post_RPG_Item_ArmorType_Type ());

    return true;
  }

  if (n == "category" && ns == "urn:rpg")
  {
    if (this->category_parser_)
      this->category (this->category_parser_->post_RPG_Item_ArmorCategory_Type ());

    return true;
  }

  if (n == "baseBonus" && ns == "urn:rpg")
  {
    if (this->baseBonus_parser_)
      this->baseBonus (this->baseBonus_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "maxDexterityBonus" && ns == "urn:rpg")
  {
    if (this->maxDexterityBonus_parser_)
      this->maxDexterityBonus (this->maxDexterityBonus_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "checkPenalty" && ns == "urn:rpg")
  {
    if (this->checkPenalty_parser_)
      this->checkPenalty (this->checkPenalty_parser_->post_byte ());

    return true;
  }

  if (n == "arcaneSpellFailure" && ns == "urn:rpg")
  {
    if (this->arcaneSpellFailure_parser_)
      this->arcaneSpellFailure (this->arcaneSpellFailure_parser_->post_unsigned_byte ());

    return true;
  }

  if (n == "baseSpeed" && ns == "urn:rpg")
  {
    if (this->baseSpeed_parser_)
      this->baseSpeed (this->baseSpeed_parser_->post_unsigned_byte ());

    return true;
  }

  return false;
}

// RPG_Item_ArmorPropertiesXML_Type_pskel
//

void RPG_Item_ArmorPropertiesXML_Type_pskel::
defenseModifier (signed char)
{
}

bool RPG_Item_ArmorPropertiesXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::RPG_Item_ArmorPropertiesBase_Type_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "defenseModifier" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->defenseModifier_parser_;

    if (this->defenseModifier_parser_)
      this->defenseModifier_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_ArmorPropertiesXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::RPG_Item_ArmorPropertiesBase_Type_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "defenseModifier" && ns == "urn:rpg")
  {
    if (this->defenseModifier_parser_)
      this->defenseModifier (this->defenseModifier_parser_->post_byte ());

    return true;
  }

  return false;
}

// RPG_Item_XML_Type_pskel
//

void RPG_Item_XML_Type_pskel::
type (const RPG_Item_Type&)
{
}

void RPG_Item_XML_Type_pskel::
armor (const RPG_Item_ArmorPropertiesXML&)
{
}

void RPG_Item_XML_Type_pskel::
commodity (const RPG_Item_CommodityPropertiesBase&)
{
}

void RPG_Item_XML_Type_pskel::
weapon (const RPG_Item_WeaponPropertiesXML&)
{
}

void RPG_Item_XML_Type_pskel::
post_RPG_Item_XML_Type ()
{
}

bool RPG_Item_XML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->type_parser_;

    if (this->type_parser_)
      this->type_parser_->pre ();

    return true;
  }

  if (n == "armor" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armor_parser_;

    if (this->armor_parser_)
      this->armor_parser_->pre ();

    return true;
  }

  if (n == "commodity" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->commodity_parser_;

    if (this->commodity_parser_)
      this->commodity_parser_->pre ();

    return true;
  }

  if (n == "weapon" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weapon_parser_;

    if (this->weapon_parser_)
      this->weapon_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_XML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "type" && ns == "urn:rpg")
  {
    if (this->type_parser_)
      this->type (this->type_parser_->post_RPG_Item_Type_Type ());

    return true;
  }

  if (n == "armor" && ns == "urn:rpg")
  {
    if (this->armor_parser_)
      this->armor (this->armor_parser_->post_RPG_Item_ArmorPropertiesXML_Type ());

    return true;
  }

  if (n == "commodity" && ns == "urn:rpg")
  {
    if (this->commodity_parser_)
      this->commodity (this->commodity_parser_->post_RPG_Item_CommodityPropertiesBase_Type ());

    return true;
  }

  if (n == "weapon" && ns == "urn:rpg")
  {
    if (this->weapon_parser_)
      this->weapon (this->weapon_parser_->post_RPG_Item_WeaponPropertiesXML_Type ());

    return true;
  }

  return false;
}

// RPG_Item_InventoryXML_Type_pskel
//

void RPG_Item_InventoryXML_Type_pskel::
item ()
{
}

void RPG_Item_InventoryXML_Type_pskel::
post_RPG_Item_InventoryXML_Type ()
{
}

bool RPG_Item_InventoryXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "item" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->item_parser_;

    if (this->item_parser_)
      this->item_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_InventoryXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "item" && ns == "urn:rpg")
  {
    if (this->item_parser_)
    {
      this->item_parser_->post_RPG_Item_XML_Type ();
      this->item ();
    }

    return true;
  }

  return false;
}

// RPG_Item_DictionaryXML_Type_pskel
//

void RPG_Item_DictionaryXML_Type_pskel::
armor (const RPG_Item_ArmorPropertiesXML&)
{
}

void RPG_Item_DictionaryXML_Type_pskel::
commodity (const RPG_Item_CommodityPropertiesBase&)
{
}

void RPG_Item_DictionaryXML_Type_pskel::
weapon (const RPG_Item_WeaponPropertiesXML&)
{
}

void RPG_Item_DictionaryXML_Type_pskel::
post_RPG_Item_DictionaryXML_Type ()
{
}

bool RPG_Item_DictionaryXML_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "armor" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->armor_parser_;

    if (this->armor_parser_)
      this->armor_parser_->pre ();

    return true;
  }

  if (n == "commodity" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->commodity_parser_;

    if (this->commodity_parser_)
      this->commodity_parser_->pre ();

    return true;
  }

  if (n == "weapon" && ns == "urn:rpg")
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->weapon_parser_;

    if (this->weapon_parser_)
      this->weapon_parser_->pre ();

    return true;
  }

  return false;
}

bool RPG_Item_DictionaryXML_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "armor" && ns == "urn:rpg")
  {
    if (this->armor_parser_)
      this->armor (this->armor_parser_->post_RPG_Item_ArmorPropertiesXML_Type ());

    return true;
  }

  if (n == "commodity" && ns == "urn:rpg")
  {
    if (this->commodity_parser_)
      this->commodity (this->commodity_parser_->post_RPG_Item_CommodityPropertiesBase_Type ());

    return true;
  }

  if (n == "weapon" && ns == "urn:rpg")
  {
    if (this->weapon_parser_)
      this->weapon (this->weapon_parser_->post_RPG_Item_WeaponPropertiesXML_Type ());

    return true;
  }

  return false;
}

// Begin epilogue.
//
//
// End epilogue.

