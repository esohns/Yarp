// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "rpg_item_dictionary_types.h"

// RPG_Item_Dictionary_Type_pskel
//

void RPG_Item_Dictionary_Type_pskel::
RPG_Item_WeaponDictionary_parser (::RPG_Item_WeaponDictionary_Type_pskel& p)
{
  this->RPG_Item_WeaponDictionary_parser_ = &p;
}

void RPG_Item_Dictionary_Type_pskel::
RPG_Item_ArmorDictionary_parser (::RPG_Item_ArmorDictionary_Type_pskel& p)
{
  this->RPG_Item_ArmorDictionary_parser_ = &p;
}

void RPG_Item_Dictionary_Type_pskel::
parsers (::RPG_Item_WeaponDictionary_Type_pskel& RPG_Item_WeaponDictionary,
         ::RPG_Item_ArmorDictionary_Type_pskel& RPG_Item_ArmorDictionary)
{
  this->RPG_Item_WeaponDictionary_parser_ = &RPG_Item_WeaponDictionary;
  this->RPG_Item_ArmorDictionary_parser_ = &RPG_Item_ArmorDictionary;
}

RPG_Item_Dictionary_Type_pskel::
RPG_Item_Dictionary_Type_pskel ()
: RPG_Item_WeaponDictionary_parser_ (0),
  RPG_Item_ArmorDictionary_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_WeaponDictionary_Type_pskel
//

void RPG_Item_WeaponDictionary_Type_pskel::
weapon_parser (::RPG_Item_WeaponProperties_Type_pskel& p)
{
  this->weapon_parser_ = &p;
}

void RPG_Item_WeaponDictionary_Type_pskel::
parsers (::RPG_Item_WeaponProperties_Type_pskel& weapon)
{
  this->weapon_parser_ = &weapon;
}

RPG_Item_WeaponDictionary_Type_pskel::
RPG_Item_WeaponDictionary_Type_pskel ()
: weapon_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_ArmorDictionary_Type_pskel
//

void RPG_Item_ArmorDictionary_Type_pskel::
armor_parser (::RPG_Item_ArmorProperties_Type_pskel& p)
{
  this->armor_parser_ = &p;
}

void RPG_Item_ArmorDictionary_Type_pskel::
parsers (::RPG_Item_ArmorProperties_Type_pskel& armor)
{
  this->armor_parser_ = &armor;
}

RPG_Item_ArmorDictionary_Type_pskel::
RPG_Item_ArmorDictionary_Type_pskel ()
: armor_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_StorePrice_Type_pskel
//

void RPG_Item_StorePrice_Type_pskel::
numGoldPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numGoldPieces_parser_ = &p;
}

void RPG_Item_StorePrice_Type_pskel::
numSilverPieces_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numSilverPieces_parser_ = &p;
}

void RPG_Item_StorePrice_Type_pskel::
parsers (::xml_schema::unsigned_int_pskel& numGoldPieces,
         ::xml_schema::unsigned_int_pskel& numSilverPieces)
{
  this->numGoldPieces_parser_ = &numGoldPieces;
  this->numSilverPieces_parser_ = &numSilverPieces;
}

RPG_Item_StorePrice_Type_pskel::
RPG_Item_StorePrice_Type_pskel ()
: numGoldPieces_parser_ (0),
  numSilverPieces_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Chance_Roll_Type_pskel
//

void RPG_Chance_Roll_Type_pskel::
numDice_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->numDice_parser_ = &p;
}

void RPG_Chance_Roll_Type_pskel::
typeDice_parser (::RPG_Chance_DiceType_Type_pskel& p)
{
  this->typeDice_parser_ = &p;
}

void RPG_Chance_Roll_Type_pskel::
modifier_parser (::xml_schema::integer_pskel& p)
{
  this->modifier_parser_ = &p;
}

void RPG_Chance_Roll_Type_pskel::
parsers (::xml_schema::unsigned_int_pskel& numDice,
         ::RPG_Chance_DiceType_Type_pskel& typeDice,
         ::xml_schema::integer_pskel& modifier)
{
  this->numDice_parser_ = &numDice;
  this->typeDice_parser_ = &typeDice;
  this->modifier_parser_ = &modifier;
}

RPG_Chance_Roll_Type_pskel::
RPG_Chance_Roll_Type_pskel ()
: numDice_parser_ (0),
  typeDice_parser_ (0),
  modifier_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_CriticalHitModifier_Type_pskel
//

void RPG_Item_CriticalHitModifier_Type_pskel::
minToHitRoll_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->minToHitRoll_parser_ = &p;
}

void RPG_Item_CriticalHitModifier_Type_pskel::
damageModifier_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->damageModifier_parser_ = &p;
}

void RPG_Item_CriticalHitModifier_Type_pskel::
parsers (::xml_schema::unsigned_int_pskel& minToHitRoll,
         ::xml_schema::unsigned_int_pskel& damageModifier)
{
  this->minToHitRoll_parser_ = &minToHitRoll;
  this->damageModifier_parser_ = &damageModifier;
}

RPG_Item_CriticalHitModifier_Type_pskel::
RPG_Item_CriticalHitModifier_Type_pskel ()
: minToHitRoll_parser_ (0),
  damageModifier_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_WeaponProperties_Type_pskel
//

void RPG_Item_WeaponProperties_Type_pskel::
weaponType_parser (::RPG_Item_WeaponType_Type_pskel& p)
{
  this->weaponType_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
weaponCategory_parser (::RPG_Item_WeaponCategory_Type_pskel& p)
{
  this->weaponCategory_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
weaponClass_parser (::RPG_Item_WeaponClass_Type_pskel& p)
{
  this->weaponClass_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
baseStorePrice_parser (::RPG_Item_StorePrice_Type_pskel& p)
{
  this->baseStorePrice_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
baseDamage_parser (::RPG_Chance_Roll_Type_pskel& p)
{
  this->baseDamage_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
criticalHitModifier_parser (::RPG_Item_CriticalHitModifier_Type_pskel& p)
{
  this->criticalHitModifier_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
rangeIncrement_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->rangeIncrement_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
baseWeight_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->baseWeight_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
typeOfDamage_parser (::RPG_Item_WeaponDamageType_Type_pskel& p)
{
  this->typeOfDamage_parser_ = &p;
}

void RPG_Item_WeaponProperties_Type_pskel::
parsers (::RPG_Item_WeaponType_Type_pskel& weaponType,
         ::RPG_Item_WeaponCategory_Type_pskel& weaponCategory,
         ::RPG_Item_WeaponClass_Type_pskel& weaponClass,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::RPG_Chance_Roll_Type_pskel& baseDamage,
         ::RPG_Item_CriticalHitModifier_Type_pskel& criticalHitModifier,
         ::xml_schema::unsigned_int_pskel& rangeIncrement,
         ::xml_schema::unsigned_int_pskel& baseWeight,
         ::RPG_Item_WeaponDamageType_Type_pskel& typeOfDamage)
{
  this->weaponType_parser_ = &weaponType;
  this->weaponCategory_parser_ = &weaponCategory;
  this->weaponClass_parser_ = &weaponClass;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->baseDamage_parser_ = &baseDamage;
  this->criticalHitModifier_parser_ = &criticalHitModifier;
  this->rangeIncrement_parser_ = &rangeIncrement;
  this->baseWeight_parser_ = &baseWeight;
  this->typeOfDamage_parser_ = &typeOfDamage;
}

RPG_Item_WeaponProperties_Type_pskel::
RPG_Item_WeaponProperties_Type_pskel ()
: weaponType_parser_ (0),
  weaponCategory_parser_ (0),
  weaponClass_parser_ (0),
  baseStorePrice_parser_ (0),
  baseDamage_parser_ (0),
  criticalHitModifier_parser_ (0),
  rangeIncrement_parser_ (0),
  baseWeight_parser_ (0),
  typeOfDamage_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_ArmorProperties_Type_pskel
//

void RPG_Item_ArmorProperties_Type_pskel::
armorType_parser (::RPG_Item_ArmorType_Type_pskel& p)
{
  this->armorType_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
armorCategory_parser (::RPG_Item_ArmorCategory_Type_pskel& p)
{
  this->armorCategory_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
baseStorePrice_parser (::RPG_Item_StorePrice_Type_pskel& p)
{
  this->baseStorePrice_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
baseArmorBonus_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->baseArmorBonus_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
maxDexterityBonus_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->maxDexterityBonus_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
armorCheckPenalty_parser (::xml_schema::integer_pskel& p)
{
  this->armorCheckPenalty_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
arcaneSpellFailure_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->arcaneSpellFailure_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
baseSpeed_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->baseSpeed_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
baseWeight_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->baseWeight_parser_ = &p;
}

void RPG_Item_ArmorProperties_Type_pskel::
parsers (::RPG_Item_ArmorType_Type_pskel& armorType,
         ::RPG_Item_ArmorCategory_Type_pskel& armorCategory,
         ::RPG_Item_StorePrice_Type_pskel& baseStorePrice,
         ::xml_schema::unsigned_int_pskel& baseArmorBonus,
         ::xml_schema::unsigned_int_pskel& maxDexterityBonus,
         ::xml_schema::integer_pskel& armorCheckPenalty,
         ::xml_schema::unsigned_int_pskel& arcaneSpellFailure,
         ::xml_schema::unsigned_int_pskel& baseSpeed,
         ::xml_schema::unsigned_int_pskel& baseWeight)
{
  this->armorType_parser_ = &armorType;
  this->armorCategory_parser_ = &armorCategory;
  this->baseStorePrice_parser_ = &baseStorePrice;
  this->baseArmorBonus_parser_ = &baseArmorBonus;
  this->maxDexterityBonus_parser_ = &maxDexterityBonus;
  this->armorCheckPenalty_parser_ = &armorCheckPenalty;
  this->arcaneSpellFailure_parser_ = &arcaneSpellFailure;
  this->baseSpeed_parser_ = &baseSpeed;
  this->baseWeight_parser_ = &baseWeight;
}

RPG_Item_ArmorProperties_Type_pskel::
RPG_Item_ArmorProperties_Type_pskel ()
: armorType_parser_ (0),
  armorCategory_parser_ (0),
  baseStorePrice_parser_ (0),
  baseArmorBonus_parser_ (0),
  maxDexterityBonus_parser_ (0),
  armorCheckPenalty_parser_ (0),
  arcaneSpellFailure_parser_ (0),
  baseSpeed_parser_ (0),
  baseWeight_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// RPG_Item_Dictionary_Type_pskel
//

void RPG_Item_Dictionary_Type_pskel::
RPG_Item_WeaponDictionary ()
{
}

void RPG_Item_Dictionary_Type_pskel::
RPG_Item_ArmorDictionary ()
{
}

void RPG_Item_Dictionary_Type_pskel::
post_RPG_Item_Dictionary_Type ()
{
}

// RPG_Item_WeaponDictionary_Type_pskel
//

void RPG_Item_WeaponDictionary_Type_pskel::
weapon (const RPG_Item_WeaponProperties_XML&)
{
}

void RPG_Item_WeaponDictionary_Type_pskel::
post_RPG_Item_WeaponDictionary_Type ()
{
}

// RPG_Item_ArmorDictionary_Type_pskel
//

void RPG_Item_ArmorDictionary_Type_pskel::
armor (const RPG_Item_ArmorProperties_XML&)
{
}

void RPG_Item_ArmorDictionary_Type_pskel::
post_RPG_Item_ArmorDictionary_Type ()
{
}

// RPG_Item_StorePrice_Type_pskel
//

void RPG_Item_StorePrice_Type_pskel::
numGoldPieces (unsigned int)
{
}

void RPG_Item_StorePrice_Type_pskel::
numSilverPieces (unsigned int)
{
}

// RPG_Chance_Roll_Type_pskel
//

void RPG_Chance_Roll_Type_pskel::
numDice (unsigned int)
{
}

void RPG_Chance_Roll_Type_pskel::
typeDice (const RPG_Chance_DiceType&)
{
}

void RPG_Chance_Roll_Type_pskel::
modifier (long long)
{
}

// RPG_Item_CriticalHitModifier_Type_pskel
//

void RPG_Item_CriticalHitModifier_Type_pskel::
minToHitRoll (unsigned int)
{
}

void RPG_Item_CriticalHitModifier_Type_pskel::
damageModifier (unsigned int)
{
}

// RPG_Item_WeaponProperties_Type_pskel
//

void RPG_Item_WeaponProperties_Type_pskel::
weaponType (const RPG_Item_WeaponType&)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
weaponCategory (const RPG_Item_WeaponCategory&)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
weaponClass (const RPG_Item_WeaponClass&)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
baseStorePrice (const RPG_Item_StorePrice&)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
baseDamage (const RPG_Item_Damage&)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
criticalHitModifier (const RPG_Item_CriticalHitModifier&)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
rangeIncrement (unsigned int)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
baseWeight (unsigned int)
{
}

void RPG_Item_WeaponProperties_Type_pskel::
typeOfDamage (const RPG_Item_WeaponDamageType&)
{
}

// RPG_Item_ArmorProperties_Type_pskel
//

void RPG_Item_ArmorProperties_Type_pskel::
armorType (const RPG_Item_ArmorType&)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
armorCategory (const RPG_Item_ArmorCategory&)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
baseStorePrice (const RPG_Item_StorePrice&)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
baseArmorBonus (unsigned int)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
maxDexterityBonus (unsigned int)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
armorCheckPenalty (long long)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
arcaneSpellFailure (unsigned int)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
baseSpeed (unsigned int)
{
}

void RPG_Item_ArmorProperties_Type_pskel::
baseWeight (unsigned int)
{
}

#include <cassert>

// Element validation and dispatch functions for RPG_Item_Dictionary_Type_pskel.
//
bool RPG_Item_Dictionary_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "RPG_Item_WeaponDictionary" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_Dictionary_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "RPG_Item_WeaponDictionary",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_Dictionary_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_Dictionary_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_Dictionary_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "RPG_Item_WeaponDictionary");

  this->v_state_stack_.pop ();
}

void RPG_Item_Dictionary_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "RPG_Item_WeaponDictionary" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->RPG_Item_WeaponDictionary_parser_;

          if (this->RPG_Item_WeaponDictionary_parser_)
            this->RPG_Item_WeaponDictionary_parser_->pre ();
        }
        else
        {
          if (this->RPG_Item_WeaponDictionary_parser_)
          {
            this->RPG_Item_WeaponDictionary_parser_->post_RPG_Item_WeaponDictionary_Type ();
            this->RPG_Item_WeaponDictionary ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "RPG_Item_WeaponDictionary",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "RPG_Item_ArmorDictionary" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->RPG_Item_ArmorDictionary_parser_;

          if (this->RPG_Item_ArmorDictionary_parser_)
            this->RPG_Item_ArmorDictionary_parser_->pre ();
        }
        else
        {
          if (this->RPG_Item_ArmorDictionary_parser_)
          {
            this->RPG_Item_ArmorDictionary_parser_->post_RPG_Item_ArmorDictionary_Type ();
            this->RPG_Item_ArmorDictionary ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "RPG_Item_ArmorDictionary",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Item_WeaponDictionary_Type_pskel.
//
bool RPG_Item_WeaponDictionary_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "weapon" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_WeaponDictionary_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "weapon",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_WeaponDictionary_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_WeaponDictionary_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_WeaponDictionary_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "weapon");

  this->v_state_stack_.pop ();
}

void RPG_Item_WeaponDictionary_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "weapon" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->weapon_parser_;

          if (this->weapon_parser_)
            this->weapon_parser_->pre ();
        }
        else
        {
          if (this->weapon_parser_)
          {
            const RPG_Item_WeaponProperties_XML& tmp (this->weapon_parser_->post_RPG_Item_WeaponProperties_Type ());
            this->weapon (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "weapon",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Item_ArmorDictionary_Type_pskel.
//
bool RPG_Item_ArmorDictionary_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "armor" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_ArmorDictionary_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "armor",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_ArmorDictionary_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_ArmorDictionary_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_ArmorDictionary_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "armor");

  this->v_state_stack_.pop ();
}

void RPG_Item_ArmorDictionary_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "armor" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->armor_parser_;

          if (this->armor_parser_)
            this->armor_parser_->pre ();
        }
        else
        {
          if (this->armor_parser_)
          {
            const RPG_Item_ArmorProperties_XML& tmp (this->armor_parser_->post_RPG_Item_ArmorProperties_Type ());
            this->armor (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "armor",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Item_StorePrice_Type_pskel.
//
bool RPG_Item_StorePrice_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "numGoldPieces" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_StorePrice_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "numGoldPieces",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_StorePrice_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_StorePrice_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_StorePrice_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "numGoldPieces");

  this->v_state_stack_.pop ();
}

void RPG_Item_StorePrice_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "numGoldPieces" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->numGoldPieces_parser_;

          if (this->numGoldPieces_parser_)
            this->numGoldPieces_parser_->pre ();
        }
        else
        {
          if (this->numGoldPieces_parser_)
          {
            unsigned int tmp (this->numGoldPieces_parser_->post_unsigned_int ());
            this->numGoldPieces (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "numGoldPieces",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "numSilverPieces" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->numSilverPieces_parser_;

          if (this->numSilverPieces_parser_)
            this->numSilverPieces_parser_->pre ();
        }
        else
        {
          if (this->numSilverPieces_parser_)
          {
            unsigned int tmp (this->numSilverPieces_parser_->post_unsigned_int ());
            this->numSilverPieces (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "numSilverPieces",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Chance_Roll_Type_pskel.
//
bool RPG_Chance_Roll_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "numDice" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Chance_Roll_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "numDice",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Chance_Roll_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Chance_Roll_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Chance_Roll_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "numDice");

  this->v_state_stack_.pop ();
}

void RPG_Chance_Roll_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "numDice" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->numDice_parser_;

          if (this->numDice_parser_)
            this->numDice_parser_->pre ();
        }
        else
        {
          if (this->numDice_parser_)
          {
            unsigned int tmp (this->numDice_parser_->post_unsigned_int ());
            this->numDice (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "numDice",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "typeDice" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->typeDice_parser_;

          if (this->typeDice_parser_)
            this->typeDice_parser_->pre ();
        }
        else
        {
          if (this->typeDice_parser_)
          {
            const RPG_Chance_DiceType& tmp (this->typeDice_parser_->post_RPG_Chance_DiceType_Type ());
            this->typeDice (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "typeDice",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "modifier" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->modifier_parser_;

          if (this->modifier_parser_)
            this->modifier_parser_->pre ();
        }
        else
        {
          if (this->modifier_parser_)
          {
            long long tmp (this->modifier_parser_->post_integer ());
            this->modifier (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "modifier",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Item_CriticalHitModifier_Type_pskel.
//
bool RPG_Item_CriticalHitModifier_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "minToHitRoll" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_CriticalHitModifier_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "minToHitRoll",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_CriticalHitModifier_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_CriticalHitModifier_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_CriticalHitModifier_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "minToHitRoll");

  this->v_state_stack_.pop ();
}

void RPG_Item_CriticalHitModifier_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "minToHitRoll" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->minToHitRoll_parser_;

          if (this->minToHitRoll_parser_)
            this->minToHitRoll_parser_->pre ();
        }
        else
        {
          if (this->minToHitRoll_parser_)
          {
            unsigned int tmp (this->minToHitRoll_parser_->post_unsigned_int ());
            this->minToHitRoll (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "minToHitRoll",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "damageModifier" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->damageModifier_parser_;

          if (this->damageModifier_parser_)
            this->damageModifier_parser_->pre ();
        }
        else
        {
          if (this->damageModifier_parser_)
          {
            unsigned int tmp (this->damageModifier_parser_->post_unsigned_int ());
            this->damageModifier (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "damageModifier",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Item_WeaponProperties_Type_pskel.
//
bool RPG_Item_WeaponProperties_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "weaponType" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_WeaponProperties_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "weaponType",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_WeaponProperties_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_WeaponProperties_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_WeaponProperties_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "weaponType");

  this->v_state_stack_.pop ();
}

void RPG_Item_WeaponProperties_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "weaponType" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponType_parser_;

          if (this->weaponType_parser_)
            this->weaponType_parser_->pre ();
        }
        else
        {
          if (this->weaponType_parser_)
          {
            const RPG_Item_WeaponType& tmp (this->weaponType_parser_->post_RPG_Item_WeaponType_Type ());
            this->weaponType (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "weaponType",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "weaponCategory" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponCategory_parser_;

          if (this->weaponCategory_parser_)
            this->weaponCategory_parser_->pre ();
        }
        else
        {
          if (this->weaponCategory_parser_)
          {
            const RPG_Item_WeaponCategory& tmp (this->weaponCategory_parser_->post_RPG_Item_WeaponCategory_Type ());
            this->weaponCategory (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "weaponCategory",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "weaponClass" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->weaponClass_parser_;

          if (this->weaponClass_parser_)
            this->weaponClass_parser_->pre ();
        }
        else
        {
          if (this->weaponClass_parser_)
          {
            const RPG_Item_WeaponClass& tmp (this->weaponClass_parser_->post_RPG_Item_WeaponClass_Type ());
            this->weaponClass (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "weaponClass",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "baseStorePrice" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseStorePrice_parser_;

          if (this->baseStorePrice_parser_)
            this->baseStorePrice_parser_->pre ();
        }
        else
        {
          if (this->baseStorePrice_parser_)
          {
            const RPG_Item_StorePrice& tmp (this->baseStorePrice_parser_->post_RPG_Item_StorePrice_Type ());
            this->baseStorePrice (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseStorePrice",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "baseDamage" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseDamage_parser_;

          if (this->baseDamage_parser_)
            this->baseDamage_parser_->pre ();
        }
        else
        {
          if (this->baseDamage_parser_)
          {
            const RPG_Item_Damage& tmp (this->baseDamage_parser_->post_RPG_Chance_Roll_Type ());
            this->baseDamage (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseDamage",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "criticalHitModifier" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->criticalHitModifier_parser_;

          if (this->criticalHitModifier_parser_)
            this->criticalHitModifier_parser_->pre ();
        }
        else
        {
          if (this->criticalHitModifier_parser_)
          {
            const RPG_Item_CriticalHitModifier& tmp (this->criticalHitModifier_parser_->post_RPG_Item_CriticalHitModifier_Type ());
            this->criticalHitModifier (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "criticalHitModifier",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "rangeIncrement" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->rangeIncrement_parser_;

          if (this->rangeIncrement_parser_)
            this->rangeIncrement_parser_->pre ();
        }
        else
        {
          if (this->rangeIncrement_parser_)
          {
            unsigned int tmp (this->rangeIncrement_parser_->post_unsigned_int ());
            this->rangeIncrement (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "rangeIncrement",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "baseWeight" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseWeight_parser_;

          if (this->baseWeight_parser_)
            this->baseWeight_parser_->pre ();
        }
        else
        {
          if (this->baseWeight_parser_)
          {
            unsigned int tmp (this->baseWeight_parser_->post_unsigned_int ());
            this->baseWeight (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseWeight",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if (n == "typeOfDamage" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->typeOfDamage_parser_;

          if (this->typeOfDamage_parser_)
            this->typeOfDamage_parser_->pre ();
        }
        else
        {
          if (this->typeOfDamage_parser_)
          {
            const RPG_Item_WeaponDamageType& tmp (this->typeOfDamage_parser_->post_RPG_Item_WeaponDamageType_Type ());
            this->typeOfDamage (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "typeOfDamage",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for RPG_Item_ArmorProperties_Type_pskel.
//
bool RPG_Item_ArmorProperties_Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "armorType" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &RPG_Item_ArmorProperties_Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "armorType",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool RPG_Item_ArmorProperties_Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void RPG_Item_ArmorProperties_Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void RPG_Item_ArmorProperties_Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "armorType");

  this->v_state_stack_.pop ();
}

void RPG_Item_ArmorProperties_Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "armorType" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->armorType_parser_;

          if (this->armorType_parser_)
            this->armorType_parser_->pre ();
        }
        else
        {
          if (this->armorType_parser_)
          {
            const RPG_Item_ArmorType& tmp (this->armorType_parser_->post_RPG_Item_ArmorType_Type ());
            this->armorType (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "armorType",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "armorCategory" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->armorCategory_parser_;

          if (this->armorCategory_parser_)
            this->armorCategory_parser_->pre ();
        }
        else
        {
          if (this->armorCategory_parser_)
          {
            const RPG_Item_ArmorCategory& tmp (this->armorCategory_parser_->post_RPG_Item_ArmorCategory_Type ());
            this->armorCategory (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "armorCategory",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "baseStorePrice" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseStorePrice_parser_;

          if (this->baseStorePrice_parser_)
            this->baseStorePrice_parser_->pre ();
        }
        else
        {
          if (this->baseStorePrice_parser_)
          {
            const RPG_Item_StorePrice& tmp (this->baseStorePrice_parser_->post_RPG_Item_StorePrice_Type ());
            this->baseStorePrice (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseStorePrice",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "baseArmorBonus" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseArmorBonus_parser_;

          if (this->baseArmorBonus_parser_)
            this->baseArmorBonus_parser_->pre ();
        }
        else
        {
          if (this->baseArmorBonus_parser_)
          {
            unsigned int tmp (this->baseArmorBonus_parser_->post_unsigned_int ());
            this->baseArmorBonus (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseArmorBonus",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "maxDexterityBonus" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->maxDexterityBonus_parser_;

          if (this->maxDexterityBonus_parser_)
            this->maxDexterityBonus_parser_->pre ();
        }
        else
        {
          if (this->maxDexterityBonus_parser_)
          {
            unsigned int tmp (this->maxDexterityBonus_parser_->post_unsigned_int ());
            this->maxDexterityBonus (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "maxDexterityBonus",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "armorCheckPenalty" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->armorCheckPenalty_parser_;

          if (this->armorCheckPenalty_parser_)
            this->armorCheckPenalty_parser_->pre ();
        }
        else
        {
          if (this->armorCheckPenalty_parser_)
          {
            long long tmp (this->armorCheckPenalty_parser_->post_integer ());
            this->armorCheckPenalty (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "armorCheckPenalty",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "arcaneSpellFailure" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->arcaneSpellFailure_parser_;

          if (this->arcaneSpellFailure_parser_)
            this->arcaneSpellFailure_parser_->pre ();
        }
        else
        {
          if (this->arcaneSpellFailure_parser_)
          {
            unsigned int tmp (this->arcaneSpellFailure_parser_->post_unsigned_int ());
            this->arcaneSpellFailure (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "arcaneSpellFailure",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "baseSpeed" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseSpeed_parser_;

          if (this->baseSpeed_parser_)
            this->baseSpeed_parser_->pre ();
        }
        else
        {
          if (this->baseSpeed_parser_)
          {
            unsigned int tmp (this->baseSpeed_parser_->post_unsigned_int ());
            this->baseSpeed (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseSpeed",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if (n == "baseWeight" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseWeight_parser_;

          if (this->baseWeight_parser_)
            this->baseWeight_parser_->pre ();
        }
        else
        {
          if (this->baseWeight_parser_)
          {
            unsigned int tmp (this->baseWeight_parser_->post_unsigned_int ());
            this->baseWeight (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseWeight",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Begin epilogue.
//
//
// End epilogue.

