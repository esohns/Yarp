// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "rpg_item_dictionary_parser_base.h"

// RPG_Item_Dictionary_Type_pimpl
//

void RPG_Item_Dictionary_Type_pimpl::
pre ()
{
}

void RPG_Item_Dictionary_Type_pimpl::
RPG_Item_Weapon_Dictionary (const RPG_ITEM_WEAPON_DICTIONARY_T& RPG_Item_Weapon_Dictionary)
{
  // TODO
  //
}

void RPG_Item_Dictionary_Type_pimpl::
RPG_Item_Armor_Dictionary (const RPG_ITEM_ARMOR_DICTIONARY_T& RPG_Item_Armor_Dictionary)
{
  // TODO
  //
}

void RPG_Item_Dictionary_Type_pimpl::
post_RPG_Item_Dictionary_Type ()
{
}

// RPG_Item_Weapon_Dictionary_Type_pimpl
//

void RPG_Item_Weapon_Dictionary_Type_pimpl::
pre ()
{
}

void RPG_Item_Weapon_Dictionary_Type_pimpl::
weapon (const RPG_Item_Weapon_Properties& weapon)
{
  // TODO
  //
}

RPG_ITEM_WEAPON_DICTIONARY_T RPG_Item_Weapon_Dictionary_Type_pimpl::
post_RPG_Item_Weapon_Dictionary_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Item_Armor_Dictionary_Type_pimpl
//

void RPG_Item_Armor_Dictionary_Type_pimpl::
pre ()
{
}

void RPG_Item_Armor_Dictionary_Type_pimpl::
armor (const RPG_Item_Armor_Properties& armor)
{
  // TODO
  //
}

RPG_ITEM_ARMOR_DICTIONARY_T RPG_Item_Armor_Dictionary_Type_pimpl::
post_RPG_Item_Armor_Dictionary_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Item_Weapon_Category_Type_pimpl
//

void RPG_Item_Weapon_Category_Type_pimpl::
pre ()
{
}

RPG_Item_Weapon_Category RPG_Item_Weapon_Category_Type_pimpl::
post_RPG_Item_Weapon_Category_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Item_Weapon_Class_Type_pimpl
//

void RPG_Item_Weapon_Class_Type_pimpl::
pre ()
{
}

RPG_Item_Weapon_Class RPG_Item_Weapon_Class_Type_pimpl::
post_RPG_Item_Weapon_Class_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Item_Weapon_Type_pimpl
//

void RPG_Item_Weapon_Type_pimpl::
pre ()
{
}

RPG_Item_Weapon_Type RPG_Item_Weapon_Type_pimpl::
post_RPG_Item_Weapon_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Item_Store_Price_Type_pimpl
//

void RPG_Item_Store_Price_Type_pimpl::
pre ()
{
}

void RPG_Item_Store_Price_Type_pimpl::
numGoldPieces (unsigned int numGoldPieces)
{
  // TODO
  //
}

void RPG_Item_Store_Price_Type_pimpl::
numSilverPieces (unsigned int numSilverPieces)
{
  // TODO
  //
}

RPG_Item_Store_Price RPG_Item_Store_Price_Type_pimpl::
post_RPG_Item_Store_Price_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Chance_Dice_Type_pimpl
//

void RPG_Chance_Dice_Type_pimpl::
pre ()
{
}

RPG_Chance_Dice_Type RPG_Chance_Dice_Type_pimpl::
post_RPG_Chance_Dice_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Chance_Roll_Type_pimpl
//

void RPG_Chance_Roll_Type_pimpl::
pre ()
{
}

void RPG_Chance_Roll_Type_pimpl::
numDice (unsigned int numDice)
{
  // TODO
  //
}

void RPG_Chance_Roll_Type_pimpl::
typeDice (const RPG_Chance_Dice_Type& typeDice)
{
  // TODO
  //
}

void RPG_Chance_Roll_Type_pimpl::
modifier (long long modifier)
{
  // TODO
  //
}

RPG_Item_Damage RPG_Chance_Roll_Type_pimpl::
post_RPG_Chance_Roll_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Item_CriticalHit_Modifier_Type_pimpl
//

void RPG_Item_CriticalHit_Modifier_Type_pimpl::
pre ()
{
}

void RPG_Item_CriticalHit_Modifier_Type_pimpl::
minToHitRoll (unsigned int minToHitRoll)
{
  // TODO
  //
}

void RPG_Item_CriticalHit_Modifier_Type_pimpl::
damageModifier (unsigned int damageModifier)
{
  // TODO
  //
}

RPG_Item_CriticalHit_Modifier RPG_Item_CriticalHit_Modifier_Type_pimpl::
post_RPG_Item_CriticalHit_Modifier_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Item_Weapon_Damage_Type_pimpl
//

void RPG_Item_Weapon_Damage_Type_pimpl::
pre ()
{
}

RPG_Item_Weapon_Damage_Type RPG_Item_Weapon_Damage_Type_pimpl::
post_RPG_Item_Weapon_Damage_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Item_Weapon_Properties_Type_pimpl
//

void RPG_Item_Weapon_Properties_Type_pimpl::
pre ()
{
}

void RPG_Item_Weapon_Properties_Type_pimpl::
weaponType (const RPG_Item_Weapon_Type& weaponType)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
weaponCategory (const RPG_Item_Weapon_Category& weaponCategory)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
weaponClass (const RPG_Item_Weapon_Class& weaponClass)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
baseStorePrice (const RPG_Item_Store_Price& baseStorePrice)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
baseDamage (const RPG_Item_Damage& baseDamage)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
criticalHitModifier (const RPG_Item_CriticalHit_Modifier& criticalHitModifier)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
rangeIncrement (unsigned int rangeIncrement)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
baseWeight (unsigned int baseWeight)
{
  // TODO
  //
}

void RPG_Item_Weapon_Properties_Type_pimpl::
typeOfDamage (const RPG_Item_Weapon_Damage_Type& typeOfDamage)
{
  // TODO
  //
}

RPG_Item_Weapon_Properties RPG_Item_Weapon_Properties_Type_pimpl::
post_RPG_Item_Weapon_Properties_Type ()
{
  // TODO
  //
  // return ... ;
}

// RPG_Item_Armor_Category_Type_pimpl
//

void RPG_Item_Armor_Category_Type_pimpl::
pre ()
{
}

RPG_Item_Armor_Category RPG_Item_Armor_Category_Type_pimpl::
post_RPG_Item_Armor_Category_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Item_Armor_Type_pimpl
//

void RPG_Item_Armor_Type_pimpl::
pre ()
{
}

RPG_Item_Armor_Type RPG_Item_Armor_Type_pimpl::
post_RPG_Item_Armor_Type ()
{
  const ::std::string& v (post_string ());

  // TODO
  //
  // return ... ;
}

// RPG_Item_Armor_Properties_Type_pimpl
//

void RPG_Item_Armor_Properties_Type_pimpl::
pre ()
{
}

void RPG_Item_Armor_Properties_Type_pimpl::
armorType (const RPG_Item_Armor_Type& armorType)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
armorCategory (const RPG_Item_Armor_Category& armorCategory)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
baseStorePrice (const RPG_Item_Store_Price& baseStorePrice)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
baseArmorBonus (unsigned int baseArmorBonus)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
maxDexterityBonus (unsigned int maxDexterityBonus)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
armorCheckPenalty (long long armorCheckPenalty)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
arcaneSpellFailure (unsigned int arcaneSpellFailure)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
baseSpeed (unsigned int baseSpeed)
{
  // TODO
  //
}

void RPG_Item_Armor_Properties_Type_pimpl::
baseWeight (unsigned int baseWeight)
{
  // TODO
  //
}

RPG_Item_Armor_Properties RPG_Item_Armor_Properties_Type_pimpl::
post_RPG_Item_Armor_Properties_Type ()
{
  // TODO
  //
  // return ... ;
}

