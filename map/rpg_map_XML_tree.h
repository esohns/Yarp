// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX__MAP_RPG_MAP_XML_TREE_H
#define CXX__MAP_RPG_MAP_XML_TREE_H

// Begin prologue.
//
#include "rpg_map_exports.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Map_DoorState_XMLTree_Type;
class RPG_Map_Position_XMLTree_Type;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class RPG_Map_Export RPG_Map_DoorState_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    DOORSTATE_OPEN,
    DOORSTATE_CLOSED,
    DOORSTATE_LOCKED,
    DOORSTATE_BROKEN
  };

  RPG_Map_DoorState_XMLTree_Type (value v);

  RPG_Map_DoorState_XMLTree_Type (const char* v);

  RPG_Map_DoorState_XMLTree_Type (const ::std::string& v);

  RPG_Map_DoorState_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Map_DoorState_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Map_DoorState_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Map_DoorState_XMLTree_Type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Map_DoorState_XMLTree_Type (const RPG_Map_DoorState_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Map_DoorState_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Map_DoorState_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Map_DoorState_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Map_DoorState_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Map_DoorState_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Map_DoorState_XMLTree_Type_indexes_[4];
};

class RPG_Map_Export RPG_Map_Position_XMLTree_Type: public ::xml_schema::type
{
  public:
  // x
  // 
  typedef ::xml_schema::unsigned_int x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  // 
  typedef ::xml_schema::unsigned_int y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // Constructors.
  //
  RPG_Map_Position_XMLTree_Type (const x_type&,
                                 const y_type&);

  RPG_Map_Position_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Map_Position_XMLTree_Type (const RPG_Map_Position_XMLTree_Type& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual RPG_Map_Position_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Map_Position_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
};

RPG_Map_Export
bool
operator== (const RPG_Map_Position_XMLTree_Type&, const RPG_Map_Position_XMLTree_Type&);

RPG_Map_Export
bool
operator!= (const RPG_Map_Position_XMLTree_Type&, const RPG_Map_Position_XMLTree_Type&);


#include <iosfwd>

RPG_Map_Export
::std::ostream&
operator<< (::std::ostream&, RPG_Map_DoorState_XMLTree_Type::value);

RPG_Map_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Map_DoorState_XMLTree_Type&);

RPG_Map_Export
::std::ostream&
operator<< (::std::ostream&, const RPG_Map_Position_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

RPG_Map_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Map_DoorState_XMLTree_Type&);

RPG_Map_Export
void
operator<< (::xercesc::DOMAttr&, const RPG_Map_DoorState_XMLTree_Type&);

RPG_Map_Export
void
operator<< (::xml_schema::list_stream&,
            const RPG_Map_DoorState_XMLTree_Type&);

RPG_Map_Export
void
operator<< (::xercesc::DOMElement&, const RPG_Map_Position_XMLTree_Type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX__MAP_RPG_MAP_XML_TREE_H
