
// -------------------------------- * * * -------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.1
// -------------------------------- * * * -------------------------------- //

#ifndef RPG_DICE_DIETYPE_H
#define RPG_DICE_DIETYPE_H

 enum RPG_Dice_DieType
 {
   // *TODO*: enum values need to reflect the number of faces
   // --> will be clobbered by subsequent updates of the schema
   // (refer to rpg_dice_common.h for a template)
   D_0   = 0,
   D_2   = 2,
   D_3   = 3,
   D_4   = 4,
   D_6   = 6,
   D_8   = 8,
   D_10  = 10,
   D_12  = 12,
   D_20  = 20,
   D_100 = 100,
   //
   RPG_DICE_DIETYPE_MAX,
   RPG_DICE_DIETYPE_INVALID
 };

// ---------------------------------------

#include <map>
#include <string>

#include "ace/Global_Macros.h"

//#include "rpg_dice_exports.h"

typedef std::map<RPG_Dice_DieType, std::string> RPG_Dice_DieTypeToStringTable_t;
typedef RPG_Dice_DieTypeToStringTable_t::const_iterator RPG_Dice_DieTypeToStringTableIterator_t;

class RPG_Dice_DieTypeHelper
{
 public:
  static void initialize ()
  {
    RPG_Dice_DieTypeToStringTable.clear ();

    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_0,   ACE_TEXT_ALWAYS_CHAR ("D_0")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_2,   ACE_TEXT_ALWAYS_CHAR ("D_2")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_3,   ACE_TEXT_ALWAYS_CHAR ("D_3")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_4,   ACE_TEXT_ALWAYS_CHAR ("D_4")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_6,   ACE_TEXT_ALWAYS_CHAR ("D_6")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_8,   ACE_TEXT_ALWAYS_CHAR ("D_8")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_10,  ACE_TEXT_ALWAYS_CHAR ("D_10")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_12,  ACE_TEXT_ALWAYS_CHAR ("D_12")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_20,  ACE_TEXT_ALWAYS_CHAR ("D_20")));
    RPG_Dice_DieTypeToStringTable.insert (std::make_pair (D_100, ACE_TEXT_ALWAYS_CHAR ("D_100")));
  }

  static std::string RPG_Dice_DieTypeToString (const RPG_Dice_DieType& element_in)
  {
    std::string result;
    RPG_Dice_DieTypeToStringTableIterator_t iterator = RPG_Dice_DieTypeToStringTable.find (element_in);
    if (iterator != RPG_Dice_DieTypeToStringTable.end ())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR ("RPG_DICE_DIETYPE_INVALID");
    return result;
  }

  static RPG_Dice_DieType stringToRPG_Dice_DieType (const std::string& string_in)
  {
    RPG_Dice_DieTypeToStringTableIterator_t iterator = RPG_Dice_DieTypeToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;
      iterator++;
    } while (iterator != RPG_Dice_DieTypeToStringTable.end ());

    return RPG_DICE_DIETYPE_INVALID;
  }

  static RPG_Dice_DieTypeToStringTable_t RPG_Dice_DieTypeToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC (RPG_Dice_DieTypeHelper ())
  ACE_UNIMPLEMENTED_FUNC (RPG_Dice_DieTypeHelper (const RPG_Dice_DieTypeHelper&))
  ACE_UNIMPLEMENTED_FUNC (RPG_Dice_DieTypeHelper& operator=(const RPG_Dice_DieTypeHelper&))
};

#endif
