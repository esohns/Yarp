// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___RPG_COMMON_XML_TREE_H
#define CXX___RPG_COMMON_XML_TREE_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "rpg_XMLSchema_XML_tree.h"

// Forward declarations.
//
class RPG_Common_CreatureMetaType_XMLTree_Type;
class RPG_Common_CreatureSubType_XMLTree_Type;
class RPG_Common_CreatureType_XMLTree_Type;
class RPG_Common_SubClass_XMLTree_Type;
class RPG_Common_Attribute_XMLTree_Type;
class RPG_Common_Size_XMLTree_Type;
class RPG_Common_Condition_XMLTree_Type;
class RPG_Common_Skill_XMLTree_Type;
class RPG_Common_PhysicalDamageType_XMLTree_Type;
class RPG_Common_ActionType_XMLTree_Type;
class RPG_Common_AreaOfEffect_XMLTree_Type;
class RPG_Common_EffectType_XMLTree_Type;
class RPG_Common_CounterMeasure_XMLTree_Type;
class RPG_Common_CheckType_XMLTree_Type;
class RPG_Common_SavingThrow_XMLTree_Type;
class RPG_Common_BaseCheckTypeUnion_XMLTree_Type;
class RPG_Common_SaveReductionType_XMLTree_Type;
class RPG_Common_SavingThrowCheck_XMLTree_Type;
class RPG_Common_Amount_XMLTree_Type;
class RPG_Common_Usage_XMLTree_Type;
class RPG_Common_Duration_XMLTree_Type;
class RPG_Common_Camp_XMLTree_Type;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

#include "rpg_dice_XML_tree.h"

class RPG_Common_CreatureMetaType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    METATYPE_ANY,
    METATYPE_ABERRATION,
    METATYPE_ANIMAL,
    METATYPE_CONSTRUCT,
    METATYPE_DRAGON,
    METATYPE_ELEMENTAL,
    METATYPE_FEY,
    METATYPE_GIANT,
    METATYPE_HUMANOID,
    METATYPE_MAGICAL_BEAST,
    METATYPE_MONSTROUS_HUMANOID,
    METATYPE_OOZE,
    METATYPE_OUTSIDER,
    METATYPE_PLANT,
    METATYPE_UNDEAD,
    METATYPE_VERMIN
  };

  RPG_Common_CreatureMetaType_XMLTree_Type (value v);

  RPG_Common_CreatureMetaType_XMLTree_Type (const char* v);

  RPG_Common_CreatureMetaType_XMLTree_Type (const ::std::string& v);

  RPG_Common_CreatureMetaType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_CreatureMetaType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Common_CreatureMetaType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Common_CreatureMetaType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Common_CreatureMetaType_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Common_CreatureMetaType_XMLTree_Type (const RPG_Common_CreatureMetaType_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Common_CreatureMetaType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_CreatureMetaType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_[16];
  static const value _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_indexes_[16];
};

class RPG_Common_CreatureSubType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SUBTYPE_AIR,
    SUBTYPE_ANGEL,
    SUBTYPE_AQUATIC,
    SUBTYPE_ARCHON,
    SUBTYPE_AUGMENTED,
    SUBTYPE_CHAOTIC,
    SUBTYPE_COLD,
    SUBTYPE_EARTH,
    SUBTYPE_EVIL,
    SUBTYPE_EXTRAPLANAR,
    SUBTYPE_FIRE,
    SUBTYPE_GOBLINOID,
    SUBTYPE_GOOD,
    SUBTYPE_INCORPOREAL,
    SUBTYPE_LAWFUL,
    SUBTYPE_NATIVE,
    SUBTYPE_REPTILIAN,
    SUBTYPE_SHAPECHANGER,
    SUBTYPE_SWARM,
    SUBTYPE_WATER
  };

  RPG_Common_CreatureSubType_XMLTree_Type (value v);

  RPG_Common_CreatureSubType_XMLTree_Type (const char* v);

  RPG_Common_CreatureSubType_XMLTree_Type (const ::std::string& v);

  RPG_Common_CreatureSubType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_CreatureSubType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Common_CreatureSubType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Common_CreatureSubType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Common_CreatureSubType_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  RPG_Common_CreatureSubType_XMLTree_Type (const RPG_Common_CreatureSubType_XMLTree_Type& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

  virtual RPG_Common_CreatureSubType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_CreatureSubType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_[20];
  static const value _xsd_RPG_Common_CreatureSubType_XMLTree_Type_indexes_[20];
};

class RPG_Common_CreatureType_XMLTree_Type: public ::xml_schema::type
{
  public:
  // metaType
  // 
  typedef ::RPG_Common_CreatureMetaType_XMLTree_Type metaType_type;
  typedef ::xsd::cxx::tree::traits< metaType_type, char > metaType_traits;

  const metaType_type&
  metaType () const;

  metaType_type&
  metaType ();

  void
  metaType (const metaType_type& x);

  void
  metaType (::std::auto_ptr< metaType_type > p);

  // subType
  // 
  typedef ::RPG_Common_CreatureSubType_XMLTree_Type subType_type;
  typedef ::xsd::cxx::tree::sequence< subType_type > subType_sequence;
  typedef subType_sequence::iterator subType_iterator;
  typedef subType_sequence::const_iterator subType_const_iterator;
  typedef ::xsd::cxx::tree::traits< subType_type, char > subType_traits;

  const subType_sequence&
  subType () const;

  subType_sequence&
  subType ();

  void
  subType (const subType_sequence& s);

  // Constructors.
  //
  RPG_Common_CreatureType_XMLTree_Type (const metaType_type&);

  RPG_Common_CreatureType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Common_CreatureType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Common_CreatureType_XMLTree_Type (const RPG_Common_CreatureType_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Common_CreatureType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Common_CreatureType_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< metaType_type > metaType_;
  subType_sequence subType_;
};

bool
operator== (const RPG_Common_CreatureType_XMLTree_Type&, const RPG_Common_CreatureType_XMLTree_Type&);

bool
operator!= (const RPG_Common_CreatureType_XMLTree_Type&, const RPG_Common_CreatureType_XMLTree_Type&);


class RPG_Common_SubClass_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SUBCLASS_NONE,
    SUBCLASS_AVENGER,
    SUBCLASS_BARBARIAN,
    SUBCLASS_BARD,
    SUBCLASS_CLERIC,
    SUBCLASS_DRUID,
    SUBCLASS_FIGHTER,
    SUBCLASS_INVOKER,
    SUBCLASS_MONK,
    SUBCLASS_PALADIN,
    SUBCLASS_RANGER,
    SUBCLASS_SHAMAN,
    SUBCLASS_SORCERER,
    SUBCLASS_THIEF,
    SUBCLASS_WARLOCK,
    SUBCLASS_WARLORD,
    SUBCLASS_WIZARD
  };

  RPG_Common_SubClass_XMLTree_Type (value v);

  RPG_Common_SubClass_XMLTree_Type (const char* v);

  RPG_Common_SubClass_XMLTree_Type (const ::std::string& v);

  RPG_Common_SubClass_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_SubClass_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Common_SubClass_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Common_SubClass_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Common_SubClass_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Common_SubClass_XMLTree_Type (const RPG_Common_SubClass_XMLTree_Type& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual RPG_Common_SubClass_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_SubClass_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_SubClass_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_SubClass_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_SubClass_XMLTree_Type_literals_[17];
  static const value _xsd_RPG_Common_SubClass_XMLTree_Type_indexes_[17];
};

class RPG_Common_Attribute_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ATTRIBUTE_CHARISMA,
    ATTRIBUTE_CONSTITUTION,
    ATTRIBUTE_DEXTERITY,
    ATTRIBUTE_INTELLIGENCE,
    ATTRIBUTE_STRENGTH,
    ATTRIBUTE_WISDOM,
    ATTRIBUTE_ANY
  };

  RPG_Common_Attribute_XMLTree_Type (value v);

  RPG_Common_Attribute_XMLTree_Type (const char* v);

  RPG_Common_Attribute_XMLTree_Type (const ::std::string& v);

  RPG_Common_Attribute_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_Attribute_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Attribute_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Attribute_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Attribute_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Attribute_XMLTree_Type (const RPG_Common_Attribute_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Common_Attribute_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_Attribute_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_Attribute_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_Attribute_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_Attribute_XMLTree_Type_literals_[7];
  static const value _xsd_RPG_Common_Attribute_XMLTree_Type_indexes_[7];
};

class RPG_Common_Size_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SIZE_FINE,
    SIZE_DIMINUTIVE,
    SIZE_TINY,
    SIZE_SMALL,
    SIZE_MEDIUM,
    SIZE_LARGE,
    SIZE_HUGE,
    SIZE_GARGANTUAN,
    SIZE_COLOSSAL
  };

  RPG_Common_Size_XMLTree_Type (value v);

  RPG_Common_Size_XMLTree_Type (const char* v);

  RPG_Common_Size_XMLTree_Type (const ::std::string& v);

  RPG_Common_Size_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_Size_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Size_XMLTree_Type (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Size_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Size_XMLTree_Type (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Size_XMLTree_Type (const RPG_Common_Size_XMLTree_Type& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual RPG_Common_Size_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_Size_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_Size_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_Size_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_Size_XMLTree_Type_literals_[9];
  static const value _xsd_RPG_Common_Size_XMLTree_Type_indexes_[9];
};

class RPG_Common_Condition_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    CONDITION_ALTERNATE_FORM,
    CONDITION_NORMAL,
    CONDITION_ABILITY_DAMAGED,
    CONDITION_ABILITY_DRAINED,
    CONDITION_BLINDED,
    CONDITION_BLOWN_AWAY,
    CONDITION_BOUND,
    CONDITION_CHECKED,
    CONDITION_CONFUSED,
    CONDITION_COWERING,
    CONDITION_DAZED,
    CONDITION_DAZZLED,
    CONDITION_DEAD,
    CONDITION_DEAFENED,
    CONDITION_DISABLED,
    CONDITION_DYING,
    CONDITION_ENERGY_DRAINED,
    CONDITION_ENTANGLED,
    CONDITION_EXHAUSTED,
    CONDITION_FASCINATED,
    CONDITION_FATIGUED,
    CONDITION_FLAT_FOOTED,
    CONDITION_FRIGHTENED,
    CONDITION_GRAPPLING,
    CONDITION_HELD,
    CONDITION_HELPLESS,
    CONDITION_INCORPOREAL,
    CONDITION_INVISIBLE,
    CONDITION_KNOCKED_DOWN,
    CONDITION_NAUSEATED,
    CONDITION_PANICKED,
    CONDITION_PARALYZED,
    CONDITION_PETRIFIED,
    CONDITION_PINNED,
    CONDITION_PRONE,
    CONDITION_SHAKEN,
    CONDITION_SICKENED,
    CONDITION_SLEEPING,
    CONDITION_STABLE,
    CONDITION_STAGGERED,
    CONDITION_STUNNED,
    CONDITION_TURNED,
    CONDITION_UNCONSCIOUS
  };

  RPG_Common_Condition_XMLTree_Type (value v);

  RPG_Common_Condition_XMLTree_Type (const char* v);

  RPG_Common_Condition_XMLTree_Type (const ::std::string& v);

  RPG_Common_Condition_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_Condition_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Condition_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Condition_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Condition_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_Condition_XMLTree_Type (const RPG_Common_Condition_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Common_Condition_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_Condition_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_Condition_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_Condition_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_Condition_XMLTree_Type_literals_[43];
  static const value _xsd_RPG_Common_Condition_XMLTree_Type_indexes_[43];
};

class RPG_Common_Skill_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SKILL_APPRAISE,
    SKILL_BALANCE,
    SKILL_BLUFF,
    SKILL_CLIMB,
    SKILL_CONCENTRATION,
    SKILL_CRAFT_ANY,
    SKILL_CRAFT_ALL,
    SKILL_CRAFT_ALCHEMY,
    SKILL_CRAFT_FLETCHER,
    SKILL_CRAFT_BOWYER,
    SKILL_CRAFT_SMITH_ARMOR,
    SKILL_CRAFT_SMITH_BLACK,
    SKILL_CRAFT_SMITH_WEAPON,
    SKILL_CRAFT_TRAP,
    SKILL_CRAFT_OTHER,
    SKILL_DECIPHER_SCRIPT,
    SKILL_DIPLOMACY,
    SKILL_DISABLE_DEVICE,
    SKILL_DISGUISE,
    SKILL_ESCAPE_ARTIST,
    SKILL_FORGERY,
    SKILL_GATHER_INFORMATION,
    SKILL_HANDLE_ANIMAL,
    SKILL_HEAL,
    SKILL_HIDE,
    SKILL_INTIMIDATE,
    SKILL_JUMP,
    SKILL_KNOWLEDGE_ANY,
    SKILL_KNOWLEDGE_ALL,
    SKILL_KNOWLEDGE_ARCANA,
    SKILL_KNOWLEDGE_ARCHITECTURE_ENGINEERING,
    SKILL_KNOWLEDGE_DUNGEONS,
    SKILL_KNOWLEDGE_GEOGRAPHY,
    SKILL_KNOWLEDGE_HISTORY,
    SKILL_KNOWLEDGE_LOCAL,
    SKILL_KNOWLEDGE_NATURE,
    SKILL_KNOWLEDGE_NOBILITY_ROYALTY,
    SKILL_KNOWLEDGE_RELIGION,
    SKILL_KNOWLEDGE_PLANES,
    SKILL_LISTEN,
    SKILL_MOVE_SILENTLY,
    SKILL_OPEN_LOCK,
    SKILL_PERFORM,
    SKILL_PROFESSION,
    SKILL_RIDE,
    SKILL_SEARCH,
    SKILL_SENSE_MOTIVE,
    SKILL_SLEIGHT_OF_HAND,
    SKILL_SPEAK_LANGUAGE,
    SKILL_SPELLCRAFT,
    SKILL_SPOT,
    SKILL_SURVIVAL,
    SKILL_SWIM,
    SKILL_TUMBLE,
    SKILL_USE_MAGIC_DEVICE,
    SKILL_USE_ROPE
  };

  RPG_Common_Skill_XMLTree_Type (value v);

  RPG_Common_Skill_XMLTree_Type (const char* v);

  RPG_Common_Skill_XMLTree_Type (const ::std::string& v);

  RPG_Common_Skill_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_Skill_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Common_Skill_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Common_Skill_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Common_Skill_XMLTree_Type (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Common_Skill_XMLTree_Type (const RPG_Common_Skill_XMLTree_Type& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual RPG_Common_Skill_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_Skill_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_Skill_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_Skill_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_Skill_XMLTree_Type_literals_[56];
  static const value _xsd_RPG_Common_Skill_XMLTree_Type_indexes_[56];
};

class RPG_Common_PhysicalDamageType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    PHYSICALDAMAGE_NONE,
    PHYSICALDAMAGE_BLUDGEONING,
    PHYSICALDAMAGE_PIERCING,
    PHYSICALDAMAGE_SLASHING,
    PHYSICALDAMAGE_CONSTRICT
  };

  RPG_Common_PhysicalDamageType_XMLTree_Type (value v);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const char* v);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const ::std::string& v);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_PhysicalDamageType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_PhysicalDamageType_XMLTree_Type (const RPG_Common_PhysicalDamageType_XMLTree_Type& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  virtual RPG_Common_PhysicalDamageType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_PhysicalDamageType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_[5];
  static const value _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_indexes_[5];
};

class RPG_Common_ActionType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    ACTION_FREE,
    ACTION_FULLROUND,
    ACTION_MOVE,
    ACTION_NOTANACTION,
    ACTION_RESTRICTED,
    ACTION_STANDARD,
    ACTION_TIME
  };

  RPG_Common_ActionType_XMLTree_Type (value v);

  RPG_Common_ActionType_XMLTree_Type (const char* v);

  RPG_Common_ActionType_XMLTree_Type (const ::std::string& v);

  RPG_Common_ActionType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_ActionType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_ActionType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_ActionType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_ActionType_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_ActionType_XMLTree_Type (const RPG_Common_ActionType_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Common_ActionType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_ActionType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_ActionType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_ActionType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_ActionType_XMLTree_Type_literals_[7];
  static const value _xsd_RPG_Common_ActionType_XMLTree_Type_indexes_[7];
};

class RPG_Common_AreaOfEffect_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    AREA_CONE,
    AREA_CUBE,
    AREA_CYLINDER,
    AREA_LINE,
    AREA_SPHERE,
    AREA_WALL
  };

  RPG_Common_AreaOfEffect_XMLTree_Type (value v);

  RPG_Common_AreaOfEffect_XMLTree_Type (const char* v);

  RPG_Common_AreaOfEffect_XMLTree_Type (const ::std::string& v);

  RPG_Common_AreaOfEffect_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_AreaOfEffect_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Common_AreaOfEffect_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Common_AreaOfEffect_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Common_AreaOfEffect_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  RPG_Common_AreaOfEffect_XMLTree_Type (const RPG_Common_AreaOfEffect_XMLTree_Type& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

  virtual RPG_Common_AreaOfEffect_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_AreaOfEffect_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_[6];
  static const value _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_indexes_[6];
};

class RPG_Common_EffectType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    EFFECT_BATTLE,
    EFFECT_IMMEDIATE,
    EFFECT_PERMANENT,
    EFFECT_TEMPORARY
  };

  RPG_Common_EffectType_XMLTree_Type (value v);

  RPG_Common_EffectType_XMLTree_Type (const char* v);

  RPG_Common_EffectType_XMLTree_Type (const ::std::string& v);

  RPG_Common_EffectType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_EffectType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_EffectType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_EffectType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_EffectType_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  RPG_Common_EffectType_XMLTree_Type (const RPG_Common_EffectType_XMLTree_Type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual RPG_Common_EffectType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_EffectType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_EffectType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_EffectType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_EffectType_XMLTree_Type_literals_[4];
  static const value _xsd_RPG_Common_EffectType_XMLTree_Type_indexes_[4];
};

class RPG_Common_CounterMeasure_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    COUNTERMEASURE_CHECK,
    COUNTERMEASURE_SPELL
  };

  RPG_Common_CounterMeasure_XMLTree_Type (value v);

  RPG_Common_CounterMeasure_XMLTree_Type (const char* v);

  RPG_Common_CounterMeasure_XMLTree_Type (const ::std::string& v);

  RPG_Common_CounterMeasure_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_CounterMeasure_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Common_CounterMeasure_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Common_CounterMeasure_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Common_CounterMeasure_XMLTree_Type (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  RPG_Common_CounterMeasure_XMLTree_Type (const RPG_Common_CounterMeasure_XMLTree_Type& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

  virtual RPG_Common_CounterMeasure_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_CounterMeasure_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_[2];
  static const value _xsd_RPG_Common_CounterMeasure_XMLTree_Type_indexes_[2];
};

class RPG_Common_CheckType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    CHECK_CASTER_LEVEL,
    CHECK_GRAPPLE
  };

  RPG_Common_CheckType_XMLTree_Type (value v);

  RPG_Common_CheckType_XMLTree_Type (const char* v);

  RPG_Common_CheckType_XMLTree_Type (const ::std::string& v);

  RPG_Common_CheckType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_CheckType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_CheckType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_CheckType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_CheckType_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  RPG_Common_CheckType_XMLTree_Type (const RPG_Common_CheckType_XMLTree_Type& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

  virtual RPG_Common_CheckType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_CheckType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_CheckType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_CheckType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_CheckType_XMLTree_Type_literals_[2];
  static const value _xsd_RPG_Common_CheckType_XMLTree_Type_indexes_[2];
};

class RPG_Common_SavingThrow_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SAVE_NONE,
    SAVE_FORTITUDE,
    SAVE_MAGIC,
    SAVE_REFLEX,
    SAVE_WILL
  };

  RPG_Common_SavingThrow_XMLTree_Type (value v);

  RPG_Common_SavingThrow_XMLTree_Type (const char* v);

  RPG_Common_SavingThrow_XMLTree_Type (const ::std::string& v);

  RPG_Common_SavingThrow_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_SavingThrow_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Common_SavingThrow_XMLTree_Type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Common_SavingThrow_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Common_SavingThrow_XMLTree_Type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  RPG_Common_SavingThrow_XMLTree_Type (const RPG_Common_SavingThrow_XMLTree_Type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual RPG_Common_SavingThrow_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_SavingThrow_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_SavingThrow_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_SavingThrow_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_[5];
  static const value _xsd_RPG_Common_SavingThrow_XMLTree_Type_indexes_[5];
};

class RPG_Common_BaseCheckTypeUnion_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    CHECK_CASTER_LEVEL,
    CHECK_GRAPPLE,
    SAVE_NONE,
    SAVE_FORTITUDE,
    SAVE_MAGIC,
    SAVE_REFLEX,
    SAVE_WILL
  };

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (value v);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const char* v);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::std::string& v);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

  virtual RPG_Common_BaseCheckTypeUnion_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_BaseCheckTypeUnion_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_[7];
  static const value _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_indexes_[7];
};

class RPG_Common_SaveReductionType_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    SAVEREDUCTION_HALF,
    SAVEREDUCTION_NEGATES,
    SAVEREDUCTION_PARTIAL
  };

  RPG_Common_SaveReductionType_XMLTree_Type (value v);

  RPG_Common_SaveReductionType_XMLTree_Type (const char* v);

  RPG_Common_SaveReductionType_XMLTree_Type (const ::std::string& v);

  RPG_Common_SaveReductionType_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_SaveReductionType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Common_SaveReductionType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Common_SaveReductionType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Common_SaveReductionType_XMLTree_Type (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  RPG_Common_SaveReductionType_XMLTree_Type (const RPG_Common_SaveReductionType_XMLTree_Type& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

  virtual RPG_Common_SaveReductionType_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_SaveReductionType_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_[3];
  static const value _xsd_RPG_Common_SaveReductionType_XMLTree_Type_indexes_[3];
};

class RPG_Common_SavingThrowCheck_XMLTree_Type: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::RPG_Common_SavingThrow_XMLTree_Type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // attribute
  // 
  typedef ::RPG_Common_Attribute_XMLTree_Type attribute_type;
  typedef ::xsd::cxx::tree::optional< attribute_type > attribute_optional;
  typedef ::xsd::cxx::tree::traits< attribute_type, char > attribute_traits;

  const attribute_optional&
  attribute () const;

  attribute_optional&
  attribute ();

  void
  attribute (const attribute_type& x);

  void
  attribute (const attribute_optional& x);

  void
  attribute (::std::auto_ptr< attribute_type > p);

  // difficultyClass
  // 
  typedef ::xml_schema::unsigned_byte difficultyClass_type;
  typedef ::xsd::cxx::tree::traits< difficultyClass_type, char > difficultyClass_traits;

  const difficultyClass_type&
  difficultyClass () const;

  difficultyClass_type&
  difficultyClass ();

  void
  difficultyClass (const difficultyClass_type& x);

  // reduction
  // 
  typedef ::RPG_Common_SaveReductionType_XMLTree_Type reduction_type;
  typedef ::xsd::cxx::tree::traits< reduction_type, char > reduction_traits;

  const reduction_type&
  reduction () const;

  reduction_type&
  reduction ();

  void
  reduction (const reduction_type& x);

  void
  reduction (::std::auto_ptr< reduction_type > p);

  static const reduction_type&
  reduction_default_value ();

  // Constructors.
  //
  RPG_Common_SavingThrowCheck_XMLTree_Type (const type_type&,
                                            const difficultyClass_type&);

  RPG_Common_SavingThrowCheck_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Common_SavingThrowCheck_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  RPG_Common_SavingThrowCheck_XMLTree_Type (const RPG_Common_SavingThrowCheck_XMLTree_Type& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual RPG_Common_SavingThrowCheck_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Common_SavingThrowCheck_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< type_type > type_;
  attribute_optional attribute_;
  ::xsd::cxx::tree::one< difficultyClass_type > difficultyClass_;
  ::xsd::cxx::tree::one< reduction_type > reduction_;
  static const reduction_type reduction_default_value_;
};

bool
operator== (const RPG_Common_SavingThrowCheck_XMLTree_Type&, const RPG_Common_SavingThrowCheck_XMLTree_Type&);

bool
operator!= (const RPG_Common_SavingThrowCheck_XMLTree_Type&, const RPG_Common_SavingThrowCheck_XMLTree_Type&);


class RPG_Common_Amount_XMLTree_Type: public ::xml_schema::type
{
  public:
  // value
  // 
  typedef ::xml_schema::byte value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  // range
  // 
  typedef ::RPG_Dice_Roll_XMLTree_Type range_type;
  typedef ::xsd::cxx::tree::optional< range_type > range_optional;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_optional&
  range () const;

  range_optional&
  range ();

  void
  range (const range_type& x);

  void
  range (const range_optional& x);

  void
  range (::std::auto_ptr< range_type > p);

  // Constructors.
  //
  RPG_Common_Amount_XMLTree_Type ();

  RPG_Common_Amount_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Common_Amount_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  RPG_Common_Amount_XMLTree_Type (const RPG_Common_Amount_XMLTree_Type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual RPG_Common_Amount_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Common_Amount_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  value_optional value_;
  range_optional range_;
};

bool
operator== (const RPG_Common_Amount_XMLTree_Type&, const RPG_Common_Amount_XMLTree_Type&);

bool
operator!= (const RPG_Common_Amount_XMLTree_Type&, const RPG_Common_Amount_XMLTree_Type&);


class RPG_Common_Usage_XMLTree_Type: public ::xml_schema::type
{
  public:
  // numUses
  // 
  typedef ::xml_schema::unsigned_byte numUses_type;
  typedef ::xsd::cxx::tree::traits< numUses_type, char > numUses_traits;

  const numUses_type&
  numUses () const;

  numUses_type&
  numUses ();

  void
  numUses (const numUses_type& x);

  // period
  // 
  typedef ::xml_schema::unsigned_int period_type;
  typedef ::xsd::cxx::tree::optional< period_type > period_optional;
  typedef ::xsd::cxx::tree::traits< period_type, char > period_traits;

  const period_optional&
  period () const;

  period_optional&
  period ();

  void
  period (const period_type& x);

  void
  period (const period_optional& x);

  // interval
  // 
  typedef ::RPG_Dice_Roll_XMLTree_Type interval_type;
  typedef ::xsd::cxx::tree::optional< interval_type > interval_optional;
  typedef ::xsd::cxx::tree::traits< interval_type, char > interval_traits;

  const interval_optional&
  interval () const;

  interval_optional&
  interval ();

  void
  interval (const interval_type& x);

  void
  interval (const interval_optional& x);

  void
  interval (::std::auto_ptr< interval_type > p);

  // Constructors.
  //
  RPG_Common_Usage_XMLTree_Type (const numUses_type&);

  RPG_Common_Usage_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Common_Usage_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  RPG_Common_Usage_XMLTree_Type (const RPG_Common_Usage_XMLTree_Type& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual RPG_Common_Usage_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Common_Usage_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< numUses_type > numUses_;
  period_optional period_;
  interval_optional interval_;
};

bool
operator== (const RPG_Common_Usage_XMLTree_Type&, const RPG_Common_Usage_XMLTree_Type&);

bool
operator!= (const RPG_Common_Usage_XMLTree_Type&, const RPG_Common_Usage_XMLTree_Type&);


class RPG_Common_Duration_XMLTree_Type: public ::xml_schema::type
{
  public:
  // activation
  // 
  typedef ::xml_schema::unsigned_int activation_type;
  typedef ::xsd::cxx::tree::optional< activation_type > activation_optional;
  typedef ::xsd::cxx::tree::traits< activation_type, char > activation_traits;

  const activation_optional&
  activation () const;

  activation_optional&
  activation ();

  void
  activation (const activation_type& x);

  void
  activation (const activation_optional& x);

  // interval
  // 
  typedef ::xml_schema::unsigned_int interval_type;
  typedef ::xsd::cxx::tree::optional< interval_type > interval_optional;
  typedef ::xsd::cxx::tree::traits< interval_type, char > interval_traits;

  const interval_optional&
  interval () const;

  interval_optional&
  interval ();

  void
  interval (const interval_type& x);

  void
  interval (const interval_optional& x);

  // total
  // 
  typedef ::xml_schema::unsigned_int total_type;
  typedef ::xsd::cxx::tree::optional< total_type > total_optional;
  typedef ::xsd::cxx::tree::traits< total_type, char > total_traits;

  const total_optional&
  total () const;

  total_optional&
  total ();

  void
  total (const total_type& x);

  void
  total (const total_optional& x);

  // Constructors.
  //
  RPG_Common_Duration_XMLTree_Type ();

  RPG_Common_Duration_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Common_Duration_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  RPG_Common_Duration_XMLTree_Type (const RPG_Common_Duration_XMLTree_Type& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual RPG_Common_Duration_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RPG_Common_Duration_XMLTree_Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< ACE_InputCDR >&,
         ::xml_schema::flags);

  activation_optional activation_;
  interval_optional interval_;
  total_optional total_;
};

bool
operator== (const RPG_Common_Duration_XMLTree_Type&, const RPG_Common_Duration_XMLTree_Type&);

bool
operator!= (const RPG_Common_Duration_XMLTree_Type&, const RPG_Common_Duration_XMLTree_Type&);


class RPG_Common_Camp_XMLTree_Type: public ::xml_schema::string
{
  public:
  enum value
  {
    REST_FULL,
    REST_NORMAL
  };

  RPG_Common_Camp_XMLTree_Type (value v);

  RPG_Common_Camp_XMLTree_Type (const char* v);

  RPG_Common_Camp_XMLTree_Type (const ::std::string& v);

  RPG_Common_Camp_XMLTree_Type (const ::xml_schema::string& v);

  RPG_Common_Camp_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Camp_XMLTree_Type (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Camp_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Camp_XMLTree_Type (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  RPG_Common_Camp_XMLTree_Type (const RPG_Common_Camp_XMLTree_Type& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual RPG_Common_Camp_XMLTree_Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RPG_Common_Camp_XMLTree_Type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RPG_Common_Camp_XMLTree_Type_convert ();
  }

  protected:
  value
  _xsd_RPG_Common_Camp_XMLTree_Type_convert () const;

  public:
  static const char* const _xsd_RPG_Common_Camp_XMLTree_Type_literals_[2];
  static const value _xsd_RPG_Common_Camp_XMLTree_Type_indexes_[2];
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, RPG_Common_CreatureMetaType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_CreatureMetaType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_CreatureSubType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_CreatureSubType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_CreatureType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_SubClass_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_SubClass_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_Attribute_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Attribute_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_Size_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Size_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_Condition_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Condition_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_Skill_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Skill_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_PhysicalDamageType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_PhysicalDamageType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_ActionType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_ActionType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_AreaOfEffect_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_AreaOfEffect_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_EffectType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_EffectType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_CounterMeasure_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_CounterMeasure_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_CheckType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_CheckType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_SavingThrow_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_SavingThrow_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_BaseCheckTypeUnion_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_BaseCheckTypeUnion_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_SaveReductionType_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_SaveReductionType_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_SavingThrowCheck_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Amount_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Usage_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Duration_XMLTree_Type&);

::std::ostream&
operator<< (::std::ostream&, RPG_Common_Camp_XMLTree_Type::value);

::std::ostream&
operator<< (::std::ostream&, const RPG_Common_Camp_XMLTree_Type&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const RPG_Common_CreatureMetaType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_CreatureMetaType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_CreatureMetaType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_CreatureSubType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_CreatureSubType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_CreatureSubType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_CreatureType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_SubClass_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_SubClass_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_SubClass_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Attribute_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_Attribute_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_Attribute_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Size_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_Size_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_Size_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Condition_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_Condition_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_Condition_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Skill_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_Skill_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_Skill_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_PhysicalDamageType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_PhysicalDamageType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_PhysicalDamageType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_ActionType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_ActionType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_ActionType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_AreaOfEffect_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_AreaOfEffect_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_AreaOfEffect_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_EffectType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_EffectType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_EffectType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_CounterMeasure_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_CounterMeasure_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_CounterMeasure_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_CheckType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_CheckType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_CheckType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_SavingThrow_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_SavingThrow_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_SavingThrow_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_BaseCheckTypeUnion_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_BaseCheckTypeUnion_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_BaseCheckTypeUnion_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_SaveReductionType_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_SaveReductionType_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_SaveReductionType_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_SavingThrowCheck_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Amount_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Usage_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Duration_XMLTree_Type&);

void
operator<< (::xercesc::DOMElement&, const RPG_Common_Camp_XMLTree_Type&);

void
operator<< (::xercesc::DOMAttr&, const RPG_Common_Camp_XMLTree_Type&);

void
operator<< (::xml_schema::list_stream&,
            const RPG_Common_Camp_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_CreatureMetaType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_CreatureSubType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_CreatureType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_SubClass_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Attribute_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Size_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Condition_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Skill_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_PhysicalDamageType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_ActionType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_AreaOfEffect_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_EffectType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_CounterMeasure_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_CheckType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_SavingThrow_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_BaseCheckTypeUnion_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_SaveReductionType_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_SavingThrowCheck_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Amount_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Usage_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Duration_XMLTree_Type&);

::xml_schema::ostream< ACE_OutputCDR >&
operator<< (::xml_schema::ostream< ACE_OutputCDR >&,
            const RPG_Common_Camp_XMLTree_Type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___RPG_COMMON_XML_TREE_H
