// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_common_XML_tree.h"

// RPG_Common_CreatureMetaType_XMLTree_Type
// 

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_[v])
{
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const RPG_Common_CreatureMetaType_XMLTree_Type& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_CreatureMetaType_XMLTree_Type& RPG_Common_CreatureMetaType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_CreatureSubType_XMLTree_Type
// 

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_[v])
{
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const RPG_Common_CreatureSubType_XMLTree_Type& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_CreatureSubType_XMLTree_Type& RPG_Common_CreatureSubType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_CreatureType_XMLTree_Type
// 

const RPG_Common_CreatureType_XMLTree_Type::metaType_type& RPG_Common_CreatureType_XMLTree_Type::
metaType () const
{
  return this->metaType_.get ();
}

RPG_Common_CreatureType_XMLTree_Type::metaType_type& RPG_Common_CreatureType_XMLTree_Type::
metaType ()
{
  return this->metaType_.get ();
}

void RPG_Common_CreatureType_XMLTree_Type::
metaType (const metaType_type& x)
{
  this->metaType_.set (x);
}

void RPG_Common_CreatureType_XMLTree_Type::
metaType (::std::auto_ptr< metaType_type > x)
{
  this->metaType_.set (x);
}

const RPG_Common_CreatureType_XMLTree_Type::subType_sequence& RPG_Common_CreatureType_XMLTree_Type::
subType () const
{
  return this->subType_;
}

RPG_Common_CreatureType_XMLTree_Type::subType_sequence& RPG_Common_CreatureType_XMLTree_Type::
subType ()
{
  return this->subType_;
}

void RPG_Common_CreatureType_XMLTree_Type::
subType (const subType_sequence& s)
{
  this->subType_ = s;
}


// RPG_Common_SubClass_XMLTree_Type
// 

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_SubClass_XMLTree_Type_literals_[v])
{
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const RPG_Common_SubClass_XMLTree_Type& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_SubClass_XMLTree_Type& RPG_Common_SubClass_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_SubClass_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Attribute_XMLTree_Type
// 

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Attribute_XMLTree_Type_literals_[v])
{
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const RPG_Common_Attribute_XMLTree_Type& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Attribute_XMLTree_Type& RPG_Common_Attribute_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Attribute_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Size_XMLTree_Type
// 

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Size_XMLTree_Type_literals_[v])
{
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const RPG_Common_Size_XMLTree_Type& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Size_XMLTree_Type& RPG_Common_Size_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Size_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Condition_XMLTree_Type
// 

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Condition_XMLTree_Type_literals_[v])
{
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const RPG_Common_Condition_XMLTree_Type& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Condition_XMLTree_Type& RPG_Common_Condition_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Condition_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Skill_XMLTree_Type
// 

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Skill_XMLTree_Type_literals_[v])
{
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const RPG_Common_Skill_XMLTree_Type& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Skill_XMLTree_Type& RPG_Common_Skill_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Skill_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_PhysicalDamageType_XMLTree_Type
// 

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_[v])
{
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const RPG_Common_PhysicalDamageType_XMLTree_Type& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_PhysicalDamageType_XMLTree_Type& RPG_Common_PhysicalDamageType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_ActionType_XMLTree_Type
// 

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_ActionType_XMLTree_Type_literals_[v])
{
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const RPG_Common_ActionType_XMLTree_Type& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_ActionType_XMLTree_Type& RPG_Common_ActionType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_ActionType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_AreaOfEffect_XMLTree_Type
// 

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_[v])
{
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const RPG_Common_AreaOfEffect_XMLTree_Type& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_AreaOfEffect_XMLTree_Type& RPG_Common_AreaOfEffect_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_EffectType_XMLTree_Type
// 

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_EffectType_XMLTree_Type_literals_[v])
{
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const RPG_Common_EffectType_XMLTree_Type& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_EffectType_XMLTree_Type& RPG_Common_EffectType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_EffectType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_CounterMeasure_XMLTree_Type
// 

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_[v])
{
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const RPG_Common_CounterMeasure_XMLTree_Type& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_CounterMeasure_XMLTree_Type& RPG_Common_CounterMeasure_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_CheckType_XMLTree_Type
// 

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_CheckType_XMLTree_Type_literals_[v])
{
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const RPG_Common_CheckType_XMLTree_Type& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_CheckType_XMLTree_Type& RPG_Common_CheckType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_CheckType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_SavingThrow_XMLTree_Type
// 

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_[v])
{
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const RPG_Common_SavingThrow_XMLTree_Type& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_SavingThrow_XMLTree_Type& RPG_Common_SavingThrow_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_BaseCheckTypeUnion_XMLTree_Type
// 

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_[v])
{
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type& RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_SaveReductionType_XMLTree_Type
// 

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_[v])
{
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const RPG_Common_SaveReductionType_XMLTree_Type& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_SaveReductionType_XMLTree_Type& RPG_Common_SaveReductionType_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_SavingThrowCheck_XMLTree_Type
// 

const RPG_Common_SavingThrowCheck_XMLTree_Type::type_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
type () const
{
  return this->type_.get ();
}

RPG_Common_SavingThrowCheck_XMLTree_Type::type_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
type ()
{
  return this->type_.get ();
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
type (const type_type& x)
{
  this->type_.set (x);
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const RPG_Common_SavingThrowCheck_XMLTree_Type::attribute_optional& RPG_Common_SavingThrowCheck_XMLTree_Type::
attribute () const
{
  return this->attribute_;
}

RPG_Common_SavingThrowCheck_XMLTree_Type::attribute_optional& RPG_Common_SavingThrowCheck_XMLTree_Type::
attribute ()
{
  return this->attribute_;
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
attribute (const attribute_type& x)
{
  this->attribute_.set (x);
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
attribute (const attribute_optional& x)
{
  this->attribute_ = x;
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
attribute (::std::auto_ptr< attribute_type > x)
{
  this->attribute_.set (x);
}

const RPG_Common_SavingThrowCheck_XMLTree_Type::difficultyClass_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
difficultyClass () const
{
  return this->difficultyClass_.get ();
}

RPG_Common_SavingThrowCheck_XMLTree_Type::difficultyClass_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
difficultyClass ()
{
  return this->difficultyClass_.get ();
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
difficultyClass (const difficultyClass_type& x)
{
  this->difficultyClass_.set (x);
}

const RPG_Common_SavingThrowCheck_XMLTree_Type::reduction_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
reduction () const
{
  return this->reduction_.get ();
}

RPG_Common_SavingThrowCheck_XMLTree_Type::reduction_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
reduction ()
{
  return this->reduction_.get ();
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
reduction (const reduction_type& x)
{
  this->reduction_.set (x);
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
reduction (::std::auto_ptr< reduction_type > x)
{
  this->reduction_.set (x);
}

const RPG_Common_SavingThrowCheck_XMLTree_Type::reduction_type& RPG_Common_SavingThrowCheck_XMLTree_Type::
reduction_default_value ()
{
  return reduction_default_value_;
}


// RPG_Common_Amount_XMLTree_Type
// 

const RPG_Common_Amount_XMLTree_Type::value_optional& RPG_Common_Amount_XMLTree_Type::
value () const
{
  return this->value_;
}

RPG_Common_Amount_XMLTree_Type::value_optional& RPG_Common_Amount_XMLTree_Type::
value ()
{
  return this->value_;
}

void RPG_Common_Amount_XMLTree_Type::
value (const value_type& x)
{
  this->value_.set (x);
}

void RPG_Common_Amount_XMLTree_Type::
value (const value_optional& x)
{
  this->value_ = x;
}

const RPG_Common_Amount_XMLTree_Type::range_optional& RPG_Common_Amount_XMLTree_Type::
range () const
{
  return this->range_;
}

RPG_Common_Amount_XMLTree_Type::range_optional& RPG_Common_Amount_XMLTree_Type::
range ()
{
  return this->range_;
}

void RPG_Common_Amount_XMLTree_Type::
range (const range_type& x)
{
  this->range_.set (x);
}

void RPG_Common_Amount_XMLTree_Type::
range (const range_optional& x)
{
  this->range_ = x;
}

void RPG_Common_Amount_XMLTree_Type::
range (::std::auto_ptr< range_type > x)
{
  this->range_.set (x);
}


// RPG_Common_Usage_XMLTree_Type
// 

const RPG_Common_Usage_XMLTree_Type::numUses_type& RPG_Common_Usage_XMLTree_Type::
numUses () const
{
  return this->numUses_.get ();
}

RPG_Common_Usage_XMLTree_Type::numUses_type& RPG_Common_Usage_XMLTree_Type::
numUses ()
{
  return this->numUses_.get ();
}

void RPG_Common_Usage_XMLTree_Type::
numUses (const numUses_type& x)
{
  this->numUses_.set (x);
}

const RPG_Common_Usage_XMLTree_Type::period_optional& RPG_Common_Usage_XMLTree_Type::
period () const
{
  return this->period_;
}

RPG_Common_Usage_XMLTree_Type::period_optional& RPG_Common_Usage_XMLTree_Type::
period ()
{
  return this->period_;
}

void RPG_Common_Usage_XMLTree_Type::
period (const period_type& x)
{
  this->period_.set (x);
}

void RPG_Common_Usage_XMLTree_Type::
period (const period_optional& x)
{
  this->period_ = x;
}

const RPG_Common_Usage_XMLTree_Type::interval_optional& RPG_Common_Usage_XMLTree_Type::
interval () const
{
  return this->interval_;
}

RPG_Common_Usage_XMLTree_Type::interval_optional& RPG_Common_Usage_XMLTree_Type::
interval ()
{
  return this->interval_;
}

void RPG_Common_Usage_XMLTree_Type::
interval (const interval_type& x)
{
  this->interval_.set (x);
}

void RPG_Common_Usage_XMLTree_Type::
interval (const interval_optional& x)
{
  this->interval_ = x;
}

void RPG_Common_Usage_XMLTree_Type::
interval (::std::auto_ptr< interval_type > x)
{
  this->interval_.set (x);
}


// RPG_Common_Duration_XMLTree_Type
// 

const RPG_Common_Duration_XMLTree_Type::activation_optional& RPG_Common_Duration_XMLTree_Type::
activation () const
{
  return this->activation_;
}

RPG_Common_Duration_XMLTree_Type::activation_optional& RPG_Common_Duration_XMLTree_Type::
activation ()
{
  return this->activation_;
}

void RPG_Common_Duration_XMLTree_Type::
activation (const activation_type& x)
{
  this->activation_.set (x);
}

void RPG_Common_Duration_XMLTree_Type::
activation (const activation_optional& x)
{
  this->activation_ = x;
}

const RPG_Common_Duration_XMLTree_Type::interval_optional& RPG_Common_Duration_XMLTree_Type::
interval () const
{
  return this->interval_;
}

RPG_Common_Duration_XMLTree_Type::interval_optional& RPG_Common_Duration_XMLTree_Type::
interval ()
{
  return this->interval_;
}

void RPG_Common_Duration_XMLTree_Type::
interval (const interval_type& x)
{
  this->interval_.set (x);
}

void RPG_Common_Duration_XMLTree_Type::
interval (const interval_optional& x)
{
  this->interval_ = x;
}

const RPG_Common_Duration_XMLTree_Type::total_optional& RPG_Common_Duration_XMLTree_Type::
total () const
{
  return this->total_;
}

RPG_Common_Duration_XMLTree_Type::total_optional& RPG_Common_Duration_XMLTree_Type::
total ()
{
  return this->total_;
}

void RPG_Common_Duration_XMLTree_Type::
total (const total_type& x)
{
  this->total_.set (x);
}

void RPG_Common_Duration_XMLTree_Type::
total (const total_optional& x)
{
  this->total_ = x;
}


// RPG_Common_EffectDuration_XMLTree_Type
// 

const RPG_Common_EffectDuration_XMLTree_Type::base_optional& RPG_Common_EffectDuration_XMLTree_Type::
base () const
{
  return this->base_;
}

RPG_Common_EffectDuration_XMLTree_Type::base_optional& RPG_Common_EffectDuration_XMLTree_Type::
base ()
{
  return this->base_;
}

void RPG_Common_EffectDuration_XMLTree_Type::
base (const base_type& x)
{
  this->base_.set (x);
}

void RPG_Common_EffectDuration_XMLTree_Type::
base (const base_optional& x)
{
  this->base_ = x;
}

void RPG_Common_EffectDuration_XMLTree_Type::
base (::std::auto_ptr< base_type > x)
{
  this->base_.set (x);
}

const RPG_Common_EffectDuration_XMLTree_Type::levelIncrement_optional& RPG_Common_EffectDuration_XMLTree_Type::
levelIncrement () const
{
  return this->levelIncrement_;
}

RPG_Common_EffectDuration_XMLTree_Type::levelIncrement_optional& RPG_Common_EffectDuration_XMLTree_Type::
levelIncrement ()
{
  return this->levelIncrement_;
}

void RPG_Common_EffectDuration_XMLTree_Type::
levelIncrement (const levelIncrement_type& x)
{
  this->levelIncrement_.set (x);
}

void RPG_Common_EffectDuration_XMLTree_Type::
levelIncrement (const levelIncrement_optional& x)
{
  this->levelIncrement_ = x;
}

const RPG_Common_EffectDuration_XMLTree_Type::levelIncrementMax_optional& RPG_Common_EffectDuration_XMLTree_Type::
levelIncrementMax () const
{
  return this->levelIncrementMax_;
}

RPG_Common_EffectDuration_XMLTree_Type::levelIncrementMax_optional& RPG_Common_EffectDuration_XMLTree_Type::
levelIncrementMax ()
{
  return this->levelIncrementMax_;
}

void RPG_Common_EffectDuration_XMLTree_Type::
levelIncrementMax (const levelIncrementMax_type& x)
{
  this->levelIncrementMax_.set (x);
}

void RPG_Common_EffectDuration_XMLTree_Type::
levelIncrementMax (const levelIncrementMax_optional& x)
{
  this->levelIncrementMax_ = x;
}

const RPG_Common_EffectDuration_XMLTree_Type::reciprocalIncrement_type& RPG_Common_EffectDuration_XMLTree_Type::
reciprocalIncrement () const
{
  return this->reciprocalIncrement_.get ();
}

RPG_Common_EffectDuration_XMLTree_Type::reciprocalIncrement_type& RPG_Common_EffectDuration_XMLTree_Type::
reciprocalIncrement ()
{
  return this->reciprocalIncrement_.get ();
}

void RPG_Common_EffectDuration_XMLTree_Type::
reciprocalIncrement (const reciprocalIncrement_type& x)
{
  this->reciprocalIncrement_.set (x);
}

RPG_Common_EffectDuration_XMLTree_Type::reciprocalIncrement_type RPG_Common_EffectDuration_XMLTree_Type::
reciprocalIncrement_default_value ()
{
  return reciprocalIncrement_type (0);
}

const RPG_Common_EffectDuration_XMLTree_Type::isMaxDelay_type& RPG_Common_EffectDuration_XMLTree_Type::
isMaxDelay () const
{
  return this->isMaxDelay_.get ();
}

RPG_Common_EffectDuration_XMLTree_Type::isMaxDelay_type& RPG_Common_EffectDuration_XMLTree_Type::
isMaxDelay ()
{
  return this->isMaxDelay_.get ();
}

void RPG_Common_EffectDuration_XMLTree_Type::
isMaxDelay (const isMaxDelay_type& x)
{
  this->isMaxDelay_.set (x);
}

RPG_Common_EffectDuration_XMLTree_Type::isMaxDelay_type RPG_Common_EffectDuration_XMLTree_Type::
isMaxDelay_default_value ()
{
  return isMaxDelay_type (false);
}

const RPG_Common_EffectDuration_XMLTree_Type::incrementIsInHD_type& RPG_Common_EffectDuration_XMLTree_Type::
incrementIsInHD () const
{
  return this->incrementIsInHD_.get ();
}

RPG_Common_EffectDuration_XMLTree_Type::incrementIsInHD_type& RPG_Common_EffectDuration_XMLTree_Type::
incrementIsInHD ()
{
  return this->incrementIsInHD_.get ();
}

void RPG_Common_EffectDuration_XMLTree_Type::
incrementIsInHD (const incrementIsInHD_type& x)
{
  this->incrementIsInHD_.set (x);
}

RPG_Common_EffectDuration_XMLTree_Type::incrementIsInHD_type RPG_Common_EffectDuration_XMLTree_Type::
incrementIsInHD_default_value ()
{
  return incrementIsInHD_type (false);
}


// RPG_Common_Camp_XMLTree_Type
// 

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Camp_XMLTree_Type_literals_[v])
{
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const RPG_Common_Camp_XMLTree_Type& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Camp_XMLTree_Type& RPG_Common_Camp_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Camp_XMLTree_Type_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Common_CreatureMetaType_XMLTree_Type
//

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert ();
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert ();
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert ();
}

RPG_Common_CreatureMetaType_XMLTree_Type* RPG_Common_CreatureMetaType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_CreatureMetaType_XMLTree_Type (*this, f, c);
}

RPG_Common_CreatureMetaType_XMLTree_Type::value RPG_Common_CreatureMetaType_XMLTree_Type::
_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_indexes_ + 16,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_indexes_ + 16 || _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_CreatureMetaType_XMLTree_Type::
_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_[16] =
{
  "METATYPE_ANY",
  "METATYPE_ABERRATION",
  "METATYPE_ANIMAL",
  "METATYPE_CONSTRUCT",
  "METATYPE_DRAGON",
  "METATYPE_ELEMENTAL",
  "METATYPE_FEY",
  "METATYPE_GIANT",
  "METATYPE_HUMANOID",
  "METATYPE_MAGICAL_BEAST",
  "METATYPE_MONSTROUS_HUMANOID",
  "METATYPE_OOZE",
  "METATYPE_OUTSIDER",
  "METATYPE_PLANT",
  "METATYPE_UNDEAD",
  "METATYPE_VERMIN"
};

const RPG_Common_CreatureMetaType_XMLTree_Type::value RPG_Common_CreatureMetaType_XMLTree_Type::
_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_indexes_[16] =
{
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_ABERRATION,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_ANIMAL,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_ANY,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_CONSTRUCT,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_DRAGON,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_ELEMENTAL,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_FEY,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_GIANT,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_HUMANOID,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_MAGICAL_BEAST,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_MONSTROUS_HUMANOID,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_OOZE,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_OUTSIDER,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_PLANT,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_UNDEAD,
  ::RPG_Common_CreatureMetaType_XMLTree_Type::METATYPE_VERMIN
};

// RPG_Common_CreatureSubType_XMLTree_Type
//

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert ();
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert ();
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert ();
}

RPG_Common_CreatureSubType_XMLTree_Type* RPG_Common_CreatureSubType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_CreatureSubType_XMLTree_Type (*this, f, c);
}

RPG_Common_CreatureSubType_XMLTree_Type::value RPG_Common_CreatureSubType_XMLTree_Type::
_xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_CreatureSubType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_CreatureSubType_XMLTree_Type_indexes_ + 21,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_CreatureSubType_XMLTree_Type_indexes_ + 21 || _xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_CreatureSubType_XMLTree_Type::
_xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_[21] =
{
  "SUBTYPE_AIR",
  "SUBTYPE_ANGEL",
  "SUBTYPE_AQUATIC",
  "SUBTYPE_ARCHON",
  "SUBTYPE_AUGMENTED",
  "SUBTYPE_CHAOTIC",
  "SUBTYPE_COLD",
  "SUBTYPE_EARTH",
  "SUBTYPE_EVIL",
  "SUBTYPE_EXTRAPLANAR",
  "SUBTYPE_FIRE",
  "SUBTYPE_GOBLINOID",
  "SUBTYPE_GOOD",
  "SUBTYPE_INCORPOREAL",
  "SUBTYPE_LAWFUL",
  "SUBTYPE_NATIVE",
  "SUBTYPE_NEUTRAL",
  "SUBTYPE_REPTILIAN",
  "SUBTYPE_SHAPECHANGER",
  "SUBTYPE_SWARM",
  "SUBTYPE_WATER"
};

const RPG_Common_CreatureSubType_XMLTree_Type::value RPG_Common_CreatureSubType_XMLTree_Type::
_xsd_RPG_Common_CreatureSubType_XMLTree_Type_indexes_[21] =
{
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_AIR,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_ANGEL,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_AQUATIC,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_ARCHON,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_AUGMENTED,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_CHAOTIC,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_COLD,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_EARTH,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_EVIL,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_EXTRAPLANAR,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_FIRE,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_GOBLINOID,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_GOOD,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_INCORPOREAL,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_LAWFUL,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_NATIVE,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_NEUTRAL,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_REPTILIAN,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_SHAPECHANGER,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_SWARM,
  ::RPG_Common_CreatureSubType_XMLTree_Type::SUBTYPE_WATER
};

// RPG_Common_CreatureType_XMLTree_Type
//

RPG_Common_CreatureType_XMLTree_Type::
RPG_Common_CreatureType_XMLTree_Type (const metaType_type& metaType)
: ::xml_schema::type (),
  metaType_ (metaType, ::xml_schema::flags (), this),
  subType_ (::xml_schema::flags (), this)
{
}

RPG_Common_CreatureType_XMLTree_Type::
RPG_Common_CreatureType_XMLTree_Type (const RPG_Common_CreatureType_XMLTree_Type& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  metaType_ (x.metaType_, f, this),
  subType_ (x.subType_, f, this)
{
}

RPG_Common_CreatureType_XMLTree_Type::
RPG_Common_CreatureType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  metaType_ (f, this),
  subType_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Common_CreatureType_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // metaType
    //
    if (n.name () == "metaType" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< metaType_type > r (
        metaType_traits::create (i, f, this));

      if (!metaType_.present ())
      {
        this->metaType_.set (r);
        continue;
      }
    }

    // subType
    //
    if (n.name () == "subType" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< subType_type > r (
        subType_traits::create (i, f, this));

      this->subType_.push_back (r);
      continue;
    }

    break;
  }

  if (!metaType_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "metaType",
      "urn:rpg");
  }
}

RPG_Common_CreatureType_XMLTree_Type* RPG_Common_CreatureType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_CreatureType_XMLTree_Type (*this, f, c);
}

RPG_Common_CreatureType_XMLTree_Type::
~RPG_Common_CreatureType_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_CreatureType_XMLTree_Type& x, const RPG_Common_CreatureType_XMLTree_Type& y)
{
  if (!(x.metaType () == y.metaType ()))
    return false;

  if (!(x.subType () == y.subType ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_CreatureType_XMLTree_Type& x, const RPG_Common_CreatureType_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Common_SubClass_XMLTree_Type
//

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_SubClass_XMLTree_Type_convert ();
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_SubClass_XMLTree_Type_convert ();
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_SubClass_XMLTree_Type_convert ();
}

RPG_Common_SubClass_XMLTree_Type* RPG_Common_SubClass_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_SubClass_XMLTree_Type (*this, f, c);
}

RPG_Common_SubClass_XMLTree_Type::value RPG_Common_SubClass_XMLTree_Type::
_xsd_RPG_Common_SubClass_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_SubClass_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_SubClass_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_SubClass_XMLTree_Type_indexes_ + 17,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_SubClass_XMLTree_Type_indexes_ + 17 || _xsd_RPG_Common_SubClass_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_SubClass_XMLTree_Type::
_xsd_RPG_Common_SubClass_XMLTree_Type_literals_[17] =
{
  "SUBCLASS_NONE",
  "SUBCLASS_AVENGER",
  "SUBCLASS_BARBARIAN",
  "SUBCLASS_BARD",
  "SUBCLASS_CLERIC",
  "SUBCLASS_DRUID",
  "SUBCLASS_FIGHTER",
  "SUBCLASS_INVOKER",
  "SUBCLASS_MONK",
  "SUBCLASS_PALADIN",
  "SUBCLASS_RANGER",
  "SUBCLASS_SHAMAN",
  "SUBCLASS_SORCERER",
  "SUBCLASS_THIEF",
  "SUBCLASS_WARLOCK",
  "SUBCLASS_WARLORD",
  "SUBCLASS_WIZARD"
};

const RPG_Common_SubClass_XMLTree_Type::value RPG_Common_SubClass_XMLTree_Type::
_xsd_RPG_Common_SubClass_XMLTree_Type_indexes_[17] =
{
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_AVENGER,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_BARBARIAN,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_BARD,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_CLERIC,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_DRUID,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_FIGHTER,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_INVOKER,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_MONK,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_NONE,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_PALADIN,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_RANGER,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_SHAMAN,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_SORCERER,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_THIEF,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_WARLOCK,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_WARLORD,
  ::RPG_Common_SubClass_XMLTree_Type::SUBCLASS_WIZARD
};

// RPG_Common_Attribute_XMLTree_Type
//

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Attribute_XMLTree_Type_convert ();
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Attribute_XMLTree_Type_convert ();
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Attribute_XMLTree_Type_convert ();
}

RPG_Common_Attribute_XMLTree_Type* RPG_Common_Attribute_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Attribute_XMLTree_Type (*this, f, c);
}

RPG_Common_Attribute_XMLTree_Type::value RPG_Common_Attribute_XMLTree_Type::
_xsd_RPG_Common_Attribute_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Attribute_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Attribute_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Attribute_XMLTree_Type_indexes_ + 7,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Attribute_XMLTree_Type_indexes_ + 7 || _xsd_RPG_Common_Attribute_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Attribute_XMLTree_Type::
_xsd_RPG_Common_Attribute_XMLTree_Type_literals_[7] =
{
  "ATTRIBUTE_CHARISMA",
  "ATTRIBUTE_CONSTITUTION",
  "ATTRIBUTE_DEXTERITY",
  "ATTRIBUTE_INTELLIGENCE",
  "ATTRIBUTE_STRENGTH",
  "ATTRIBUTE_WISDOM",
  "ATTRIBUTE_ANY"
};

const RPG_Common_Attribute_XMLTree_Type::value RPG_Common_Attribute_XMLTree_Type::
_xsd_RPG_Common_Attribute_XMLTree_Type_indexes_[7] =
{
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_ANY,
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_CHARISMA,
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_CONSTITUTION,
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_DEXTERITY,
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_INTELLIGENCE,
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_STRENGTH,
  ::RPG_Common_Attribute_XMLTree_Type::ATTRIBUTE_WISDOM
};

// RPG_Common_Size_XMLTree_Type
//

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Size_XMLTree_Type_convert ();
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Size_XMLTree_Type_convert ();
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Size_XMLTree_Type_convert ();
}

RPG_Common_Size_XMLTree_Type* RPG_Common_Size_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Size_XMLTree_Type (*this, f, c);
}

RPG_Common_Size_XMLTree_Type::value RPG_Common_Size_XMLTree_Type::
_xsd_RPG_Common_Size_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Size_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Size_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Size_XMLTree_Type_indexes_ + 9,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Size_XMLTree_Type_indexes_ + 9 || _xsd_RPG_Common_Size_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Size_XMLTree_Type::
_xsd_RPG_Common_Size_XMLTree_Type_literals_[9] =
{
  "SIZE_FINE",
  "SIZE_DIMINUTIVE",
  "SIZE_TINY",
  "SIZE_SMALL",
  "SIZE_MEDIUM",
  "SIZE_LARGE",
  "SIZE_HUGE",
  "SIZE_GARGANTUAN",
  "SIZE_COLOSSAL"
};

const RPG_Common_Size_XMLTree_Type::value RPG_Common_Size_XMLTree_Type::
_xsd_RPG_Common_Size_XMLTree_Type_indexes_[9] =
{
  ::RPG_Common_Size_XMLTree_Type::SIZE_COLOSSAL,
  ::RPG_Common_Size_XMLTree_Type::SIZE_DIMINUTIVE,
  ::RPG_Common_Size_XMLTree_Type::SIZE_FINE,
  ::RPG_Common_Size_XMLTree_Type::SIZE_GARGANTUAN,
  ::RPG_Common_Size_XMLTree_Type::SIZE_HUGE,
  ::RPG_Common_Size_XMLTree_Type::SIZE_LARGE,
  ::RPG_Common_Size_XMLTree_Type::SIZE_MEDIUM,
  ::RPG_Common_Size_XMLTree_Type::SIZE_SMALL,
  ::RPG_Common_Size_XMLTree_Type::SIZE_TINY
};

// RPG_Common_Condition_XMLTree_Type
//

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Condition_XMLTree_Type_convert ();
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Condition_XMLTree_Type_convert ();
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Condition_XMLTree_Type_convert ();
}

RPG_Common_Condition_XMLTree_Type* RPG_Common_Condition_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Condition_XMLTree_Type (*this, f, c);
}

RPG_Common_Condition_XMLTree_Type::value RPG_Common_Condition_XMLTree_Type::
_xsd_RPG_Common_Condition_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Condition_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Condition_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Condition_XMLTree_Type_indexes_ + 43,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Condition_XMLTree_Type_indexes_ + 43 || _xsd_RPG_Common_Condition_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Condition_XMLTree_Type::
_xsd_RPG_Common_Condition_XMLTree_Type_literals_[43] =
{
  "CONDITION_ALTERNATE_FORM",
  "CONDITION_NORMAL",
  "CONDITION_ABILITY_DAMAGED",
  "CONDITION_ABILITY_DRAINED",
  "CONDITION_BLINDED",
  "CONDITION_BLOWN_AWAY",
  "CONDITION_BOUND",
  "CONDITION_CHECKED",
  "CONDITION_CONFUSED",
  "CONDITION_COWERING",
  "CONDITION_DAZED",
  "CONDITION_DAZZLED",
  "CONDITION_DEAD",
  "CONDITION_DEAFENED",
  "CONDITION_DISABLED",
  "CONDITION_DYING",
  "CONDITION_ENERGY_DRAINED",
  "CONDITION_ENTANGLED",
  "CONDITION_EXHAUSTED",
  "CONDITION_FASCINATED",
  "CONDITION_FATIGUED",
  "CONDITION_FLAT_FOOTED",
  "CONDITION_FRIGHTENED",
  "CONDITION_GRAPPLING",
  "CONDITION_HELD",
  "CONDITION_HELPLESS",
  "CONDITION_INCORPOREAL",
  "CONDITION_INVISIBLE",
  "CONDITION_KNOCKED_DOWN",
  "CONDITION_NAUSEATED",
  "CONDITION_PANICKED",
  "CONDITION_PARALYZED",
  "CONDITION_PETRIFIED",
  "CONDITION_PINNED",
  "CONDITION_PRONE",
  "CONDITION_SHAKEN",
  "CONDITION_SICKENED",
  "CONDITION_SLEEPING",
  "CONDITION_STABLE",
  "CONDITION_STAGGERED",
  "CONDITION_STUNNED",
  "CONDITION_TURNED",
  "CONDITION_UNCONSCIOUS"
};

const RPG_Common_Condition_XMLTree_Type::value RPG_Common_Condition_XMLTree_Type::
_xsd_RPG_Common_Condition_XMLTree_Type_indexes_[43] =
{
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_ABILITY_DAMAGED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_ABILITY_DRAINED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_ALTERNATE_FORM,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_BLINDED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_BLOWN_AWAY,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_BOUND,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_CHECKED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_CONFUSED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_COWERING,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_DAZED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_DAZZLED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_DEAD,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_DEAFENED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_DISABLED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_DYING,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_ENERGY_DRAINED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_ENTANGLED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_EXHAUSTED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_FASCINATED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_FATIGUED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_FLAT_FOOTED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_FRIGHTENED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_GRAPPLING,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_HELD,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_HELPLESS,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_INCORPOREAL,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_INVISIBLE,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_KNOCKED_DOWN,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_NAUSEATED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_NORMAL,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_PANICKED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_PARALYZED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_PETRIFIED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_PINNED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_PRONE,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_SHAKEN,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_SICKENED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_SLEEPING,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_STABLE,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_STAGGERED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_STUNNED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_TURNED,
  ::RPG_Common_Condition_XMLTree_Type::CONDITION_UNCONSCIOUS
};

// RPG_Common_Skill_XMLTree_Type
//

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Skill_XMLTree_Type_convert ();
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Skill_XMLTree_Type_convert ();
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Skill_XMLTree_Type_convert ();
}

RPG_Common_Skill_XMLTree_Type* RPG_Common_Skill_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Skill_XMLTree_Type (*this, f, c);
}

RPG_Common_Skill_XMLTree_Type::value RPG_Common_Skill_XMLTree_Type::
_xsd_RPG_Common_Skill_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Skill_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Skill_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Skill_XMLTree_Type_indexes_ + 56,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Skill_XMLTree_Type_indexes_ + 56 || _xsd_RPG_Common_Skill_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Skill_XMLTree_Type::
_xsd_RPG_Common_Skill_XMLTree_Type_literals_[56] =
{
  "SKILL_APPRAISE",
  "SKILL_BALANCE",
  "SKILL_BLUFF",
  "SKILL_CLIMB",
  "SKILL_CONCENTRATION",
  "SKILL_CRAFT_ANY",
  "SKILL_CRAFT_ALL",
  "SKILL_CRAFT_ALCHEMY",
  "SKILL_CRAFT_FLETCHER",
  "SKILL_CRAFT_BOWYER",
  "SKILL_CRAFT_SMITH_ARMOR",
  "SKILL_CRAFT_SMITH_BLACK",
  "SKILL_CRAFT_SMITH_WEAPON",
  "SKILL_CRAFT_TRAP",
  "SKILL_CRAFT_OTHER",
  "SKILL_DECIPHER_SCRIPT",
  "SKILL_DIPLOMACY",
  "SKILL_DISABLE_DEVICE",
  "SKILL_DISGUISE",
  "SKILL_ESCAPE_ARTIST",
  "SKILL_FORGERY",
  "SKILL_GATHER_INFORMATION",
  "SKILL_HANDLE_ANIMAL",
  "SKILL_HEAL",
  "SKILL_HIDE",
  "SKILL_INTIMIDATE",
  "SKILL_JUMP",
  "SKILL_KNOWLEDGE_ANY",
  "SKILL_KNOWLEDGE_ALL",
  "SKILL_KNOWLEDGE_ARCANA",
  "SKILL_KNOWLEDGE_ARCHITECTURE_ENGINEERING",
  "SKILL_KNOWLEDGE_DUNGEONS",
  "SKILL_KNOWLEDGE_GEOGRAPHY",
  "SKILL_KNOWLEDGE_HISTORY",
  "SKILL_KNOWLEDGE_LOCAL",
  "SKILL_KNOWLEDGE_NATURE",
  "SKILL_KNOWLEDGE_NOBILITY_ROYALTY",
  "SKILL_KNOWLEDGE_RELIGION",
  "SKILL_KNOWLEDGE_PLANES",
  "SKILL_LISTEN",
  "SKILL_MOVE_SILENTLY",
  "SKILL_OPEN_LOCK",
  "SKILL_PERFORM",
  "SKILL_PROFESSION",
  "SKILL_RIDE",
  "SKILL_SEARCH",
  "SKILL_SENSE_MOTIVE",
  "SKILL_SLEIGHT_OF_HAND",
  "SKILL_SPEAK_LANGUAGE",
  "SKILL_SPELLCRAFT",
  "SKILL_SPOT",
  "SKILL_SURVIVAL",
  "SKILL_SWIM",
  "SKILL_TUMBLE",
  "SKILL_USE_MAGIC_DEVICE",
  "SKILL_USE_ROPE"
};

const RPG_Common_Skill_XMLTree_Type::value RPG_Common_Skill_XMLTree_Type::
_xsd_RPG_Common_Skill_XMLTree_Type_indexes_[56] =
{
  ::RPG_Common_Skill_XMLTree_Type::SKILL_APPRAISE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_BALANCE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_BLUFF,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CLIMB,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CONCENTRATION,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_ALCHEMY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_ALL,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_ANY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_BOWYER,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_FLETCHER,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_OTHER,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_SMITH_ARMOR,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_SMITH_BLACK,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_SMITH_WEAPON,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_CRAFT_TRAP,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_DECIPHER_SCRIPT,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_DIPLOMACY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_DISABLE_DEVICE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_DISGUISE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_ESCAPE_ARTIST,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_FORGERY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_GATHER_INFORMATION,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_HANDLE_ANIMAL,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_HEAL,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_HIDE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_INTIMIDATE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_JUMP,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_ALL,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_ANY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_ARCANA,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_ARCHITECTURE_ENGINEERING,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_DUNGEONS,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_GEOGRAPHY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_HISTORY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_LOCAL,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_NATURE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_NOBILITY_ROYALTY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_PLANES,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_KNOWLEDGE_RELIGION,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_LISTEN,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_MOVE_SILENTLY,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_OPEN_LOCK,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_PERFORM,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_PROFESSION,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_RIDE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SEARCH,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SENSE_MOTIVE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SLEIGHT_OF_HAND,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SPEAK_LANGUAGE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SPELLCRAFT,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SPOT,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SURVIVAL,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_SWIM,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_TUMBLE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_USE_MAGIC_DEVICE,
  ::RPG_Common_Skill_XMLTree_Type::SKILL_USE_ROPE
};

// RPG_Common_PhysicalDamageType_XMLTree_Type
//

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert ();
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert ();
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert ();
}

RPG_Common_PhysicalDamageType_XMLTree_Type* RPG_Common_PhysicalDamageType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_PhysicalDamageType_XMLTree_Type (*this, f, c);
}

RPG_Common_PhysicalDamageType_XMLTree_Type::value RPG_Common_PhysicalDamageType_XMLTree_Type::
_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_indexes_ + 6,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_indexes_ + 6 || _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_PhysicalDamageType_XMLTree_Type::
_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_[6] =
{
  "PHYSICALDAMAGE_NONE",
  "PHYSICALDAMAGE_BLUDGEONING",
  "PHYSICALDAMAGE_PIERCING",
  "PHYSICALDAMAGE_SLASHING",
  "PHYSICALDAMAGE_CRUSHING",
  "PHYSICALDAMAGE_WITHERING"
};

const RPG_Common_PhysicalDamageType_XMLTree_Type::value RPG_Common_PhysicalDamageType_XMLTree_Type::
_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_indexes_[6] =
{
  ::RPG_Common_PhysicalDamageType_XMLTree_Type::PHYSICALDAMAGE_BLUDGEONING,
  ::RPG_Common_PhysicalDamageType_XMLTree_Type::PHYSICALDAMAGE_CRUSHING,
  ::RPG_Common_PhysicalDamageType_XMLTree_Type::PHYSICALDAMAGE_NONE,
  ::RPG_Common_PhysicalDamageType_XMLTree_Type::PHYSICALDAMAGE_PIERCING,
  ::RPG_Common_PhysicalDamageType_XMLTree_Type::PHYSICALDAMAGE_SLASHING,
  ::RPG_Common_PhysicalDamageType_XMLTree_Type::PHYSICALDAMAGE_WITHERING
};

// RPG_Common_ActionType_XMLTree_Type
//

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_ActionType_XMLTree_Type_convert ();
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_ActionType_XMLTree_Type_convert ();
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_ActionType_XMLTree_Type_convert ();
}

RPG_Common_ActionType_XMLTree_Type* RPG_Common_ActionType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_ActionType_XMLTree_Type (*this, f, c);
}

RPG_Common_ActionType_XMLTree_Type::value RPG_Common_ActionType_XMLTree_Type::
_xsd_RPG_Common_ActionType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_ActionType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_ActionType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_ActionType_XMLTree_Type_indexes_ + 7,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_ActionType_XMLTree_Type_indexes_ + 7 || _xsd_RPG_Common_ActionType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_ActionType_XMLTree_Type::
_xsd_RPG_Common_ActionType_XMLTree_Type_literals_[7] =
{
  "ACTION_FREE",
  "ACTION_FULLROUND",
  "ACTION_MOVE",
  "ACTION_NOTANACTION",
  "ACTION_RESTRICTED",
  "ACTION_STANDARD",
  "ACTION_TIME"
};

const RPG_Common_ActionType_XMLTree_Type::value RPG_Common_ActionType_XMLTree_Type::
_xsd_RPG_Common_ActionType_XMLTree_Type_indexes_[7] =
{
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_FREE,
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_FULLROUND,
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_MOVE,
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_NOTANACTION,
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_RESTRICTED,
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_STANDARD,
  ::RPG_Common_ActionType_XMLTree_Type::ACTION_TIME
};

// RPG_Common_AreaOfEffect_XMLTree_Type
//

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert ();
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert ();
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert ();
}

RPG_Common_AreaOfEffect_XMLTree_Type* RPG_Common_AreaOfEffect_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_AreaOfEffect_XMLTree_Type (*this, f, c);
}

RPG_Common_AreaOfEffect_XMLTree_Type::value RPG_Common_AreaOfEffect_XMLTree_Type::
_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_indexes_ + 8,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_indexes_ + 8 || _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_AreaOfEffect_XMLTree_Type::
_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_[8] =
{
  "AREA_CONE",
  "AREA_CUBE",
  "AREA_CYLINDER",
  "AREA_LINE_HORIZONTAL",
  "AREA_LINE_VERTICAL",
  "AREA_RING",
  "AREA_SPHERE",
  "AREA_WALL"
};

const RPG_Common_AreaOfEffect_XMLTree_Type::value RPG_Common_AreaOfEffect_XMLTree_Type::
_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_indexes_[8] =
{
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_CONE,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_CUBE,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_CYLINDER,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_LINE_HORIZONTAL,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_LINE_VERTICAL,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_RING,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_SPHERE,
  ::RPG_Common_AreaOfEffect_XMLTree_Type::AREA_WALL
};

// RPG_Common_EffectType_XMLTree_Type
//

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_EffectType_XMLTree_Type_convert ();
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_EffectType_XMLTree_Type_convert ();
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_EffectType_XMLTree_Type_convert ();
}

RPG_Common_EffectType_XMLTree_Type* RPG_Common_EffectType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_EffectType_XMLTree_Type (*this, f, c);
}

RPG_Common_EffectType_XMLTree_Type::value RPG_Common_EffectType_XMLTree_Type::
_xsd_RPG_Common_EffectType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_EffectType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_EffectType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_EffectType_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_EffectType_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Common_EffectType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_EffectType_XMLTree_Type::
_xsd_RPG_Common_EffectType_XMLTree_Type_literals_[4] =
{
  "EFFECT_BATTLE",
  "EFFECT_IMMEDIATE",
  "EFFECT_PERMANENT",
  "EFFECT_TEMPORARY"
};

const RPG_Common_EffectType_XMLTree_Type::value RPG_Common_EffectType_XMLTree_Type::
_xsd_RPG_Common_EffectType_XMLTree_Type_indexes_[4] =
{
  ::RPG_Common_EffectType_XMLTree_Type::EFFECT_BATTLE,
  ::RPG_Common_EffectType_XMLTree_Type::EFFECT_IMMEDIATE,
  ::RPG_Common_EffectType_XMLTree_Type::EFFECT_PERMANENT,
  ::RPG_Common_EffectType_XMLTree_Type::EFFECT_TEMPORARY
};

// RPG_Common_CounterMeasure_XMLTree_Type
//

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert ();
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert ();
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert ();
}

RPG_Common_CounterMeasure_XMLTree_Type* RPG_Common_CounterMeasure_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_CounterMeasure_XMLTree_Type (*this, f, c);
}

RPG_Common_CounterMeasure_XMLTree_Type::value RPG_Common_CounterMeasure_XMLTree_Type::
_xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_CounterMeasure_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_CounterMeasure_XMLTree_Type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_CounterMeasure_XMLTree_Type_indexes_ + 2 || _xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_CounterMeasure_XMLTree_Type::
_xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_[2] =
{
  "COUNTERMEASURE_CHECK",
  "COUNTERMEASURE_SPELL"
};

const RPG_Common_CounterMeasure_XMLTree_Type::value RPG_Common_CounterMeasure_XMLTree_Type::
_xsd_RPG_Common_CounterMeasure_XMLTree_Type_indexes_[2] =
{
  ::RPG_Common_CounterMeasure_XMLTree_Type::COUNTERMEASURE_CHECK,
  ::RPG_Common_CounterMeasure_XMLTree_Type::COUNTERMEASURE_SPELL
};

// RPG_Common_CheckType_XMLTree_Type
//

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_CheckType_XMLTree_Type_convert ();
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_CheckType_XMLTree_Type_convert ();
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_CheckType_XMLTree_Type_convert ();
}

RPG_Common_CheckType_XMLTree_Type* RPG_Common_CheckType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_CheckType_XMLTree_Type (*this, f, c);
}

RPG_Common_CheckType_XMLTree_Type::value RPG_Common_CheckType_XMLTree_Type::
_xsd_RPG_Common_CheckType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_CheckType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_CheckType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_CheckType_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_CheckType_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Common_CheckType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_CheckType_XMLTree_Type::
_xsd_RPG_Common_CheckType_XMLTree_Type_literals_[3] =
{
  "CHECK_CASTER_LEVEL",
  "CHECK_GRAPPLE",
  "CHECK_HIT_DICE"
};

const RPG_Common_CheckType_XMLTree_Type::value RPG_Common_CheckType_XMLTree_Type::
_xsd_RPG_Common_CheckType_XMLTree_Type_indexes_[3] =
{
  ::RPG_Common_CheckType_XMLTree_Type::CHECK_CASTER_LEVEL,
  ::RPG_Common_CheckType_XMLTree_Type::CHECK_GRAPPLE,
  ::RPG_Common_CheckType_XMLTree_Type::CHECK_HIT_DICE
};

// RPG_Common_SavingThrow_XMLTree_Type
//

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_SavingThrow_XMLTree_Type_convert ();
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_SavingThrow_XMLTree_Type_convert ();
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_SavingThrow_XMLTree_Type_convert ();
}

RPG_Common_SavingThrow_XMLTree_Type* RPG_Common_SavingThrow_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_SavingThrow_XMLTree_Type (*this, f, c);
}

RPG_Common_SavingThrow_XMLTree_Type::value RPG_Common_SavingThrow_XMLTree_Type::
_xsd_RPG_Common_SavingThrow_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_SavingThrow_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_SavingThrow_XMLTree_Type_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_SavingThrow_XMLTree_Type_indexes_ + 5 || _xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_SavingThrow_XMLTree_Type::
_xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_[5] =
{
  "SAVE_NONE",
  "SAVE_FORTITUDE",
  "SAVE_MAGIC",
  "SAVE_REFLEX",
  "SAVE_WILL"
};

const RPG_Common_SavingThrow_XMLTree_Type::value RPG_Common_SavingThrow_XMLTree_Type::
_xsd_RPG_Common_SavingThrow_XMLTree_Type_indexes_[5] =
{
  ::RPG_Common_SavingThrow_XMLTree_Type::SAVE_FORTITUDE,
  ::RPG_Common_SavingThrow_XMLTree_Type::SAVE_MAGIC,
  ::RPG_Common_SavingThrow_XMLTree_Type::SAVE_NONE,
  ::RPG_Common_SavingThrow_XMLTree_Type::SAVE_REFLEX,
  ::RPG_Common_SavingThrow_XMLTree_Type::SAVE_WILL
};

// RPG_Common_BaseCheckTypeUnion_XMLTree_Type
//

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type* RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_BaseCheckTypeUnion_XMLTree_Type (*this, f, c);
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::value RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_indexes_ + 8,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_indexes_ + 8 || _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_[8] =
{
  "CHECK_CASTER_LEVEL",
  "CHECK_GRAPPLE",
  "CHECK_HIT_DICE",
  "SAVE_NONE",
  "SAVE_FORTITUDE",
  "SAVE_MAGIC",
  "SAVE_REFLEX",
  "SAVE_WILL"
};

const RPG_Common_BaseCheckTypeUnion_XMLTree_Type::value RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_indexes_[8] =
{
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::CHECK_CASTER_LEVEL,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::CHECK_GRAPPLE,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::CHECK_HIT_DICE,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::SAVE_FORTITUDE,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::SAVE_MAGIC,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::SAVE_NONE,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::SAVE_REFLEX,
  ::RPG_Common_BaseCheckTypeUnion_XMLTree_Type::SAVE_WILL
};

// RPG_Common_SaveReductionType_XMLTree_Type
//

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert ();
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert ();
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert ();
}

RPG_Common_SaveReductionType_XMLTree_Type* RPG_Common_SaveReductionType_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_SaveReductionType_XMLTree_Type (*this, f, c);
}

RPG_Common_SaveReductionType_XMLTree_Type::value RPG_Common_SaveReductionType_XMLTree_Type::
_xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_SaveReductionType_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_SaveReductionType_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_SaveReductionType_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_SaveReductionType_XMLTree_Type::
_xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_[3] =
{
  "SAVEREDUCTION_HALF",
  "SAVEREDUCTION_NEGATES",
  "SAVEREDUCTION_PARTIAL"
};

const RPG_Common_SaveReductionType_XMLTree_Type::value RPG_Common_SaveReductionType_XMLTree_Type::
_xsd_RPG_Common_SaveReductionType_XMLTree_Type_indexes_[3] =
{
  ::RPG_Common_SaveReductionType_XMLTree_Type::SAVEREDUCTION_HALF,
  ::RPG_Common_SaveReductionType_XMLTree_Type::SAVEREDUCTION_NEGATES,
  ::RPG_Common_SaveReductionType_XMLTree_Type::SAVEREDUCTION_PARTIAL
};

// RPG_Common_SavingThrowCheck_XMLTree_Type
//

const RPG_Common_SavingThrowCheck_XMLTree_Type::reduction_type RPG_Common_SavingThrowCheck_XMLTree_Type::reduction_default_value_ (
  "SAVEREDUCTION_NEGATES");

RPG_Common_SavingThrowCheck_XMLTree_Type::
RPG_Common_SavingThrowCheck_XMLTree_Type (const type_type& type,
                                          const difficultyClass_type& difficultyClass)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  attribute_ (::xml_schema::flags (), this),
  difficultyClass_ (difficultyClass, ::xml_schema::flags (), this),
  reduction_ (reduction_default_value (), ::xml_schema::flags (), this)
{
}

RPG_Common_SavingThrowCheck_XMLTree_Type::
RPG_Common_SavingThrowCheck_XMLTree_Type (const RPG_Common_SavingThrowCheck_XMLTree_Type& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  attribute_ (x.attribute_, f, this),
  difficultyClass_ (x.difficultyClass_, f, this),
  reduction_ (x.reduction_, f, this)
{
}

RPG_Common_SavingThrowCheck_XMLTree_Type::
RPG_Common_SavingThrowCheck_XMLTree_Type (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  attribute_ (f, this),
  difficultyClass_ (f, this),
  reduction_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // attribute
    //
    if (n.name () == "attribute" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< attribute_type > r (
        attribute_traits::create (i, f, this));

      if (!this->attribute_)
      {
        this->attribute_.set (r);
        continue;
      }
    }

    // difficultyClass
    //
    if (n.name () == "difficultyClass" && n.namespace_ () == "urn:rpg")
    {
      if (!difficultyClass_.present ())
      {
        this->difficultyClass_.set (difficultyClass_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "urn:rpg");
  }

  if (!difficultyClass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "difficultyClass",
      "urn:rpg");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "reduction" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< reduction_type > r (
        reduction_traits::create (i, f, this));

      this->reduction_.set (r);
      continue;
    }
  }

  if (!reduction_.present ())
  {
    this->reduction_.set (reduction_default_value ());
  }
}

RPG_Common_SavingThrowCheck_XMLTree_Type* RPG_Common_SavingThrowCheck_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_SavingThrowCheck_XMLTree_Type (*this, f, c);
}

RPG_Common_SavingThrowCheck_XMLTree_Type::
~RPG_Common_SavingThrowCheck_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_SavingThrowCheck_XMLTree_Type& x, const RPG_Common_SavingThrowCheck_XMLTree_Type& y)
{
  if (!(x.type () == y.type ()))
    return false;

  if (!(x.attribute () == y.attribute ()))
    return false;

  if (!(x.difficultyClass () == y.difficultyClass ()))
    return false;

  if (!(x.reduction () == y.reduction ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_SavingThrowCheck_XMLTree_Type& x, const RPG_Common_SavingThrowCheck_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Common_Amount_XMLTree_Type
//

RPG_Common_Amount_XMLTree_Type::
RPG_Common_Amount_XMLTree_Type ()
: ::xml_schema::type (),
  value_ (::xml_schema::flags (), this),
  range_ (::xml_schema::flags (), this)
{
}

RPG_Common_Amount_XMLTree_Type::
RPG_Common_Amount_XMLTree_Type (const RPG_Common_Amount_XMLTree_Type& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  value_ (x.value_, f, this),
  range_ (x.range_, f, this)
{
}

RPG_Common_Amount_XMLTree_Type::
RPG_Common_Amount_XMLTree_Type (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  value_ (f, this),
  range_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Common_Amount_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // value
    //
    if (n.name () == "value" && n.namespace_ () == "urn:rpg")
    {
      if (!this->value_)
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    // range
    //
    if (n.name () == "range" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< range_type > r (
        range_traits::create (i, f, this));

      if (!this->range_)
      {
        this->range_.set (r);
        continue;
      }
    }

    break;
  }
}

RPG_Common_Amount_XMLTree_Type* RPG_Common_Amount_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Amount_XMLTree_Type (*this, f, c);
}

RPG_Common_Amount_XMLTree_Type::
~RPG_Common_Amount_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_Amount_XMLTree_Type& x, const RPG_Common_Amount_XMLTree_Type& y)
{
  if (!(x.value () == y.value ()))
    return false;

  if (!(x.range () == y.range ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_Amount_XMLTree_Type& x, const RPG_Common_Amount_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Common_Usage_XMLTree_Type
//

RPG_Common_Usage_XMLTree_Type::
RPG_Common_Usage_XMLTree_Type (const numUses_type& numUses)
: ::xml_schema::type (),
  numUses_ (numUses, ::xml_schema::flags (), this),
  period_ (::xml_schema::flags (), this),
  interval_ (::xml_schema::flags (), this)
{
}

RPG_Common_Usage_XMLTree_Type::
RPG_Common_Usage_XMLTree_Type (const RPG_Common_Usage_XMLTree_Type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  numUses_ (x.numUses_, f, this),
  period_ (x.period_, f, this),
  interval_ (x.interval_, f, this)
{
}

RPG_Common_Usage_XMLTree_Type::
RPG_Common_Usage_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  numUses_ (f, this),
  period_ (f, this),
  interval_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Common_Usage_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // numUses
    //
    if (n.name () == "numUses" && n.namespace_ () == "urn:rpg")
    {
      if (!numUses_.present ())
      {
        this->numUses_.set (numUses_traits::create (i, f, this));
        continue;
      }
    }

    // period
    //
    if (n.name () == "period" && n.namespace_ () == "urn:rpg")
    {
      if (!this->period_)
      {
        this->period_.set (period_traits::create (i, f, this));
        continue;
      }
    }

    // interval
    //
    if (n.name () == "interval" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< interval_type > r (
        interval_traits::create (i, f, this));

      if (!this->interval_)
      {
        this->interval_.set (r);
        continue;
      }
    }

    break;
  }

  if (!numUses_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "numUses",
      "urn:rpg");
  }
}

RPG_Common_Usage_XMLTree_Type* RPG_Common_Usage_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Usage_XMLTree_Type (*this, f, c);
}

RPG_Common_Usage_XMLTree_Type::
~RPG_Common_Usage_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_Usage_XMLTree_Type& x, const RPG_Common_Usage_XMLTree_Type& y)
{
  if (!(x.numUses () == y.numUses ()))
    return false;

  if (!(x.period () == y.period ()))
    return false;

  if (!(x.interval () == y.interval ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_Usage_XMLTree_Type& x, const RPG_Common_Usage_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Common_Duration_XMLTree_Type
//

RPG_Common_Duration_XMLTree_Type::
RPG_Common_Duration_XMLTree_Type ()
: ::xml_schema::type (),
  activation_ (::xml_schema::flags (), this),
  interval_ (::xml_schema::flags (), this),
  total_ (::xml_schema::flags (), this)
{
}

RPG_Common_Duration_XMLTree_Type::
RPG_Common_Duration_XMLTree_Type (const RPG_Common_Duration_XMLTree_Type& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  activation_ (x.activation_, f, this),
  interval_ (x.interval_, f, this),
  total_ (x.total_, f, this)
{
}

RPG_Common_Duration_XMLTree_Type::
RPG_Common_Duration_XMLTree_Type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  activation_ (f, this),
  interval_ (f, this),
  total_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void RPG_Common_Duration_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // activation
    //
    if (n.name () == "activation" && n.namespace_ () == "urn:rpg")
    {
      if (!this->activation_)
      {
        this->activation_.set (activation_traits::create (i, f, this));
        continue;
      }
    }

    // interval
    //
    if (n.name () == "interval" && n.namespace_ () == "urn:rpg")
    {
      if (!this->interval_)
      {
        this->interval_.set (interval_traits::create (i, f, this));
        continue;
      }
    }

    // total
    //
    if (n.name () == "total" && n.namespace_ () == "urn:rpg")
    {
      if (!this->total_)
      {
        this->total_.set (total_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

RPG_Common_Duration_XMLTree_Type* RPG_Common_Duration_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Duration_XMLTree_Type (*this, f, c);
}

RPG_Common_Duration_XMLTree_Type::
~RPG_Common_Duration_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_Duration_XMLTree_Type& x, const RPG_Common_Duration_XMLTree_Type& y)
{
  if (!(x.activation () == y.activation ()))
    return false;

  if (!(x.interval () == y.interval ()))
    return false;

  if (!(x.total () == y.total ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_Duration_XMLTree_Type& x, const RPG_Common_Duration_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Common_EffectDuration_XMLTree_Type
//

RPG_Common_EffectDuration_XMLTree_Type::
RPG_Common_EffectDuration_XMLTree_Type ()
: ::xml_schema::type (),
  base_ (::xml_schema::flags (), this),
  levelIncrement_ (::xml_schema::flags (), this),
  levelIncrementMax_ (::xml_schema::flags (), this),
  reciprocalIncrement_ (reciprocalIncrement_default_value (), ::xml_schema::flags (), this),
  isMaxDelay_ (isMaxDelay_default_value (), ::xml_schema::flags (), this),
  incrementIsInHD_ (incrementIsInHD_default_value (), ::xml_schema::flags (), this)
{
}

RPG_Common_EffectDuration_XMLTree_Type::
RPG_Common_EffectDuration_XMLTree_Type (const RPG_Common_EffectDuration_XMLTree_Type& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  base_ (x.base_, f, this),
  levelIncrement_ (x.levelIncrement_, f, this),
  levelIncrementMax_ (x.levelIncrementMax_, f, this),
  reciprocalIncrement_ (x.reciprocalIncrement_, f, this),
  isMaxDelay_ (x.isMaxDelay_, f, this),
  incrementIsInHD_ (x.incrementIsInHD_, f, this)
{
}

RPG_Common_EffectDuration_XMLTree_Type::
RPG_Common_EffectDuration_XMLTree_Type (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  base_ (f, this),
  levelIncrement_ (f, this),
  levelIncrementMax_ (f, this),
  reciprocalIncrement_ (f, this),
  isMaxDelay_ (f, this),
  incrementIsInHD_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void RPG_Common_EffectDuration_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // base
    //
    if (n.name () == "base" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< base_type > r (
        base_traits::create (i, f, this));

      if (!this->base_)
      {
        this->base_.set (r);
        continue;
      }
    }

    // levelIncrement
    //
    if (n.name () == "levelIncrement" && n.namespace_ () == "urn:rpg")
    {
      if (!this->levelIncrement_)
      {
        this->levelIncrement_.set (levelIncrement_traits::create (i, f, this));
        continue;
      }
    }

    // levelIncrementMax
    //
    if (n.name () == "levelIncrementMax" && n.namespace_ () == "urn:rpg")
    {
      if (!this->levelIncrementMax_)
      {
        this->levelIncrementMax_.set (levelIncrementMax_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "reciprocalIncrement" && n.namespace_ ().empty ())
    {
      this->reciprocalIncrement_.set (reciprocalIncrement_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "isMaxDelay" && n.namespace_ ().empty ())
    {
      this->isMaxDelay_.set (isMaxDelay_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "incrementIsInHD" && n.namespace_ ().empty ())
    {
      this->incrementIsInHD_.set (incrementIsInHD_traits::create (i, f, this));
      continue;
    }
  }

  if (!reciprocalIncrement_.present ())
  {
    this->reciprocalIncrement_.set (reciprocalIncrement_default_value ());
  }

  if (!isMaxDelay_.present ())
  {
    this->isMaxDelay_.set (isMaxDelay_default_value ());
  }

  if (!incrementIsInHD_.present ())
  {
    this->incrementIsInHD_.set (incrementIsInHD_default_value ());
  }
}

RPG_Common_EffectDuration_XMLTree_Type* RPG_Common_EffectDuration_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_EffectDuration_XMLTree_Type (*this, f, c);
}

RPG_Common_EffectDuration_XMLTree_Type::
~RPG_Common_EffectDuration_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_EffectDuration_XMLTree_Type& x, const RPG_Common_EffectDuration_XMLTree_Type& y)
{
  if (!(x.base () == y.base ()))
    return false;

  if (!(x.levelIncrement () == y.levelIncrement ()))
    return false;

  if (!(x.levelIncrementMax () == y.levelIncrementMax ()))
    return false;

  if (!(x.reciprocalIncrement () == y.reciprocalIncrement ()))
    return false;

  if (!(x.isMaxDelay () == y.isMaxDelay ()))
    return false;

  if (!(x.incrementIsInHD () == y.incrementIsInHD ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_EffectDuration_XMLTree_Type& x, const RPG_Common_EffectDuration_XMLTree_Type& y)
{
  return !(x == y);
}

// RPG_Common_Camp_XMLTree_Type
//

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Camp_XMLTree_Type_convert ();
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Camp_XMLTree_Type_convert ();
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Camp_XMLTree_Type_convert ();
}

RPG_Common_Camp_XMLTree_Type* RPG_Common_Camp_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Camp_XMLTree_Type (*this, f, c);
}

RPG_Common_Camp_XMLTree_Type::value RPG_Common_Camp_XMLTree_Type::
_xsd_RPG_Common_Camp_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Camp_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Camp_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Camp_XMLTree_Type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Camp_XMLTree_Type_indexes_ + 2 || _xsd_RPG_Common_Camp_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Camp_XMLTree_Type::
_xsd_RPG_Common_Camp_XMLTree_Type_literals_[2] =
{
  "REST_FULL",
  "REST_NORMAL"
};

const RPG_Common_Camp_XMLTree_Type::value RPG_Common_Camp_XMLTree_Type::
_xsd_RPG_Common_Camp_XMLTree_Type_indexes_[2] =
{
  ::RPG_Common_Camp_XMLTree_Type::REST_FULL,
  ::RPG_Common_Camp_XMLTree_Type::REST_NORMAL
};

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_CreatureMetaType_XMLTree_Type::value i)
{
  return o << RPG_Common_CreatureMetaType_XMLTree_Type::_xsd_RPG_Common_CreatureMetaType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_CreatureMetaType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_CreatureSubType_XMLTree_Type::value i)
{
  return o << RPG_Common_CreatureSubType_XMLTree_Type::_xsd_RPG_Common_CreatureSubType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_CreatureSubType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_CreatureType_XMLTree_Type& i)
{
  o << ::std::endl << "metaType: " << i.metaType ();
  for (RPG_Common_CreatureType_XMLTree_Type::subType_const_iterator
       b (i.subType ().begin ()), e (i.subType ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "subType: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_SubClass_XMLTree_Type::value i)
{
  return o << RPG_Common_SubClass_XMLTree_Type::_xsd_RPG_Common_SubClass_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_SubClass_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Attribute_XMLTree_Type::value i)
{
  return o << RPG_Common_Attribute_XMLTree_Type::_xsd_RPG_Common_Attribute_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Attribute_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Size_XMLTree_Type::value i)
{
  return o << RPG_Common_Size_XMLTree_Type::_xsd_RPG_Common_Size_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Size_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Condition_XMLTree_Type::value i)
{
  return o << RPG_Common_Condition_XMLTree_Type::_xsd_RPG_Common_Condition_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Condition_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Skill_XMLTree_Type::value i)
{
  return o << RPG_Common_Skill_XMLTree_Type::_xsd_RPG_Common_Skill_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Skill_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_PhysicalDamageType_XMLTree_Type::value i)
{
  return o << RPG_Common_PhysicalDamageType_XMLTree_Type::_xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_PhysicalDamageType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_ActionType_XMLTree_Type::value i)
{
  return o << RPG_Common_ActionType_XMLTree_Type::_xsd_RPG_Common_ActionType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_ActionType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_AreaOfEffect_XMLTree_Type::value i)
{
  return o << RPG_Common_AreaOfEffect_XMLTree_Type::_xsd_RPG_Common_AreaOfEffect_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_AreaOfEffect_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_EffectType_XMLTree_Type::value i)
{
  return o << RPG_Common_EffectType_XMLTree_Type::_xsd_RPG_Common_EffectType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_EffectType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_CounterMeasure_XMLTree_Type::value i)
{
  return o << RPG_Common_CounterMeasure_XMLTree_Type::_xsd_RPG_Common_CounterMeasure_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_CounterMeasure_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_CheckType_XMLTree_Type::value i)
{
  return o << RPG_Common_CheckType_XMLTree_Type::_xsd_RPG_Common_CheckType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_CheckType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_SavingThrow_XMLTree_Type::value i)
{
  return o << RPG_Common_SavingThrow_XMLTree_Type::_xsd_RPG_Common_SavingThrow_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_SavingThrow_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_BaseCheckTypeUnion_XMLTree_Type::value i)
{
  return o << RPG_Common_BaseCheckTypeUnion_XMLTree_Type::_xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_SaveReductionType_XMLTree_Type::value i)
{
  return o << RPG_Common_SaveReductionType_XMLTree_Type::_xsd_RPG_Common_SaveReductionType_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_SaveReductionType_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_SavingThrowCheck_XMLTree_Type& i)
{
  o << ::std::endl << "type: " << i.type ();
  if (i.attribute ())
  {
    o << ::std::endl << "attribute: " << *i.attribute ();
  }

  o << ::std::endl << "difficultyClass: " << i.difficultyClass ();
  o << ::std::endl << "reduction: " << i.reduction ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Amount_XMLTree_Type& i)
{
  if (i.value ())
  {
    o << ::std::endl << "value: " << *i.value ();
  }

  if (i.range ())
  {
    o << ::std::endl << "range: " << *i.range ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Usage_XMLTree_Type& i)
{
  o << ::std::endl << "numUses: " << i.numUses ();
  if (i.period ())
  {
    o << ::std::endl << "period: " << *i.period ();
  }

  if (i.interval ())
  {
    o << ::std::endl << "interval: " << *i.interval ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Duration_XMLTree_Type& i)
{
  if (i.activation ())
  {
    o << ::std::endl << "activation: " << *i.activation ();
  }

  if (i.interval ())
  {
    o << ::std::endl << "interval: " << *i.interval ();
  }

  if (i.total ())
  {
    o << ::std::endl << "total: " << *i.total ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_EffectDuration_XMLTree_Type& i)
{
  if (i.base ())
  {
    o << ::std::endl << "base: " << *i.base ();
  }

  if (i.levelIncrement ())
  {
    o << ::std::endl << "levelIncrement: " << *i.levelIncrement ();
  }

  if (i.levelIncrementMax ())
  {
    o << ::std::endl << "levelIncrementMax: " << *i.levelIncrementMax ();
  }

  o << ::std::endl << "reciprocalIncrement: " << i.reciprocalIncrement ();
  o << ::std::endl << "isMaxDelay: " << i.isMaxDelay ();
  o << ::std::endl << "incrementIsInHD: " << i.incrementIsInHD ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Camp_XMLTree_Type::value i)
{
  return o << RPG_Common_Camp_XMLTree_Type::_xsd_RPG_Common_Camp_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Camp_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_CreatureMetaType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_CreatureMetaType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_CreatureMetaType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_CreatureSubType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_CreatureSubType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_CreatureSubType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_CreatureType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // metaType
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "metaType",
        "urn:rpg",
        e));

    s << i.metaType ();
  }

  // subType
  //
  for (RPG_Common_CreatureType_XMLTree_Type::subType_const_iterator
       b (i.subType ().begin ()), n (i.subType ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "subType",
        "urn:rpg",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_SubClass_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_SubClass_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_SubClass_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Attribute_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Attribute_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Attribute_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Size_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Size_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Size_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Condition_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Condition_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Condition_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Skill_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Skill_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Skill_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_PhysicalDamageType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_PhysicalDamageType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_PhysicalDamageType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_ActionType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_ActionType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_ActionType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_AreaOfEffect_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_AreaOfEffect_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_AreaOfEffect_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_EffectType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_EffectType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_EffectType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_CounterMeasure_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_CounterMeasure_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_CounterMeasure_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_CheckType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_CheckType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_CheckType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_SavingThrow_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_SavingThrow_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_SavingThrow_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_SaveReductionType_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_SaveReductionType_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_SaveReductionType_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_SavingThrowCheck_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        "urn:rpg",
        e));

    s << i.type ();
  }

  // attribute
  //
  if (i.attribute ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "attribute",
        "urn:rpg",
        e));

    s << *i.attribute ();
  }

  // difficultyClass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "difficultyClass",
        "urn:rpg",
        e));

    s << i.difficultyClass ();
  }

  // reduction
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "reduction",
        e));

    a << i.reduction ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Amount_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // value
  //
  if (i.value ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        "urn:rpg",
        e));

    s << *i.value ();
  }

  // range
  //
  if (i.range ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "range",
        "urn:rpg",
        e));

    s << *i.range ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Usage_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // numUses
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "numUses",
        "urn:rpg",
        e));

    s << i.numUses ();
  }

  // period
  //
  if (i.period ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "period",
        "urn:rpg",
        e));

    s << *i.period ();
  }

  // interval
  //
  if (i.interval ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "interval",
        "urn:rpg",
        e));

    s << *i.interval ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Duration_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // activation
  //
  if (i.activation ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "activation",
        "urn:rpg",
        e));

    s << *i.activation ();
  }

  // interval
  //
  if (i.interval ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "interval",
        "urn:rpg",
        e));

    s << *i.interval ();
  }

  // total
  //
  if (i.total ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "total",
        "urn:rpg",
        e));

    s << *i.total ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_EffectDuration_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // base
  //
  if (i.base ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "base",
        "urn:rpg",
        e));

    s << *i.base ();
  }

  // levelIncrement
  //
  if (i.levelIncrement ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "levelIncrement",
        "urn:rpg",
        e));

    s << *i.levelIncrement ();
  }

  // levelIncrementMax
  //
  if (i.levelIncrementMax ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "levelIncrementMax",
        "urn:rpg",
        e));

    s << *i.levelIncrementMax ();
  }

  // reciprocalIncrement
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "reciprocalIncrement",
        e));

    a << i.reciprocalIncrement ();
  }

  // isMaxDelay
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "isMaxDelay",
        e));

    a << i.isMaxDelay ();
  }

  // incrementIsInHD
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "incrementIsInHD",
        e));

    a << i.incrementIsInHD ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Camp_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Camp_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Camp_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

RPG_Common_CreatureMetaType_XMLTree_Type::
RPG_Common_CreatureMetaType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_CreatureMetaType_XMLTree_Type_convert ();
}

RPG_Common_CreatureSubType_XMLTree_Type::
RPG_Common_CreatureSubType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_CreatureSubType_XMLTree_Type_convert ();
}

RPG_Common_CreatureType_XMLTree_Type::
RPG_Common_CreatureType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  metaType_ (f, this),
  subType_ (f, this)
{
  this->parse (s, f);
}

void RPG_Common_CreatureType_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< metaType_type > r (new metaType_type (s, f, this));
    this->metaType_.set (r);
  }

  {
    ::std::size_t n;
    ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
    s >> as;
    if (n > 0)
    {
      subType_sequence& c (this->subType_);
      c.reserve (n);
      while (n--)
      {
        ::std::auto_ptr< subType_type > r (new subType_type (s, f, this));
        c.push_back (r);
      }
    }
  }
}

RPG_Common_SubClass_XMLTree_Type::
RPG_Common_SubClass_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_SubClass_XMLTree_Type_convert ();
}

RPG_Common_Attribute_XMLTree_Type::
RPG_Common_Attribute_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_Attribute_XMLTree_Type_convert ();
}

RPG_Common_Size_XMLTree_Type::
RPG_Common_Size_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_Size_XMLTree_Type_convert ();
}

RPG_Common_Condition_XMLTree_Type::
RPG_Common_Condition_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_Condition_XMLTree_Type_convert ();
}

RPG_Common_Skill_XMLTree_Type::
RPG_Common_Skill_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_Skill_XMLTree_Type_convert ();
}

RPG_Common_PhysicalDamageType_XMLTree_Type::
RPG_Common_PhysicalDamageType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_PhysicalDamageType_XMLTree_Type_convert ();
}

RPG_Common_ActionType_XMLTree_Type::
RPG_Common_ActionType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_ActionType_XMLTree_Type_convert ();
}

RPG_Common_AreaOfEffect_XMLTree_Type::
RPG_Common_AreaOfEffect_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_AreaOfEffect_XMLTree_Type_convert ();
}

RPG_Common_EffectType_XMLTree_Type::
RPG_Common_EffectType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_EffectType_XMLTree_Type_convert ();
}

RPG_Common_CounterMeasure_XMLTree_Type::
RPG_Common_CounterMeasure_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_CounterMeasure_XMLTree_Type_convert ();
}

RPG_Common_CheckType_XMLTree_Type::
RPG_Common_CheckType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_CheckType_XMLTree_Type_convert ();
}

RPG_Common_SavingThrow_XMLTree_Type::
RPG_Common_SavingThrow_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_SavingThrow_XMLTree_Type_convert ();
}

RPG_Common_BaseCheckTypeUnion_XMLTree_Type::
RPG_Common_BaseCheckTypeUnion_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_BaseCheckTypeUnion_XMLTree_Type_convert ();
}

RPG_Common_SaveReductionType_XMLTree_Type::
RPG_Common_SaveReductionType_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_SaveReductionType_XMLTree_Type_convert ();
}

RPG_Common_SavingThrowCheck_XMLTree_Type::
RPG_Common_SavingThrowCheck_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  type_ (f, this),
  attribute_ (f, this),
  difficultyClass_ (f, this),
  reduction_ (f, this)
{
  this->parse (s, f);
}

void RPG_Common_SavingThrowCheck_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< type_type > r (new type_type (s, f, this));
    this->type_.set (r);
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< attribute_type > r (new attribute_type (s, f, this));
      this->attribute_.set (r);
    }
  }

  {
    difficultyClass_type r;
    s >> r;
    this->difficultyClass_.set (r);
  }

  {
    ::std::auto_ptr< reduction_type > r (new reduction_type (s, f, this));
    this->reduction_.set (r);
  }
}

RPG_Common_Amount_XMLTree_Type::
RPG_Common_Amount_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  value_ (f, this),
  range_ (f, this)
{
  this->parse (s, f);
}

void RPG_Common_Amount_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    bool p;
    s >> p;
    if (p)
    {
      value_type r;
      s >> r;
      this->value_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< range_type > r (new range_type (s, f, this));
      this->range_.set (r);
    }
  }
}

RPG_Common_Usage_XMLTree_Type::
RPG_Common_Usage_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  numUses_ (f, this),
  period_ (f, this),
  interval_ (f, this)
{
  this->parse (s, f);
}

void RPG_Common_Usage_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    numUses_type r;
    s >> r;
    this->numUses_.set (r);
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      period_type r;
      s >> r;
      this->period_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< interval_type > r (new interval_type (s, f, this));
      this->interval_.set (r);
    }
  }
}

RPG_Common_Duration_XMLTree_Type::
RPG_Common_Duration_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  activation_ (f, this),
  interval_ (f, this),
  total_ (f, this)
{
  this->parse (s, f);
}

void RPG_Common_Duration_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    bool p;
    s >> p;
    if (p)
    {
      activation_type r;
      s >> r;
      this->activation_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      interval_type r;
      s >> r;
      this->interval_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      total_type r;
      s >> r;
      this->total_.set (r);
    }
  }
}

RPG_Common_EffectDuration_XMLTree_Type::
RPG_Common_EffectDuration_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  base_ (f, this),
  levelIncrement_ (f, this),
  levelIncrementMax_ (f, this),
  reciprocalIncrement_ (f, this),
  isMaxDelay_ (f, this),
  incrementIsInHD_ (f, this)
{
  this->parse (s, f);
}

void RPG_Common_EffectDuration_XMLTree_Type::
parse (::xml_schema::istream< ACE_InputCDR >& s,
       ::xml_schema::flags f)
{
  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< base_type > r (new base_type (s, f, this));
      this->base_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      levelIncrement_type r;
      s >> r;
      this->levelIncrement_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      levelIncrementMax_type r;
      s >> r;
      this->levelIncrementMax_.set (r);
    }
  }

  {
    reciprocalIncrement_type r;
    s >> r;
    this->reciprocalIncrement_.set (r);
  }

  {
    isMaxDelay_type r;
    s >> r;
    this->isMaxDelay_.set (r);
  }

  {
    incrementIsInHD_type r;
    s >> r;
    this->incrementIsInHD_.set (r);
  }
}

RPG_Common_Camp_XMLTree_Type::
RPG_Common_Camp_XMLTree_Type (::xml_schema::istream< ACE_InputCDR >& s,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
: ::xml_schema::string (s, f, c)
{
  _xsd_RPG_Common_Camp_XMLTree_Type_convert ();
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_CreatureMetaType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_CreatureSubType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_CreatureType_XMLTree_Type& x)
{
  s << x.metaType ();
  {
    const RPG_Common_CreatureType_XMLTree_Type::subType_sequence& c (x.subType ());
    s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
    for (RPG_Common_CreatureType_XMLTree_Type::subType_const_iterator
         i (c.begin ()), e (c.end ());
         i != e; ++i)
    {
      s << *i;
    }
  }

  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_SubClass_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Attribute_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Size_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Condition_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Skill_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_PhysicalDamageType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_ActionType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_AreaOfEffect_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_EffectType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_CounterMeasure_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_CheckType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_SavingThrow_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_BaseCheckTypeUnion_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_SaveReductionType_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_SavingThrowCheck_XMLTree_Type& x)
{
  s << x.type ();
  {
    bool p (x.attribute ());
    s << p;
    if (p)
      s << *x.attribute ();
  }

  s << x.difficultyClass ();
  s << x.reduction ();
  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Amount_XMLTree_Type& x)
{
  {
    bool p (x.value ());
    s << p;
    if (p)
      s << *x.value ();
  }

  {
    bool p (x.range ());
    s << p;
    if (p)
      s << *x.range ();
  }

  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Usage_XMLTree_Type& x)
{
  s << x.numUses ();
  {
    bool p (x.period ());
    s << p;
    if (p)
      s << *x.period ();
  }

  {
    bool p (x.interval ());
    s << p;
    if (p)
      s << *x.interval ();
  }

  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Duration_XMLTree_Type& x)
{
  {
    bool p (x.activation ());
    s << p;
    if (p)
      s << *x.activation ();
  }

  {
    bool p (x.interval ());
    s << p;
    if (p)
      s << *x.interval ();
  }

  {
    bool p (x.total ());
    s << p;
    if (p)
      s << *x.total ();
  }

  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_EffectDuration_XMLTree_Type& x)
{
  {
    bool p (x.base ());
    s << p;
    if (p)
      s << *x.base ();
  }

  {
    bool p (x.levelIncrement ());
    s << p;
    if (p)
      s << *x.levelIncrement ();
  }

  {
    bool p (x.levelIncrementMax ());
    s << p;
    if (p)
      s << *x.levelIncrementMax ();
  }

  s << x.reciprocalIncrement ();
  s << x.isMaxDelay ();
  s << x.incrementIsInHD ();
  return s;
}

::xsd::cxx::tree::ostream< ACE_OutputCDR >&
operator<< (::xsd::cxx::tree::ostream< ACE_OutputCDR >& s,
            const RPG_Common_Camp_XMLTree_Type& x)
{
  return s << static_cast< const ::xml_schema::string& > (x);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

