// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "stdafx.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rpg_common_environment_XML_tree.h"

// RPG_Common_Plane_XMLTree_Type
// 

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Plane_XMLTree_Type_literals_[v])
{
}

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const RPG_Common_Plane_XMLTree_Type& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Plane_XMLTree_Type& RPG_Common_Plane_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Plane_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Terrain_XMLTree_Type
// 

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Terrain_XMLTree_Type_literals_[v])
{
}

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const RPG_Common_Terrain_XMLTree_Type& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Terrain_XMLTree_Type& RPG_Common_Terrain_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Terrain_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Track_XMLTree_Type
// 

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Track_XMLTree_Type_literals_[v])
{
}

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const RPG_Common_Track_XMLTree_Type& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Track_XMLTree_Type& RPG_Common_Track_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Track_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Climate_XMLTree_Type
// 

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_Climate_XMLTree_Type_literals_[v])
{
}

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const RPG_Common_Climate_XMLTree_Type& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_Climate_XMLTree_Type& RPG_Common_Climate_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_Climate_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_TimeOfDay_XMLTree_Type
// 

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_TimeOfDay_XMLTree_Type_literals_[v])
{
}

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const RPG_Common_TimeOfDay_XMLTree_Type& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_TimeOfDay_XMLTree_Type& RPG_Common_TimeOfDay_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_TimeOfDay_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_AmbientLighting_XMLTree_Type
// 

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (value v)
: ::xml_schema::string (_xsd_RPG_Common_AmbientLighting_XMLTree_Type_literals_[v])
{
}

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const char* v)
: ::xml_schema::string (v)
{
}

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const RPG_Common_AmbientLighting_XMLTree_Type& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

RPG_Common_AmbientLighting_XMLTree_Type& RPG_Common_AmbientLighting_XMLTree_Type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_RPG_Common_AmbientLighting_XMLTree_Type_literals_[v]);

  return *this;
}


// RPG_Common_Environment_XMLTree_Type
// 

const RPG_Common_Environment_XMLTree_Type::plane_optional& RPG_Common_Environment_XMLTree_Type::
plane () const
{
  return this->plane_;
}

RPG_Common_Environment_XMLTree_Type::plane_optional& RPG_Common_Environment_XMLTree_Type::
plane ()
{
  return this->plane_;
}

void RPG_Common_Environment_XMLTree_Type::
plane (const plane_type& x)
{
  this->plane_.set (x);
}

void RPG_Common_Environment_XMLTree_Type::
plane (const plane_optional& x)
{
  this->plane_ = x;
}

void RPG_Common_Environment_XMLTree_Type::
plane (::std::auto_ptr< plane_type > x)
{
  this->plane_.set (x);
}

const RPG_Common_Environment_XMLTree_Type::terrain_optional& RPG_Common_Environment_XMLTree_Type::
terrain () const
{
  return this->terrain_;
}

RPG_Common_Environment_XMLTree_Type::terrain_optional& RPG_Common_Environment_XMLTree_Type::
terrain ()
{
  return this->terrain_;
}

void RPG_Common_Environment_XMLTree_Type::
terrain (const terrain_type& x)
{
  this->terrain_.set (x);
}

void RPG_Common_Environment_XMLTree_Type::
terrain (const terrain_optional& x)
{
  this->terrain_ = x;
}

void RPG_Common_Environment_XMLTree_Type::
terrain (::std::auto_ptr< terrain_type > x)
{
  this->terrain_.set (x);
}

const RPG_Common_Environment_XMLTree_Type::climate_optional& RPG_Common_Environment_XMLTree_Type::
climate () const
{
  return this->climate_;
}

RPG_Common_Environment_XMLTree_Type::climate_optional& RPG_Common_Environment_XMLTree_Type::
climate ()
{
  return this->climate_;
}

void RPG_Common_Environment_XMLTree_Type::
climate (const climate_type& x)
{
  this->climate_.set (x);
}

void RPG_Common_Environment_XMLTree_Type::
climate (const climate_optional& x)
{
  this->climate_ = x;
}

void RPG_Common_Environment_XMLTree_Type::
climate (::std::auto_ptr< climate_type > x)
{
  this->climate_.set (x);
}

const RPG_Common_Environment_XMLTree_Type::time_optional& RPG_Common_Environment_XMLTree_Type::
time () const
{
  return this->time_;
}

RPG_Common_Environment_XMLTree_Type::time_optional& RPG_Common_Environment_XMLTree_Type::
time ()
{
  return this->time_;
}

void RPG_Common_Environment_XMLTree_Type::
time (const time_type& x)
{
  this->time_.set (x);
}

void RPG_Common_Environment_XMLTree_Type::
time (const time_optional& x)
{
  this->time_ = x;
}

void RPG_Common_Environment_XMLTree_Type::
time (::std::auto_ptr< time_type > x)
{
  this->time_.set (x);
}

const RPG_Common_Environment_XMLTree_Type::lighting_optional& RPG_Common_Environment_XMLTree_Type::
lighting () const
{
  return this->lighting_;
}

RPG_Common_Environment_XMLTree_Type::lighting_optional& RPG_Common_Environment_XMLTree_Type::
lighting ()
{
  return this->lighting_;
}

void RPG_Common_Environment_XMLTree_Type::
lighting (const lighting_type& x)
{
  this->lighting_.set (x);
}

void RPG_Common_Environment_XMLTree_Type::
lighting (const lighting_optional& x)
{
  this->lighting_ = x;
}

void RPG_Common_Environment_XMLTree_Type::
lighting (::std::auto_ptr< lighting_type > x)
{
  this->lighting_.set (x);
}

const RPG_Common_Environment_XMLTree_Type::outdoors_type& RPG_Common_Environment_XMLTree_Type::
outdoors () const
{
  return this->outdoors_.get ();
}

RPG_Common_Environment_XMLTree_Type::outdoors_type& RPG_Common_Environment_XMLTree_Type::
outdoors ()
{
  return this->outdoors_.get ();
}

void RPG_Common_Environment_XMLTree_Type::
outdoors (const outdoors_type& x)
{
  this->outdoors_.set (x);
}

RPG_Common_Environment_XMLTree_Type::outdoors_type RPG_Common_Environment_XMLTree_Type::
outdoors_default_value ()
{
  return outdoors_type (true);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// RPG_Common_Plane_XMLTree_Type
//

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Plane_XMLTree_Type_convert ();
}

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Plane_XMLTree_Type_convert ();
}

RPG_Common_Plane_XMLTree_Type::
RPG_Common_Plane_XMLTree_Type (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Plane_XMLTree_Type_convert ();
}

RPG_Common_Plane_XMLTree_Type* RPG_Common_Plane_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Plane_XMLTree_Type (*this, f, c);
}

RPG_Common_Plane_XMLTree_Type::value RPG_Common_Plane_XMLTree_Type::
_xsd_RPG_Common_Plane_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Plane_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Plane_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Plane_XMLTree_Type_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Plane_XMLTree_Type_indexes_ + 5 || _xsd_RPG_Common_Plane_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Plane_XMLTree_Type::
_xsd_RPG_Common_Plane_XMLTree_Type_literals_[5] =
{
  "PLANE_INNER",
  "PLANE_MATERIAL",
  "PLANE_OUTER",
  "PLANE_TRANSITIVE",
  "PLANE_ANY"
};

const RPG_Common_Plane_XMLTree_Type::value RPG_Common_Plane_XMLTree_Type::
_xsd_RPG_Common_Plane_XMLTree_Type_indexes_[5] =
{
  ::RPG_Common_Plane_XMLTree_Type::PLANE_ANY,
  ::RPG_Common_Plane_XMLTree_Type::PLANE_INNER,
  ::RPG_Common_Plane_XMLTree_Type::PLANE_MATERIAL,
  ::RPG_Common_Plane_XMLTree_Type::PLANE_OUTER,
  ::RPG_Common_Plane_XMLTree_Type::PLANE_TRANSITIVE
};

// RPG_Common_Terrain_XMLTree_Type
//

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Terrain_XMLTree_Type_convert ();
}

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Terrain_XMLTree_Type_convert ();
}

RPG_Common_Terrain_XMLTree_Type::
RPG_Common_Terrain_XMLTree_Type (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Terrain_XMLTree_Type_convert ();
}

RPG_Common_Terrain_XMLTree_Type* RPG_Common_Terrain_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Terrain_XMLTree_Type (*this, f, c);
}

RPG_Common_Terrain_XMLTree_Type::value RPG_Common_Terrain_XMLTree_Type::
_xsd_RPG_Common_Terrain_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Terrain_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Terrain_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Terrain_XMLTree_Type_indexes_ + 37,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Terrain_XMLTree_Type_indexes_ + 37 || _xsd_RPG_Common_Terrain_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Terrain_XMLTree_Type::
_xsd_RPG_Common_Terrain_XMLTree_Type_literals_[37] =
{
  "TERRAIN_DESERT_SANDY",
  "TERRAIN_FOREST",
  "TERRAIN_HILLS",
  "TERRAIN_JUNGLE",
  "TERRAIN_MOOR",
  "TERRAIN_MOUNTAINS",
  "TERRAIN_PLAINS",
  "TERRAIN_PLANE_INNER_AIR",
  "TERRAIN_PLANE_INNER_EARTH",
  "TERRAIN_PLANE_INNER_FIRE",
  "TERRAIN_PLANE_INNER_WATER",
  "TERRAIN_PLANE_INNER_POSITIVE",
  "TERRAIN_PLANE_INNER_NEGATIVE",
  "TERRAIN_PLANE_INNER_ANY",
  "TERRAIN_PLANE_MATERIAL_ANY",
  "TERRAIN_PLANE_OUTER_LAWFUL_ANY",
  "TERRAIN_PLANE_OUTER_CHAOTIC_ANY",
  "TERRAIN_PLANE_OUTER_GOOD_ANY",
  "TERRAIN_PLANE_OUTER_EVIL_ANY",
  "TERRAIN_PLANE_OUTER_LAWFUL_GOOD",
  "TERRAIN_PLANE_OUTER_LAWFUL_EVIL",
  "TERRAIN_PLANE_OUTER_CHAOTIC_GOOD",
  "TERRAIN_PLANE_OUTER_CHAOTIC_EVIL",
  "TERRAIN_PLANE_OUTER_NEUTRAL",
  "TERRAIN_PLANE_OUTER_MILD_ANY",
  "TERRAIN_PLANE_OUTER_STRONG_ANY",
  "TERRAIN_PLANE_OUTER_ANY",
  "TERRAIN_PLANE_TRANSITIVE_ASTRAL",
  "TERRAIN_PLANE_TRANSITIVE_ETHERAL",
  "TERRAIN_PLANE_TRANSITIVE_SHADOW",
  "TERRAIN_PLANE_TRANSITIVE_ANY",
  "TERRAIN_SETTLEMENT",
  "TERRAIN_SWAMP",
  "TERRAIN_TUNDRA_FROZEN",
  "TERRAIN_UNDER_GROUND",
  "TERRAIN_UNDER_WATER",
  "TERRAIN_ANY"
};

const RPG_Common_Terrain_XMLTree_Type::value RPG_Common_Terrain_XMLTree_Type::
_xsd_RPG_Common_Terrain_XMLTree_Type_indexes_[37] =
{
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_DESERT_SANDY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_FOREST,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_HILLS,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_JUNGLE,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_MOOR,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_MOUNTAINS,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLAINS,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_AIR,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_EARTH,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_FIRE,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_NEGATIVE,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_POSITIVE,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_INNER_WATER,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_MATERIAL_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_CHAOTIC_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_CHAOTIC_EVIL,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_CHAOTIC_GOOD,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_EVIL_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_GOOD_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_LAWFUL_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_LAWFUL_EVIL,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_LAWFUL_GOOD,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_MILD_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_NEUTRAL,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_OUTER_STRONG_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_TRANSITIVE_ANY,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_TRANSITIVE_ASTRAL,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_TRANSITIVE_ETHERAL,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_PLANE_TRANSITIVE_SHADOW,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_SETTLEMENT,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_SWAMP,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_TUNDRA_FROZEN,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_UNDER_GROUND,
  ::RPG_Common_Terrain_XMLTree_Type::TERRAIN_UNDER_WATER
};

// RPG_Common_Track_XMLTree_Type
//

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Track_XMLTree_Type_convert ();
}

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Track_XMLTree_Type_convert ();
}

RPG_Common_Track_XMLTree_Type::
RPG_Common_Track_XMLTree_Type (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Track_XMLTree_Type_convert ();
}

RPG_Common_Track_XMLTree_Type* RPG_Common_Track_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Track_XMLTree_Type (*this, f, c);
}

RPG_Common_Track_XMLTree_Type::value RPG_Common_Track_XMLTree_Type::
_xsd_RPG_Common_Track_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Track_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Track_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Track_XMLTree_Type_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Track_XMLTree_Type_indexes_ + 5 || _xsd_RPG_Common_Track_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Track_XMLTree_Type::
_xsd_RPG_Common_Track_XMLTree_Type_literals_[5] =
{
  "TRACK_NONE",
  "TRACK_HIGHWAY",
  "TRACK_ROAD",
  "TRACK_TRAIL",
  "TRACK_ANY"
};

const RPG_Common_Track_XMLTree_Type::value RPG_Common_Track_XMLTree_Type::
_xsd_RPG_Common_Track_XMLTree_Type_indexes_[5] =
{
  ::RPG_Common_Track_XMLTree_Type::TRACK_ANY,
  ::RPG_Common_Track_XMLTree_Type::TRACK_HIGHWAY,
  ::RPG_Common_Track_XMLTree_Type::TRACK_NONE,
  ::RPG_Common_Track_XMLTree_Type::TRACK_ROAD,
  ::RPG_Common_Track_XMLTree_Type::TRACK_TRAIL
};

// RPG_Common_Climate_XMLTree_Type
//

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_Climate_XMLTree_Type_convert ();
}

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_Climate_XMLTree_Type_convert ();
}

RPG_Common_Climate_XMLTree_Type::
RPG_Common_Climate_XMLTree_Type (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_Climate_XMLTree_Type_convert ();
}

RPG_Common_Climate_XMLTree_Type* RPG_Common_Climate_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Climate_XMLTree_Type (*this, f, c);
}

RPG_Common_Climate_XMLTree_Type::value RPG_Common_Climate_XMLTree_Type::
_xsd_RPG_Common_Climate_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_Climate_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_Climate_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_Climate_XMLTree_Type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_Climate_XMLTree_Type_indexes_ + 4 || _xsd_RPG_Common_Climate_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_Climate_XMLTree_Type::
_xsd_RPG_Common_Climate_XMLTree_Type_literals_[4] =
{
  "CLIMATE_COLD",
  "CLIMATE_TEMPERATE",
  "CLIMATE_WARM",
  "CLIMATE_ANY"
};

const RPG_Common_Climate_XMLTree_Type::value RPG_Common_Climate_XMLTree_Type::
_xsd_RPG_Common_Climate_XMLTree_Type_indexes_[4] =
{
  ::RPG_Common_Climate_XMLTree_Type::CLIMATE_ANY,
  ::RPG_Common_Climate_XMLTree_Type::CLIMATE_COLD,
  ::RPG_Common_Climate_XMLTree_Type::CLIMATE_TEMPERATE,
  ::RPG_Common_Climate_XMLTree_Type::CLIMATE_WARM
};

// RPG_Common_TimeOfDay_XMLTree_Type
//

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_TimeOfDay_XMLTree_Type_convert ();
}

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_TimeOfDay_XMLTree_Type_convert ();
}

RPG_Common_TimeOfDay_XMLTree_Type::
RPG_Common_TimeOfDay_XMLTree_Type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_TimeOfDay_XMLTree_Type_convert ();
}

RPG_Common_TimeOfDay_XMLTree_Type* RPG_Common_TimeOfDay_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_TimeOfDay_XMLTree_Type (*this, f, c);
}

RPG_Common_TimeOfDay_XMLTree_Type::value RPG_Common_TimeOfDay_XMLTree_Type::
_xsd_RPG_Common_TimeOfDay_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_TimeOfDay_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_TimeOfDay_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_TimeOfDay_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_TimeOfDay_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Common_TimeOfDay_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_TimeOfDay_XMLTree_Type::
_xsd_RPG_Common_TimeOfDay_XMLTree_Type_literals_[3] =
{
  "TIMEOFDAY_DAYTIME",
  "TIMEOFDAY_NIGHTTIME",
  "TIMEOFDAY_ANY"
};

const RPG_Common_TimeOfDay_XMLTree_Type::value RPG_Common_TimeOfDay_XMLTree_Type::
_xsd_RPG_Common_TimeOfDay_XMLTree_Type_indexes_[3] =
{
  ::RPG_Common_TimeOfDay_XMLTree_Type::TIMEOFDAY_ANY,
  ::RPG_Common_TimeOfDay_XMLTree_Type::TIMEOFDAY_DAYTIME,
  ::RPG_Common_TimeOfDay_XMLTree_Type::TIMEOFDAY_NIGHTTIME
};

// RPG_Common_AmbientLighting_XMLTree_Type
//

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_RPG_Common_AmbientLighting_XMLTree_Type_convert ();
}

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_RPG_Common_AmbientLighting_XMLTree_Type_convert ();
}

RPG_Common_AmbientLighting_XMLTree_Type::
RPG_Common_AmbientLighting_XMLTree_Type (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_RPG_Common_AmbientLighting_XMLTree_Type_convert ();
}

RPG_Common_AmbientLighting_XMLTree_Type* RPG_Common_AmbientLighting_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_AmbientLighting_XMLTree_Type (*this, f, c);
}

RPG_Common_AmbientLighting_XMLTree_Type::value RPG_Common_AmbientLighting_XMLTree_Type::
_xsd_RPG_Common_AmbientLighting_XMLTree_Type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RPG_Common_AmbientLighting_XMLTree_Type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_RPG_Common_AmbientLighting_XMLTree_Type_indexes_,
                    _xsd_RPG_Common_AmbientLighting_XMLTree_Type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_RPG_Common_AmbientLighting_XMLTree_Type_indexes_ + 3 || _xsd_RPG_Common_AmbientLighting_XMLTree_Type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const RPG_Common_AmbientLighting_XMLTree_Type::
_xsd_RPG_Common_AmbientLighting_XMLTree_Type_literals_[3] =
{
  "AMBIENCE_BRIGHT",
  "AMBIENCE_SHADOWY",
  "AMBIENCE_DARKNESS"
};

const RPG_Common_AmbientLighting_XMLTree_Type::value RPG_Common_AmbientLighting_XMLTree_Type::
_xsd_RPG_Common_AmbientLighting_XMLTree_Type_indexes_[3] =
{
  ::RPG_Common_AmbientLighting_XMLTree_Type::AMBIENCE_BRIGHT,
  ::RPG_Common_AmbientLighting_XMLTree_Type::AMBIENCE_DARKNESS,
  ::RPG_Common_AmbientLighting_XMLTree_Type::AMBIENCE_SHADOWY
};

// RPG_Common_Environment_XMLTree_Type
//

RPG_Common_Environment_XMLTree_Type::
RPG_Common_Environment_XMLTree_Type ()
: ::xml_schema::type (),
  plane_ (::xml_schema::flags (), this),
  terrain_ (::xml_schema::flags (), this),
  climate_ (::xml_schema::flags (), this),
  time_ (::xml_schema::flags (), this),
  lighting_ (::xml_schema::flags (), this),
  outdoors_ (outdoors_default_value (), ::xml_schema::flags (), this)
{
}

RPG_Common_Environment_XMLTree_Type::
RPG_Common_Environment_XMLTree_Type (const RPG_Common_Environment_XMLTree_Type& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  plane_ (x.plane_, f, this),
  terrain_ (x.terrain_, f, this),
  climate_ (x.climate_, f, this),
  time_ (x.time_, f, this),
  lighting_ (x.lighting_, f, this),
  outdoors_ (x.outdoors_, f, this)
{
}

RPG_Common_Environment_XMLTree_Type::
RPG_Common_Environment_XMLTree_Type (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  plane_ (f, this),
  terrain_ (f, this),
  climate_ (f, this),
  time_ (f, this),
  lighting_ (f, this),
  outdoors_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void RPG_Common_Environment_XMLTree_Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // plane
    //
    if (n.name () == "plane" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< plane_type > r (
        plane_traits::create (i, f, this));

      if (!this->plane_)
      {
        this->plane_.set (r);
        continue;
      }
    }

    // terrain
    //
    if (n.name () == "terrain" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< terrain_type > r (
        terrain_traits::create (i, f, this));

      if (!this->terrain_)
      {
        this->terrain_.set (r);
        continue;
      }
    }

    // climate
    //
    if (n.name () == "climate" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< climate_type > r (
        climate_traits::create (i, f, this));

      if (!this->climate_)
      {
        this->climate_.set (r);
        continue;
      }
    }

    // time
    //
    if (n.name () == "time" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< time_type > r (
        time_traits::create (i, f, this));

      if (!this->time_)
      {
        this->time_.set (r);
        continue;
      }
    }

    // lighting
    //
    if (n.name () == "lighting" && n.namespace_ () == "urn:rpg")
    {
      ::std::auto_ptr< lighting_type > r (
        lighting_traits::create (i, f, this));

      if (!this->lighting_)
      {
        this->lighting_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "outdoors" && n.namespace_ ().empty ())
    {
      this->outdoors_.set (outdoors_traits::create (i, f, this));
      continue;
    }
  }

  if (!outdoors_.present ())
  {
    this->outdoors_.set (outdoors_default_value ());
  }
}

RPG_Common_Environment_XMLTree_Type* RPG_Common_Environment_XMLTree_Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RPG_Common_Environment_XMLTree_Type (*this, f, c);
}

RPG_Common_Environment_XMLTree_Type::
~RPG_Common_Environment_XMLTree_Type ()
{
}

bool
operator== (const RPG_Common_Environment_XMLTree_Type& x, const RPG_Common_Environment_XMLTree_Type& y)
{
  if (!(x.plane () == y.plane ()))
    return false;

  if (!(x.terrain () == y.terrain ()))
    return false;

  if (!(x.climate () == y.climate ()))
    return false;

  if (!(x.time () == y.time ()))
    return false;

  if (!(x.lighting () == y.lighting ()))
    return false;

  if (!(x.outdoors () == y.outdoors ()))
    return false;

  return true;
}

bool
operator!= (const RPG_Common_Environment_XMLTree_Type& x, const RPG_Common_Environment_XMLTree_Type& y)
{
  return !(x == y);
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Plane_XMLTree_Type::value i)
{
  return o << RPG_Common_Plane_XMLTree_Type::_xsd_RPG_Common_Plane_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Plane_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Terrain_XMLTree_Type::value i)
{
  return o << RPG_Common_Terrain_XMLTree_Type::_xsd_RPG_Common_Terrain_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Terrain_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Track_XMLTree_Type::value i)
{
  return o << RPG_Common_Track_XMLTree_Type::_xsd_RPG_Common_Track_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Track_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_Climate_XMLTree_Type::value i)
{
  return o << RPG_Common_Climate_XMLTree_Type::_xsd_RPG_Common_Climate_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Climate_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_TimeOfDay_XMLTree_Type::value i)
{
  return o << RPG_Common_TimeOfDay_XMLTree_Type::_xsd_RPG_Common_TimeOfDay_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_TimeOfDay_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, RPG_Common_AmbientLighting_XMLTree_Type::value i)
{
  return o << RPG_Common_AmbientLighting_XMLTree_Type::_xsd_RPG_Common_AmbientLighting_XMLTree_Type_literals_[i];
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_AmbientLighting_XMLTree_Type& i)
{
  return o << static_cast< const ::xml_schema::string& > (i);
}

::std::ostream&
operator<< (::std::ostream& o, const RPG_Common_Environment_XMLTree_Type& i)
{
  if (i.plane ())
  {
    o << ::std::endl << "plane: " << *i.plane ();
  }

  if (i.terrain ())
  {
    o << ::std::endl << "terrain: " << *i.terrain ();
  }

  if (i.climate ())
  {
    o << ::std::endl << "climate: " << *i.climate ();
  }

  if (i.time ())
  {
    o << ::std::endl << "time: " << *i.time ();
  }

  if (i.lighting ())
  {
    o << ::std::endl << "lighting: " << *i.lighting ();
  }

  o << ::std::endl << "outdoors: " << i.outdoors ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Plane_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Plane_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Plane_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Terrain_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Terrain_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Terrain_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Track_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Track_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Track_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Climate_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_Climate_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_Climate_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_TimeOfDay_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_TimeOfDay_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_TimeOfDay_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_AmbientLighting_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const RPG_Common_AmbientLighting_XMLTree_Type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const RPG_Common_AmbientLighting_XMLTree_Type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const RPG_Common_Environment_XMLTree_Type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // plane
  //
  if (i.plane ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "plane",
        "urn:rpg",
        e));

    s << *i.plane ();
  }

  // terrain
  //
  if (i.terrain ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "terrain",
        "urn:rpg",
        e));

    s << *i.terrain ();
  }

  // climate
  //
  if (i.climate ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "climate",
        "urn:rpg",
        e));

    s << *i.climate ();
  }

  // time
  //
  if (i.time ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "time",
        "urn:rpg",
        e));

    s << *i.time ();
  }

  // lighting
  //
  if (i.lighting ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "lighting",
        "urn:rpg",
        e));

    s << *i.lighting ();
  }

  // outdoors
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "outdoors",
        e));

    a << i.outdoors ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

