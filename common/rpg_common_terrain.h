
// -------------------------------- * * * -------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.1
// -------------------------------- * * * -------------------------------- //

#pragma once
#ifndef RPG_COMMON_TERRAIN_H
#define RPG_COMMON_TERRAIN_H

enum RPG_Common_Terrain
{
  TERRAIN_DESERTS = 0,
  TERRAIN_FORESTS,
  TERRAIN_HILLS,
  TERRAIN_MARSHES,
  TERRAIN_MOUNTAINS,
  TERRAIN_PLAINS,
  TERRAIN_UNDERGROUND,
  TERRAIN_MATERIALPLANE_ANY,
  TERRAIN_TRANSITIVEPLANE_ASTRAL,
  TERRAIN_TRANSITIVEPLANE_ETHERAL,
  TERRAIN_TRANSITIVEPLANE_SHADOW,
  TERRAIN_TRANSITIVEPLANE_ANY,
  TERRAIN_INNERPLANE_AIR,
  TERRAIN_INNERPLANE_EARTH,
  TERRAIN_INNERPLANE_FIRE,
  TERRAIN_INNERPLANE_WATER,
  TERRAIN_INNERPLANE_POSITIVE,
  TERRAIN_INNERPLANE_NEGATIVE,
  TERRAIN_INNERPLANE_ANY,
  TERRAIN_OUTERPLANE_LAWFUL_ANY,
  TERRAIN_OUTERPLANE_CHAOTIC_ANY,
  TERRAIN_OUTERPLANE_GOOD_ANY,
  TERRAIN_OUTERPLANE_EVIL_ANY,
  TERRAIN_OUTERPLANE_LAWFUL_GOOD,
  TERRAIN_OUTERPLANE_LAWFUL_EVIL,
  TERRAIN_OUTERPLANE_CHAOTIC_GOOD,
  TERRAIN_OUTERPLANE_CHAOTIC_EVIL,
  TERRAIN_OUTERPLANE_NEUTRAL,
  TERRAIN_OUTERPLANE_MILD_ANY,
  TERRAIN_OUTERPLANE_STRONG_ANY,
  TERRAIN_OUTERPLANE_ANY,
  TERRAIN_ANY,
  //
  RPG_COMMON_TERRAIN_MAX,
  RPG_COMMON_TERRAIN_INVALID
};

#include <ace/Global_Macros.h>

#include <map>
#include <string>

typedef std::map<RPG_Common_Terrain, std::string> RPG_Common_TerrainToStringTable_t;
typedef RPG_Common_TerrainToStringTable_t::const_iterator RPG_Common_TerrainToStringTableIterator_t;

class RPG_Common_TerrainHelper
{
 public:
  inline static void init()
  {
    myRPG_Common_TerrainToStringTable.clear();
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_DESERTS, ACE_TEXT_ALWAYS_CHAR("TERRAIN_DESERTS")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_FORESTS, ACE_TEXT_ALWAYS_CHAR("TERRAIN_FORESTS")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_HILLS, ACE_TEXT_ALWAYS_CHAR("TERRAIN_HILLS")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_MARSHES, ACE_TEXT_ALWAYS_CHAR("TERRAIN_MARSHES")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_MOUNTAINS, ACE_TEXT_ALWAYS_CHAR("TERRAIN_MOUNTAINS")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_PLAINS, ACE_TEXT_ALWAYS_CHAR("TERRAIN_PLAINS")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_UNDERGROUND, ACE_TEXT_ALWAYS_CHAR("TERRAIN_UNDERGROUND")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_MATERIALPLANE_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_MATERIALPLANE_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_TRANSITIVEPLANE_ASTRAL, ACE_TEXT_ALWAYS_CHAR("TERRAIN_TRANSITIVEPLANE_ASTRAL")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_TRANSITIVEPLANE_ETHERAL, ACE_TEXT_ALWAYS_CHAR("TERRAIN_TRANSITIVEPLANE_ETHERAL")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_TRANSITIVEPLANE_SHADOW, ACE_TEXT_ALWAYS_CHAR("TERRAIN_TRANSITIVEPLANE_SHADOW")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_TRANSITIVEPLANE_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_TRANSITIVEPLANE_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_AIR, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_AIR")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_EARTH, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_EARTH")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_FIRE, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_FIRE")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_WATER, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_WATER")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_POSITIVE, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_POSITIVE")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_NEGATIVE, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_NEGATIVE")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_INNERPLANE_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_INNERPLANE_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_LAWFUL_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_LAWFUL_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_CHAOTIC_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_CHAOTIC_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_GOOD_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_GOOD_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_EVIL_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_EVIL_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_LAWFUL_GOOD, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_LAWFUL_GOOD")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_LAWFUL_EVIL, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_LAWFUL_EVIL")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_CHAOTIC_GOOD, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_CHAOTIC_GOOD")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_CHAOTIC_EVIL, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_CHAOTIC_EVIL")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_NEUTRAL, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_NEUTRAL")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_MILD_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_MILD_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_STRONG_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_STRONG_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_OUTERPLANE_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_OUTERPLANE_ANY")));
    myRPG_Common_TerrainToStringTable.insert(std::make_pair(TERRAIN_ANY, ACE_TEXT_ALWAYS_CHAR("TERRAIN_ANY")));
  };

  inline static std::string RPG_Common_TerrainToString(const RPG_Common_Terrain& element_in)
  {
    std::string result;
    RPG_Common_TerrainToStringTableIterator_t iterator = myRPG_Common_TerrainToStringTable.find(element_in);
    if (iterator != myRPG_Common_TerrainToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_COMMON_TERRAIN_INVALID");

    return result;
  };

  inline static RPG_Common_Terrain stringToRPG_Common_Terrain(const std::string& string_in)
  {
    RPG_Common_TerrainToStringTableIterator_t iterator = myRPG_Common_TerrainToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Common_TerrainToStringTable.end());

    return RPG_COMMON_TERRAIN_INVALID;
  };

  static RPG_Common_TerrainToStringTable_t myRPG_Common_TerrainToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_TerrainHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_TerrainHelper(const RPG_Common_TerrainHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_TerrainHelper& operator=(const RPG_Common_TerrainHelper&));
};

#endif
